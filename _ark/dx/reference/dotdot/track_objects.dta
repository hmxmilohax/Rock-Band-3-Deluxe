(TrackDir
   (description
      "Base class for track system. Contains configuration for\n   track speed, length, slot positions.  Manages TrackWidget instances.")
   (superclasses PanelDir)
   (allowed_dirs)
   (editor
      (draw_group
         object
         (class Group)
         (help
            "Should contain everything to draw (except widget resources)"))
      (anim_group
         object
         (class Group)
         (help
            "Animated at rate where frame=y position of now bar"))
      (y_per_second
         float
         (range 1 10000)
         (help
            "World units widgets move per second"))
      (top_y
         float
         (help
            "Distance where widgets are pushed onto track"))
      (bottom_y
         float
         (help
            "Distance where widgets are pruned from track"))
      (warn_on_resort
         bool
         (help
            "WARN if widget instances are added out of order? (can be off for prototyping)"))
      (TrackTesting
         (struct
            (widget
               object
               (class TrackWidget)
               (help
                  "Widget to test"))
            (slot
               int
               (range 0 10)
               (help
                  "Slot to add widgets in"))
            (add_widget
               script
               (script
                  {$this
                     add_test_widget
                     [TrackTesting widget]
                     [TrackTesting slot]})
               (help
                  "Add a widget instance to the top of the track")
               (label
                  "add"))
            (toggle_running
               script
               (script
                  {$this toggle_running})
               (help
                  "Toggle running the track in test mode")
               (label
                  "toggle")))))
   (types))
#define WIDGET_TYPES
("kImmediateWidget"
   "kMultiMeshWidget"
   "kTextWidget"
   "kMatWidget")
(TrackWidget
   (description
      "Any object that is placed on the track and scrolls towards the\n   player.  Can have any number of meshes and an environment. Drawn efficiently\n   and pruned automatically by TrackDir.")
   (superclasses Draw Poll)
   (allowed_dirs RndDir)
   (types)
   (ext wid)
   (editor
      (widget_type
         int
         (list
            (WIDGET_TYPES))
         (refresh meshes allow_rotation base_length font text_obj chars_per_inst max_text_instances mat))
      (x_offset
         float
         (help
            "X offset to be applied to all widget instances"))
      (y_offset
         float
         (help
            "Y offset to be applied to all widget instances"))
      (z_offset
         float
         (help
            "Z offset to be applied to all widget instances"))
      (allow_shift
         bool
         (help
            "Allow widget instances to shift their X/Z coordinates in coordination with their smasher during a keyboard lane shift"))
      (meshes
         (array
            object
            (class Mesh))
         (help
            "Meshes used to draw widgets, drawn in order")
         (hide
            {&&
               {!=
                  [widget_type]
                  kImmediateWidget}
               {!=
                  [widget_type]
                  kMultiMeshWidget}}))
      (environ
         object
         (class Environ)
         (help
            "Environment used to draw widget"))
      (allow_rotation
         bool
         (help
            "Allow meshes to be rotated/scaled"))
      (base_length
         float
         (range 1.0e-2 1000)
         (help
            "Length of unscaled geometry, should be 0 if no duration")
         (hide
            {&&
               {!=
                  [widget_type]
                  kImmediateWidget}
               {!=
                  [widget_type]
                  kMultiMeshWidget}}))
      (base_width
         float
         (range 1.0e-2 1000)
         (help
            "Width of unscaled geometry, should be 0 if no scaling")
         (hide
            {&&
               {!=
                  [widget_type]
                  kImmediateWidget}
               {!=
                  [widget_type]
                  kMultiMeshWidget}}))
      (font
         object
         (class Font)
         (hide
            {!=
               [widget_type]
               kTextWidget}))
      (text_obj
         object
         (class Text)
         (hide
            {!=
               [widget_type]
               kTextWidget}))
      (text_alignment
         int
         (list
            ("kTopLeft"
               "kTopCenter"
               "kTopRight"
               "kMiddleLeft"
               "kMiddleCenter"
               "kMiddleRight"
               "kBottomLeft"
               "kBottomCenter"
               "kBottomRight"))
         (hide
            {!=
               [widget_type]
               kTextWidget}))
      (chars_per_inst
         int
         (hide
            {!=
               [widget_type]
               kTextWidget}))
      (max_text_instances
         int
         (hide
            {!=
               [widget_type]
               kTextWidget}))
      (text_color
         color
         (hide
            {!=
               [widget_type]
               kTextWidget})
         (help
            "Primary color for text instances"))
      (alt_text_color
         color
         (hide
            {!=
               [widget_type]
               kTextWidget})
         (help
            "Secondary color for text instances"))
      (allow_line_rotation
         bool
         (hide
            {!=
               [widget_type]
               kTextWidget})
         (help
            "Individual lines can have different rotations"))
      (mat
         object
         (class Mat)
         (hide
            {!=
               [widget_type]
               kMatWidget}))))