#define DX_ALL_BOTS_ENABLED
(
   {&& 
      $dx_bot_1
      {&&
         {&&
            $dx_bot_2
            $dx_bot_3
         }
         {&&
            $dx_bot_4
            $dx_bot_5
         }
      }
   }
)
#define DX_AUTOPLAYER_HANDLER
(
   {if_else {|| {modifier_mgr is_modifier_active mod_auto_play} $otherautoplay}
      {do
         {dx_log_writer FALSE {sprint "Setting Autoplayers - 1: " $dx_bot_1 " - 2: " $dx_bot_2 " - 3: " $dx_bot_3 " - 4: " $dx_bot_4 " - 5: " $dx_bot_5}}
         {if {>= {beatmatch num_active_players} 1}
            {{beatmatch active_player 0} set_auto_play $dx_bot_1}
         }
         {if {>= {beatmatch num_active_players} 2}
            {{beatmatch active_player 1} set_auto_play $dx_bot_2}
         }
         {if {>= {beatmatch num_active_players} 3}
            {{beatmatch active_player 2} set_auto_play $dx_bot_3}
         }
         {if {>= {beatmatch num_active_players} 4}
            {{beatmatch active_player 3} set_auto_play $dx_bot_4}
         }
         {if {>= {beatmatch num_active_players} 5}
            {{beatmatch active_player 4} set_auto_play $dx_bot_5}
         }
      }
      {do
         {beatmatch foreach_active_player $player
            {$player set_auto_play 0}
         }
      }
   }
)
#define DX_BOT_OVERDRIVE_HANDLER
(
   ;runs in beatmatcher, do not add log
   {if {&& {== $dx_bot_overdrive dx_on} {! DX_ALL_BOTS_ENABLED}}
      {do
         {set $dx_tmp FALSE}
         {beatmatch foreach_active_player $player
            {if {$player is_deploying} {set $dx_tmp TRUE}}
         }
         {if {&& {>= {beatmatch num_active_players} 1} $dx_bot_1}
            {set $player {beatmatch active_player 0}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 2} $dx_bot_2}
            {set $player {beatmatch active_player 1}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 3} $dx_bot_3}
            {set $player {beatmatch active_player 2}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 4} $dx_bot_4}
            {set $player {beatmatch active_player 3}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 5} $dx_bot_5}
            {set $player {beatmatch active_player 4}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
      }
   }
)
#define DX_BOT_OVERDRIVE_DEPLETION_HANDLER
(
   ; this is likely the single dumbest thing in the whole codebase
   ;runs in beatmatcher, do not add log
   {if {== $dx_bot_overdrive dx_drain}
      {beatmatch foreach_active_player $player {$player empty_band_energy}}
   }
)
#define DX_DRUM_OD_DEPLOY_HANDLER
(
   ;runs in beatmatcher, do not add log
   {if_else {&& {== $dx_bot_overdrive dx_on} {&& {modifier_mgr is_modifier_active mod_auto_play} DX_ALL_BOTS_ENABLED}}
      {beatmatch foreach_active_player $player {unless {mod $measure 4} {$player deploy_if_possible}}}
      {if {modifier_mgr is_modifier_active mod_static_fills}
         {beatmatch foreach_active_player $player
            {if {== {$player instrument} drum}
               {$player deploy_if_possible}
            }
         }
      }
   }
)
#define DX_VENUE_SETTER
(
   {dx_log_writer FALSE {sprint "Setting Venue - Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {if
      {&&
         {||
            {gamemode in_mode defaults} {gamemode in_mode qp_party_shuffle}
            {gamemode in_mode qp_coop} {gamemode in_mode party_shuffle}
            {gamemode in_mode practice} {gamemode in_mode qp_practice}
         }
         {session_mgr is_leader_local} ;set venue only if host of the lobby
      }
      {if_else {== $force TRUE}
         {switch $venue
            (small_venues {do {gamecfg set_venue {random_elem (SMALL_VENUES)}} {meta_performer set_venue {random_elem (SMALL_VENUES)}}})
            (big_venues {do {gamecfg set_venue {random_elem (BIG_VENUES)}} {meta_performer set_venue {random_elem (BIG_VENUES)}}})
            (arena_venues {do {gamecfg set_venue {random_elem (ARENA_VENUES)}} {meta_performer set_venue {random_elem (ARENA_VENUES)}}})
            (festival_venues {do {gamecfg set_venue {random_elem (FESTIVAL_VENUES)}} {meta_performer set_venue {random_elem (FESTIVAL_VENUES)}}})
            (venues_video {do {gamecfg set_venue {random_elem (VENUES_VIDEO)}} {meta_performer set_venue {random_elem (VENUES_VIDEO)}}})
            (random
               {if_else {! {modifier_mgr is_modifier_active mod_nomv}}
                   {do
                      {gamecfg set_venue {random_elem (ALL_VENUES)}}
                      {meta_performer set_venue {random_elem (ALL_VENUES)}}
                   }
                   {do
                      {gamecfg set_venue {random_elem (VENUES)}}
                      {meta_performer set_venue {random_elem (VENUES)}}
                   }
               }
            )
            {do {gamecfg set_venue $venue} {meta_performer set_venue $venue}}
         }
         {if_else {modifier_mgr is_modifier_active mod_nomv}
            {do
               {gamecfg set_venue {random_elem (VENUES)}}
               {meta_performer set_venue {random_elem (VENUES)}}
            }
            {do
               {gamecfg set_venue {random_elem (ALL_VENUES)}}
               {meta_performer set_venue {random_elem (ALL_VENUES)}}
            }
         }
      }
      {dx_log_writer FALSE {sprint "Venue set to " $venue " - Forced: " $force}}
   }
)
#define DX_SWAP_VENUE_MID_SETLIST
(
   {if {modifier_mgr is_modifier_active mod_venue_swap}
      DX_VENUE_SETTER
      {prefab_mgr assign_prefabs_to_slots}
      {char_sync update_char_cache}
   }
)
#define DX_SWAP_CHAR_MID_SETLIST
(
   {if
      {&&
         {||
            {gamemode in_mode defaults} {gamemode in_mode qp_party_shuffle}
            {gamemode in_mode qp_coop} {gamemode in_mode party_shuffle}
            {gamemode in_mode practice} {gamemode in_mode qp_practice}
         }
         {session_mgr is_leader_local} ;set venue only if host of the lobby
      }
      {if {modifier_mgr is_modifier_active mod_char_swap}
         {prefab_mgr assign_prefabs_to_slots}
         {char_sync update_char_cache}
      }
   }
)
#define DX_GAMEMODE_CHECKER
(
   {if_else {exists gamemode}
      {do
         {if {gamemode in_mode init} {set $dx_gamemode init}}
         {if {gamemode in_mode campaign} {set $dx_gamemode campaign}}
         {if {gamemode in_mode defaults} {set $dx_gamemode defaults}}
         {if {gamemode in_mode tour} {set $dx_gamemode tour}}
         {if {gamemode in_mode qp_career_songinfo} {set $dx_gamemode qp_career_songinfo}}
         {if {gamemode in_mode qp_party_shuffle} {set $dx_gamemode qp_party_shuffle}}
         {if {gamemode in_mode practice} {set $dx_gamemode practice}}
         {if {gamemode in_mode qp_coop} {set $dx_gamemode qp_coop}}
         {if {gamemode in_mode party_shuffle} {set $dx_gamemode party_shuffle}}
         {if {gamemode in_mode qp_practice} {set $dx_gamemode qp_practice}}
         {if {gamemode in_mode pro_song_lessons_keyboard} {set $dx_gamemode pro_song_lessons_keyboard}}
         {if {gamemode in_mode pro_song_lessons_real_guitar} {set $dx_gamemode pro_song_lessons_real_guitar}}
         {if {gamemode in_mode pro_song_lessons_real_bass} {set $dx_gamemode pro_song_lessons_real_bass}}
         {if {gamemode in_mode drum_freestyle} {set $dx_gamemode drum_freestyle}}
         {if {gamemode in_mode trainer_drums} {set $dx_gamemode trainer_drums}}
         {if {gamemode in_mode trainer_pro_drums} {set $dx_gamemode trainer_pro_drums}}
         {if {gamemode in_mode trainer_real_guitar} {set $dx_gamemode trainer_real_guitar}}
         {if {gamemode in_mode trainer_pro_keyboard} {set $dx_gamemode trainer_pro_keyboard}}
         {if {gamemode in_mode trainer} {set $dx_gamemode trainer}}
         #ifdef HX_XBOX {if {gamemode in_mode audition} {set $dx_gamemode audition}} #endif
      }
      {set $dx_gamemode none}
   }
)
#define DX_LEADER_SPEED_SETTER
(
   {if {is_leader_local} ; dx - sync speeds only if currently the lobby leader
      ;{dx_log_writer FALSE {sprint "Sending Leader Speed to peers, Leaderspeed: " $leaderspeed " - Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
      DX_DISCONNECT
      {set $speedmod $leaderspeed}
      {set $speedmod_top $leaderspeed}
      {session send_msg_to_all {'`' (set $speedmod  {',' $leaderspeed}) kNetReliable}}
   }
)
#define DX_SET_SPEEDS
(
   {if {exists gamemode}
      ;{dx_log_writer FALSE {sprint "Setting up song speeds. Song Speed: " $speedmod}} ;runs in beatmatcher, do not enable under penalty of stutter
      {unless
         {|| ;check for a variety of game modes where song speed is not allowed to be adjusted
            {gamemode in_mode pro_song_lessons_keyboard} {gamemode in_mode pro_song_lessons_real_guitar}
            {gamemode in_mode pro_song_lessons_real_bass} {gamemode in_mode drum_freestyle}
            {gamemode in_mode trainer} {gamemode in_mode trainer_drums} {gamemode in_mode trainer_pro_drums}
            {gamemode in_mode trainer_real_guitar} {gamemode in_mode trainer_pro_keyboard}
            #ifdef HX_XBOX {gamemode in_mode audition} #endif ;audition is xbox only, ps3 will crash if you check for it
            {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}} ;if we are in practice and selected something other than 100% speed
         }
         {if {is_leader_local} {session send_msg_to_all {` (beatmatch set_music_speed {, $speedmod}) kNetReliable}}}
         {beatmatch set_music_speed $speedmod} ;apply the current selected speed in game
      }
      {if {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}} ;if we are in practice and selected something other than 100% speed
         {practice_panel update_speed {gamecfg get practice_speed}}
      }
   }
)
#define DX_TRACKSPEED_HANDLER
(
   (easy {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 2.4} $trackspeed} $speedmod})
   (medium {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 2.0} $trackspeed} $speedmod})
   (hard {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 1.6} $trackspeed} $speedmod})
   (expert {* {'/' 1.2 $trackspeed} $speedmod})
)
#define DX_PLAYER_SINKS
(
   {$player add_sink fc_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)}
   {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
         {switch {$player instrument}
            (bass {$player add_sink fc_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_guitar {$player add_sink fc_real_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_bass {$player add_sink fc_real_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (keys {$player add_sink fc_keys_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_keys {$player add_sink fc_real_keys_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (guitar {$player add_sink fc_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (drum {$player add_sink fc_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_drum {$player add_sink fc_real_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
         }
      }
   {$player add_sink dx_streak_callback (hit miss pass fetch_all_streaks update_streak)} ;add the streak counter callback to each player
)
#define ACTIVE_PLAYER_RESET_HANDLER
(
   {set $dx_num_active_instruments 0}
   {set $bassplayeractive false}
   {set $vocalsplayeractive false}
   {set $real_guitarplayeractive false}
   {set $real_bassplayeractive false}
   {set $keysplayeractive false}
   {set $real_keysplayeractive false}
   {set $guitarplayeractive false}
   {set $drumplayeractive false}
   {set $drumplayeractive false}
   {set $dx_active_vocals FALSE}
)
#define DX_CHECK_ACTIVE_PLAYERS
(
   {do
      {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
         {switch {$player instrument}
            (bass {do {set $bassplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (real_guitar {do {set $real_guitarplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (real_bass {do {set $real_bassplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (keys {do {set $keysplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (real_keys {do {set $real_keysplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (guitar {do {set $guitarplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (drum {do {set $drumplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (real_drum {do {set $drumplayeractive true} {set $dx_num_active_instruments {+ $dx_num_active_instruments 1}}})
            (vocals {set $vocalsplayeractive true} {set $dx_active_vocals TRUE})
         }
      }
   }
)
#define DX_ADD_SINKS
(
   {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
      {switch {$player instrument}
         (bass {do {set $bassplayeractive true} DX_PLAYER_SINKS})
         (real_guitar {do {set $real_guitarplayeractive true} DX_PLAYER_SINKS})
         (real_bass {do {set $real_bassplayeractive true} DX_PLAYER_SINKS})
         (keys {do {set $keysplayeractive true} DX_PLAYER_SINKS})
         (real_keys {do {set $real_keysplayeractive true} DX_PLAYER_SINKS})
         (guitar {do {set $guitarplayeractive true} DX_PLAYER_SINKS})
         (drum {do {set $drumplayeractive true} DX_PLAYER_SINKS})
         (real_drum {do {set $drumplayeractive true} DX_PLAYER_SINKS})
         (vocals {set $vocalsplayeractive true} {set $dx_active_vocals TRUE})
      }
   }
)
#define DX_GAME_RESET_HANDLER
(
   ;{dx_log_writer FALSE {sprint "Clearing Song Variables" " - Current Screen: " {ui current_screen}}} ;stutters at song end, dont enable unless you really mean it
   ;clears out the variables used for song information, sinks, and callbacks to be populated again
   {set $guitar_milosong FALSE}
   {set $bass_milosong FALSE}
   {set $real_guitar_milosong FALSE}
   {set $real_drum_milosong FALSE}
   {set $real_bass_milosong FALSE}
   {set $keys_milosong FALSE}
   {set $real_keys_milosong FALSE}
   {set $drum_milosong FALSE}
   ;callbacks
   {set $real_guitar_caughtmissed FALSE}
   {set $real_bass_caughtmissed FALSE}
   {set $real_drum_caughtmissed FALSE}
   {set $real_keys_caughtmissed FALSE}
   {set $keys_caughtmissed FALSE}
   {set $guitar_caughtmissed FALSE}
   {set $bass_caughtmissed FALSE}
   {set $drum_caughtmissed FALSE}
   ;callbacks
   {set $bass_firstnote FALSE}
   {set $guitar_firstnote FALSE}
   {set $real_bass_firstnote FALSE}
   {set $real_drum_firstnote FALSE}
   {set $real_guitar_firstnote FALSE}
   {set $keys_firstnote FALSE}
   {set $real_keys_firstnote FALSE}
   {set $drum_firstnote FALSE}
   ;callbacks
   {set $bass_groove_active FALSE}
   {set $drum_groove_active FALSE}
   {set $guitar_groove_active FALSE}
   ;callbacks
   {set $guitar_missed_once FALSE}
   {set $real_guitar_missed_once FALSE}
   {set $bass_missed_once FALSE}
   {set $real_bass_missed_once FALSE}
   {set $drum_missed_once FALSE}
   {set $real_drum_missed_once FALSE}
   {set $keys_missed_once FALSE}
   {set $real_keys_missed_once FALSE}
   ;callbacks
   {set $num_gems_combo_bass 0} ;clear all the streak vars
   {set $num_gems_combo_real_guitar 0}
   {set $num_gems_combo_real_bass 0}
   {set $num_gems_combo_keys 0}
   {set $num_gems_combo_real_keys 0}
   {set $num_gems_combo_guitar 0}
   {set $num_gems_combo_drum 0}
   {set $num_gems_combo_real_drum 0}
   ;endgame sound effects
   {set $dx_someone_fcd FALSE}
   {set $dx_someone_niced FALSE}
   {set $dx_someone_jurgend FALSE}
)
#define ONLY_RESET_CURRENT_BEAT_STUFF
(
   {set $current_beat 0}
   {set $startingbpm FALSE}
   {set $dx_bpm_counter_for_countdown FALSE}
   {set $solo_box_up_0 FALSE}
   {set $solo_box_up_1 FALSE}
   {set $solo_box_up_2 FALSE}
   {set $solo_box_up_3 FALSE}
   {set $solo_box_up_vocals FALSE}
   {set $delay_tracked_0 FALSE}
   {set $delay_tracked_1 FALSE}
   {set $delay_tracked_2 FALSE}
   {set $delay_tracked_3 FALSE}
   {set $delay_tracked_vocals FALSE}
   {set $current_tracked_beat_0 0}
   {set $current_tracked_beat_1 0}
   {set $current_tracked_beat_2 0}
   {set $current_tracked_beat_3 0}
   {set $current_tracked_beat_vocals 0}

   {set $tracked_beat_no_notes_start_guitar 0}
   {set $tracked_beat_no_notes_end_guitar 0}
   {set $first_guitar_gem_tracked FALSE}

   {set $tracked_beat_no_notes_start_bass 0}
   {set $tracked_beat_no_notes_end_bass 0}
   {set $first_bass_gem_tracked FALSE}

   {set $tracked_beat_no_notes_start_drum 0}
   {set $tracked_beat_no_notes_end_drum 0}
   {set $first_drum_gem_tracked FALSE}

   {set $tracked_beat_no_notes_start_keys 0}
   {set $tracked_beat_no_notes_end_keys 0}
   {set $first_keys_gem_tracked FALSE}

   {set $tracked_beat_no_notes_start_vocals 0}
   {set $tracked_beat_no_notes_end_vocals 0}
   {set $first_vocals_gem_tracked FALSE}
)
#define RESET_MIDI_COUNTDOWN_TRACKING
(
   {set $guitar_note_tracker ()}
   {resize $guitar_note_tracker 0} ;resize the array
   {push_back $guitar_note_tracker (none none)} ;push_back a new state into the array

   {set $drum_note_tracker ()}
   {resize $drum_note_tracker 0} ;resize the array
   {push_back $drum_note_tracker (none none)} ;push_back a new state into the array

   {set $bass_note_tracker ()}
   {resize $bass_note_tracker 0} ;resize the array
   {push_back $bass_note_tracker (none none)} ;push_back a new state into the array

   {set $keys_note_tracker ()}
   {resize $keys_note_tracker 0} ;resize the array
   {push_back $keys_note_tracker (none none)} ;push_back a new state into the array

   {set $vocals_note_tracker ()}
   {resize $vocals_note_tracker 0} ;resize the array
   {push_back $vocals_note_tracker (none none)} ;push_back a new state into the array
   {set $dx_final_note 0}
)
#define GAME_EXIT_RESET_HANDLER
(
   ONLY_RESET_CURRENT_BEAT_STUFF
   RESET_MIDI_COUNTDOWN_TRACKING
)
#define DX_MTV_RESET_HANDLER
(
   ;{dx_log_writer FALSE {sprint "Clearing MTV Variables - Current Screen: " {ui current_screen}}} ;stutters at song end, dont enable unless you really mean it
   ;mtv
   {set $song_title FALSE}
   {set $authorvar FALSE}
   {set $stringsauthorvar FALSE}
   {set $keysauthorvar FALSE}
   {set $namevar FALSE}
   {set $artistvar FALSE}
   {set $yearvar FALSE}
   {set $albumvar FALSE}
   {set $dx_readdtaonce FALSE}
   {set $dx_mtv_dta_reader_once FALSE}
   {set $dx_mtv_formatted_once FALSE}
   {set $dx_mtv_written_once FALSE}
   {set $dx_mtv_read_once FALSE}
   {set $dx_hmxcheckedonce FALSE}
   {set $dx_author_finder_failed FALSE}
   {set $dx_path_failed FALSE}
   {set $rankvar 0}
   {set $mastervar TRUE}
   {set $guitarrankvar -1}
   {set $drumrankvar -1}
   {set $bassrankvar -1}
   {set $vocalsrankvar -1}
   {set $keysrankvar -1}
   {set $real_guitarrankvar -1}
   {set $real_bassrankvar -1}
   {set $real_keysrankvar -1}
   {set $bandrankvar -1}
   {set $actual_guitarrankvar -1}
   {set $actual_drumrankvar -1}
   {set $actual_bassrankvar -1}
   {set $actual_vocalsrankvar -1}
   {set $actual_keysrankvar -1}
   {set $actual_real_guitarrankvar -1}
   {set $actual_real_bassrankvar -1}
   {set $actual_real_keysrankvar -1}
   {set $actual_bandrankvar -1}
)
#define DX_TEXTURE_RESET_HANDLER
(
   ;{dx_log_writer FALSE {sprint "Resetting Custom Textures to Default - Current Screen: " {ui current_screen}}}
   {if {== $dx_smasher rb3} {set $dx_smasher none}}

   {if {== $dx_gem rb3} {set $dx_gem none}}

   {if {== $dx_crowd_meter rb3} {set $dx_crowd_meter none}}

   {if {== $dx_multiplier_ring rb3} {set $dx_multiplier_ring none}}

   {if {== $dx_overdrive_bar rb3} {set $dx_overdrive_bar none}}

   {if {== $dx_rails rb3} {set $dx_rails none}}

   {if {== $dx_lanes rb3} {set $dx_lanes none}}

   {if {== $dx_score_box rb3} {set $dx_score_box none}}

   {if {== $dx_stars rb3} {set $dx_stars none}}

   {if {== $dx_font rb3} {set $dx_font none}}

   {if {== $dx_flames rb3} {set $dx_flames none}}

   {if {== $dx_vocal_arrow rb3} {set $dx_vocal_arrow none}}

   {if {== $dx_vocal_highway rb3} {set $dx_vocal_highway none}}
   
   {if {== $dx_vocal_notes rb3} {set $dx_vocal_notes none}}
   
   {if {== $dx_vocal_overdrive rb3} {set $dx_vocal_overdrive none}}

   {if {== $dx_keyboard original} {set $dx_keyboard none}}

   {if {== $dx_highway_guitar _rb3_guitar} {set $dx_highway_guitar none}}
   {if {== $dx_highway_bass _rb3_bass} {set $dx_highway_bass none}}
   {if {== $dx_highway_drum _rb3_drum} {set $dx_highway_drum none}}
   {if {== $dx_highway_keys _rb3_keys} {set $dx_highway_keys none}}

   {if {== $dx_streak_guitar _spotlight_bass_track} {set $dx_streak_guitar none}}
   {if {== $dx_streak_bass _spotlight_bass_track} {set $dx_streak_bass none}}
   {if {== $dx_streak_drum _spotlight_drums_track} {set $dx_streak_drum none}}
   {if {== $dx_streak_prokeys _spotlight_prokeys_track} {set $dx_streak_prokeys none}}
   {if {== $dx_streak_keys _spotlight_keys_track} {set $dx_streak_keys none}}

   {if {== $dx_overdrive_guitar rb3_guitar} {set $dx_overdrive_guitar none}}
   {if {== $dx_overdrive_bass rb3_bass} {set $dx_overdrive_bass none}}
   {if {== $dx_overdrive_drum rb3_drums} {set $dx_overdrive_drum none}}
   {if {== $dx_overdrive_keys rb3_keys} {set $dx_overdrive_keys none}}

)
#define DX_OVERDRIVE_COLOR_RESET_HANDLER
(
	{unless {== $dx_overdrive_r 0.71} {set $dx_overdrive_color_needs_reset TRUE}}
	{unless {== $dx_overdrive_g 0.54} {set $dx_overdrive_color_needs_reset TRUE}}
	{unless {== $dx_overdrive_b 0.0} {set $dx_overdrive_color_needs_reset TRUE}}
)
#define DX_ANGLE_RESET_HANDLER
(
   {if {== $dx_multiangle 1} {set $dx_use_multiangle FALSE}}
)
#define DX_TRACK_PANEL_HANDLES
(
   (dx_set_scoreboard_pos
      {{{coop_track_panel find scoreboard} find scoreboard.grp} set_local_pos $scoreboardpos_0 $scoreboardpos_1 $scoreboardpos_2}
   )
   (dx_set_star_display_pos
      {unless {&& {! $star_displaypos_0} {! $star_displaypos_1} {! $star_displaypos_2}}
         {{{{coop_track_panel find scoreboard} find star_display} find stars.grp} set_local_pos $star_displaypos_0 $star_displaypos_1 $star_displaypos_2}
      }
   )
   (dx_set_solo_box_pos
      {unless {&& {! $solo_boxpos_0} {! $solo_boxpos_1} {! $solo_boxpos_2}}
         {beatmatch foreach_active_player $player
            {switch {{$player get_user} get_slot_num}
               (0
                  {{{{find_obj {{get_track_panel} loaded_dir} track_0} find player_feedback} find feedback.grp} set_local_pos $solo_boxpos_0 $solo_boxpos_1 $solo_boxpos_2}
               )
               (1
                  {{{{find_obj {{get_track_panel} loaded_dir} track_1} find player_feedback} find feedback.grp} set_local_pos $solo_boxpos_0 $solo_boxpos_1 $solo_boxpos_2}
               )
               (2
                  {{{{find_obj {{get_track_panel} loaded_dir} track_2} find player_feedback} find feedback.grp} set_local_pos $solo_boxpos_0 $solo_boxpos_1 $solo_boxpos_2}
               )
               (3
                  {{{{find_obj {{get_track_panel} loaded_dir} track_3} find player_feedback} find feedback.grp} set_local_pos $solo_boxpos_0 $solo_boxpos_1 $solo_boxpos_2}
               )
            }
         }
      }
   )
   (dx_force_remote_vox
      {if_else {session_mgr is_local}
         {beatmatch foreach_active_player $player
            {if {== {$player instrument} vocals}
               {{{find_obj {{get_track_panel} loaded_dir} vocals} get vox_configuration} set remote $dx_force_remote_vox}
               {{{{get_track_panel} find vocals} find tubes.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find tubes_milo.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find tube_range.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find pitched_effect01.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find pitched_effect02.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find pitch_mid_marker.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find phoneme0.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find phoneme1.grp} set_showing {! $dx_force_remote_vox}}
               {{{{get_track_panel} find vocals} find phoneme2.grp} set_showing {! $dx_force_remote_vox}}
               {{{find_obj {{get_track_panel} loaded_dir} vocals} get vox_configuration} milo_apply}
            }
         }
         ; allows 2+ vocalists in an online session to view the pitch window
         {beatmatch foreach_active_player $player
            {if {&& {== {$player instrument} vocals} {{$player get_user} is_local}}
               {{{find_obj {{get_track_panel} loaded_dir} vocals} get vox_configuration} set remote FALSE}
               {{{{get_track_panel} find vocals} find tubes.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find tubes_milo.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find tube_range.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find pitched_effect01.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find pitched_effect02.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find pitch_mid_marker.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find phoneme0.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find phoneme1.grp} set_showing TRUE}
               {{{{get_track_panel} find vocals} find phoneme2.grp} set_showing TRUE}
               {{{find_obj {{get_track_panel} loaded_dir} vocals} get vox_configuration} milo_apply}
            }
         }
      }
   )
)