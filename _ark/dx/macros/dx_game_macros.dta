#define DX_GEMCOLOR_SET
(green red yellow blue orange)
#define DX_DRUMCOLOR_SET
(red yellow blue green)
#define NORMALGEM_SET
(gem_green.wid gem_red.wid gem_yellow.wid gem_blue.wid gem_orange.wid star_gem.wid)
#define HOPOGEM_SET
(gem_green_hopo.wid gem_red_hopo.wid gem_yellow_hopo.wid gem_blue_hopo.wid gem_orange_hopo.wid star_hopo.wid)
#define KICK_SET
(gem_kick.wid star_kick.wid)
#define DRUMGEM_SET
(drum_red.wid drum_yellow.wid drum_blue.wid drum_green.wid drum_star.wid)
#define CYM_SET
(cymbal_gem_red.wid cymbal_gem_yellow.wid cymbal_gem_blue.wid cymbal_gem_green.wid cymbal_gem_star.wid)
#define COLOR_SHUFFLE_SLOT_0
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot0_color
   }
)
#define COLOR_SHUFFLE_SLOT_1
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot1_color
   }
)
#define COLOR_SHUFFLE_SLOT_2
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot2_color
   }
)
#define COLOR_SHUFFLE_SLOT_3
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot3_color
   }
)
#define COLOR_SHUFFLE_SLOT_4
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot4_color
   }
)
#define COLOR_SHUFFLE_SLOT_5
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot5_color
   }
)
#define DRUMGEM_SLOT1
(
   {elem (DRUMGEM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $drum1_color
      }
   }
)
#define DRUMGEM_SLOT2
(
   {elem (DRUMGEM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $drum2_color
      }
   }
)
#define DRUMGEM_SLOT3
(
   {elem (DRUMGEM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $drum3_color
      }
   }
)
#define DRUMGEM_SLOT4
(
   {elem (DRUMGEM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $drum4_color
      }
   }
)
#define CYMGEM_SLOT1
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym1_color
      }
   }
)
#define CYMGEM_SLOT2
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym2_color
      }
   }
)
#define CYMGEM_SLOT3
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym3_color
      }
   }
)
#define CYMGEM_SLOT4
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym4_color
      }
   }
)
#define KICKGEM_SLOT
(
   {elem
      (KICK_SET)
      $kick_color
   }
)
#define DX_SLOT_COLORS
(
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus1_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus2_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus3_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus4_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus5_color
      }
   }
)
#define DX_SMASHER_COLOR_SETTER
(
   {unless [real_guitar]
      {if_else [is_drum]
         {do
            {gem_smasher1 set_color
               {if_else [lefty]
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher4_color}
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher1_color}
               }
            }
            {gem_smasher2 set_color
               {if_else [lefty]
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher3_color}
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher2_color}
               }
            }
            {gem_smasher3 set_color
               {if_else [lefty]
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher2_color}
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher3_color}
               }
            }
            {gem_smasher4 set_color
               {if_else [lefty]
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher1_color}
                  {elem (DX_DRUMCOLOR_SET) $dx_smasher4_color}
               }
            }
         }
         {do
            {gem_smasher0 set_color {elem (DX_GEMCOLOR_SET) $dx_fret1_color}}
            {gem_smasher1 set_color {elem (DX_GEMCOLOR_SET) $dx_fret2_color}}
            {gem_smasher2 set_color {elem (DX_GEMCOLOR_SET) $dx_fret3_color}}
            {gem_smasher3 set_color {elem (DX_GEMCOLOR_SET) $dx_fret4_color}}
            {gem_smasher4 set_color {elem (DX_GEMCOLOR_SET) $dx_fret5_color}}
         }
      }
   }
)
#define DX_ALL_BOTS_ENABLED
(
   {&& 
      $dx_bot_1
      {&&
         {&&
            $dx_bot_2
            $dx_bot_3
         }
         {&&
            $dx_bot_4
            $dx_bot_5
         }
      }
   }
)
#define DX_AUTOPLAYER_HANDLER
(
   {if_else {modifier_mgr is_modifier_active mod_auto_play}
      {do
         {if {>= {beatmatch num_active_players} 1}
            {{beatmatch active_player 0} set_auto_play $dx_bot_1}
         }
         {if {>= {beatmatch num_active_players} 2}
            {{beatmatch active_player 1} set_auto_play $dx_bot_2}
         }
         {if {>= {beatmatch num_active_players} 3}
            {{beatmatch active_player 2} set_auto_play $dx_bot_3}
         }
         {if {>= {beatmatch num_active_players} 4}
            {{beatmatch active_player 3} set_auto_play $dx_bot_4}
         }
         {if {>= {beatmatch num_active_players} 5}
            {{beatmatch active_player 4} set_auto_play $dx_bot_5}
         }
      }
      {do
         {beatmatch foreach_active_player $player
            {$player set_auto_play 0}
         }
      }
   }
)
#define DX_BOT_OVERDRIVE_HANDLER
(
   {if {&& $dx_bot_overdrive {! DX_ALL_BOTS_ENABLED}}
      {do
         {set $dx_tmp FALSE}
         {beatmatch foreach_active_player $player
            {if {$player is_deploying} {set $dx_tmp TRUE}}
         }
         {if {&& {>= {beatmatch num_active_players} 1} $dx_bot_1}
            {set $player {beatmatch active_player 0}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 2} $dx_bot_2}
            {set $player {beatmatch active_player 1}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 3} $dx_bot_3}
            {set $player {beatmatch active_player 2}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 4} $dx_bot_4}
            {set $player {beatmatch active_player 3}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
         {if {&& {>= {beatmatch num_active_players} 5} $dx_bot_5}
            {set $player {beatmatch active_player 4}}
            {if $dx_tmp {$player deploy_if_possible}}
            {if {>= {$player band_energy} 1} {$player deploy_if_possible}}
         }
      }
   }
)
#define DX_BOT_OVERDRIVE_DEPLETION_HANDLER
(
   ; this is likely the single dumbest thing in the whole codebase
   {if {! $dx_bot_overdrive}
      {beatmatch foreach_active_player $player {$player empty_band_energy}}
   }
)
#define DX_DRUM_OD_DEPLOY_HANDLER
(
   {if_else {&& $dx_bot_overdrive {&& {modifier_mgr is_modifier_active mod_auto_play} DX_ALL_BOTS_ENABLED}}
      {beatmatch foreach_active_player $player {unless {mod $measure 4} {$player deploy_if_possible}}}
      {if {modifier_mgr is_modifier_active mod_static_fills}
         {beatmatch foreach_active_player $player
            {if {== {$player instrument} drum}
               {$player deploy_if_possible}
            }
         }
      }
   }
)
#define DX_VENUE_SETTER
(
   {unless
      {'||'
         {gamemode in_mode campaign}
         {gamemode in_mode tour}
      }
      {if_else {== $force TRUE} ;prioritizes a forced venue over the no music video modifier
         {if_else {== $venue small_venues}
            {do
               {gamecfg set_venue {random_elem (SMALL_VENUES)}}
               {meta_performer set_venue {random_elem (SMALL_VENUES)}}
            }
            {if_else {== $venue big_venues}
               {do
                  {gamecfg set_venue {random_elem (BIG_VENUES)}}
                  {meta_performer set_venue {random_elem (BIG_VENUES)}}
               }
               {if_else {== $venue arena_venues}
                  {do
                     {gamecfg set_venue {random_elem (ARENA_VENUES)}}
                     {meta_performer set_venue {random_elem (ARENA_VENUES)}}
                  }
                  {if_else {== $venue festival_venues}
                     {do
                        {gamecfg set_venue {random_elem (FESTIVAL_VENUES)}}
                        {meta_performer set_venue {random_elem (FESTIVAL_VENUES)}}
                     }
                     {if_else {== $venue venues_video}
                        {do
                           {gamecfg set_venue {random_elem (VENUES_VIDEO)}}
                           {meta_performer set_venue {random_elem (VENUES_VIDEO)}}
                        }
                        {if_else {&& {== $venue random} {! {modifier_mgr is_modifier_active mod_nomv}}}
                           {do
                              {gamecfg set_venue {random_elem (ALL_VENUES)}}
                              {meta_performer set_venue {random_elem (ALL_VENUES)}}
                           }
                           {if_else {&& {== $venue random} {modifier_mgr is_modifier_active mod_nomv} {session_mgr is_leader_local}}
                              {do
                                 {gamecfg set_venue {random_elem (VENUES)}}
                                 {meta_performer set_venue {random_elem (VENUES)}}
                              }
                              {do
                                 {gamecfg set_venue $venue}
                                 {meta_performer set_venue $venue}
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         {if_else {&& {modifier_mgr is_modifier_active mod_nomv} {session_mgr is_leader_local}}
            {do
               {gamecfg set_venue {random_elem (VENUES)}}
               {meta_performer set_venue {random_elem (VENUES)}}
            }
            {do
               {gamecfg set_venue {random_elem (ALL_VENUES)}}
               {meta_performer set_venue {random_elem (ALL_VENUES)}}
            }
         }
      }
   }
)
#define DX_LEADER_SPEED_SETTER
(
   {if {is_leader_local} ; dx - sync speeds only if currently the lobby leader
      {set $speedmod $leaderspeed}
      {set $speedmod_top $leaderspeed}
      {session send_msg_to_all {'`' (set $speedmod  {',' $leaderspeed}) kNetReliable}}
   }
)
#define DX_SET_SPEEDS
(
   {if {exists gamemode}
      {unless
         {|| ;check for a variety of game modes where song speed is not allowed to be adjusted
            {gamemode in_mode pro_song_lessons_keyboard} {gamemode in_mode pro_song_lessons_real_guitar}
            {gamemode in_mode pro_song_lessons_real_bass} {gamemode in_mode drum_freestyle}
            {gamemode in_mode trainer} {gamemode in_mode trainer_drums} {gamemode in_mode trainer_pro_drums}
            {gamemode in_mode trainer_real_guitar} {gamemode in_mode trainer_pro_keyboard}
            #ifdef HX_XBOX {gamemode in_mode audition} #endif ;audition is xbox only, ps3 will crash if you check for it
            {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}} ;if we are in practice and selected something other than 100% speed
         }
         {if {is_leader_local} {session send_msg_to_all {` (beatmatch set_music_speed {, $speedmod}) kNetReliable}}}
         {beatmatch set_music_speed $speedmod} ;apply the current selected speed in game
      }
      {if {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}} ;if we are in practice and selected something other than 100% speed
         {practice_panel update_speed {gamecfg get practice_speed}}
      }
   }
)
#define DX_TRACKSPEED_HANDLER
(
   (easy {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 2.4} $trackspeed} $speedmod})
   (medium {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 2.0} $trackspeed} $speedmod})
   (hard {* {'/' {if_else {modifier_mgr is_modifier_active mod_synced_track_speeds} 1.2 1.6} $trackspeed} $speedmod})
   (expert {* {'/' 1.2 $trackspeed} $speedmod})
)
#define DX_PLAYER_SINKS
(
   {$player add_sink fc_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)}
)
#define DX_ADD_SINKS
(
   {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
      {switch {$player instrument}
         (bass DX_PLAYER_SINKS)
         (real_guitar DX_PLAYER_SINKS)
         (real_bass DX_PLAYER_SINKS)
         (keys DX_PLAYER_SINKS)
         (real_keys DX_PLAYER_SINKS)
         (guitar DX_PLAYER_SINKS)
         (drum DX_PLAYER_SINKS)
         (real_drum DX_PLAYER_SINKS)
      }
   }
)
#define DX_GAME_RESET_HANDLER
(
   ;clears out the variables used for song information, sinks, and callbacks to be populated again
   {set $guitar_milosong FALSE}
   {set $bass_milosong FALSE}
   {set $real_guitar_milosong FALSE}
   {set $real_drum_milosong FALSE}
   {set $real_bass_milosong FALSE}
   {set $keys_milosong FALSE}
   {set $real_keys_milosong FALSE}
   {set $drum_milosong FALSE}
   ;callbacks
   {set $real_guitar_caughtmissed FALSE}
   {set $real_bass_caughtmissed FALSE}
   {set $real_drum_caughtmissed FALSE}
   {set $real_keys_caughtmissed FALSE}
   {set $keys_caughtmissed FALSE}
   {set $guitar_caughtmissed FALSE}
   {set $bass_caughtmissed FALSE}
   {set $drum_caughtmissed FALSE}
   ;callbacks
   {set $bass_firstnote FALSE}
   {set $guitar_firstnote FALSE}
   {set $real_bass_firstnote FALSE}
   {set $real_drum_firstnote FALSE}
   {set $real_guitar_firstnote FALSE}
   {set $keys_firstnote FALSE}
   {set $real_keys_firstnote FALSE}
   {set $drum_firstnote FALSE}
   ;callbacks
   {set $bass_groove_active FALSE}
   {set $drum_groove_active FALSE}
   {set $guitar_groove_active FALSE}
   ;mtv
   {set $authorvar FALSE}
   {set $artistvar FALSE}
   {set $yearvar FALSE}
   {set $albumvar FALSE}
   ;mtv
   {set $dx_readdtaonce FALSE}
   {set $dx_mtv_dta_reader_once FALSE}
   {set $dx_hmxcheckedonce FALSE}
   ;acceleration mode
   {set $speedmod_top $leaderspeed}
   ;endgame sound effects
   {set $dx_someone_fcd FALSE}
   {set $dx_someone_niced FALSE}
   {set $dx_someone_jurgend FALSE}
)
#define DX_TEXTURE_RESET_HANDLER
(
   {if {== $smasher rb3} {set $smasher none}}

   {if {== $gem rb3} {set $gem none}}

   {if {== $sustain rb3} {set $sustain none}}

   {if {== $crowdmeter rb3} {set $crowdmeter none}}

   {if {== $multiring rb3} {set $multiring none}}

   {if {== $odbar rb3} {set $odbar none}}

   {if {== $rails rb3} {set $rails none}}

   {if {== $scoretex rb3} {set $scoretex none}}

   {if {== $flames rb3} {set $flames none}}

   {if {== $voxarrow rb3} {set $voxarrow none}}

   {if {== $voxhw rb3} {set $voxhw none}}

   {if {== $keyboard original} {set $keyboard none}}

   {if {== $highwaygtr _rb3_guitar} {set $highwaygtr none}}
   {if {== $highwaybass _rb3_bass} {set $highwaybass none}}
   {if {== $highwaydrum _rb3_drum} {set $highwaydrum none}}
   {if {== $highwaykeys _rb3_keys} {set $highwaykeys none}}

   {if {== $spotlightgtr _spotlight_guitar_track} {set $spotlightgtr none}}
   {if {== $spotlightbass _spotlight_bass_track} {set $spotlightbass none}}
   {if {== $spotlightdrum _spotlight_drums_track} {set $spotlightdrum none}}
   {if {== $spotlightkeys _spotlight_prokeys_track} {set $spotlightkeys none}}

   {if {== $emissivegtr rb3_guitar} {set $emissivegtr none}}
   {if {== $emissivebass rb3_bass} {set $emissivebass none}}
   {if {== $emissivedrum rb3_drums} {set $emissivedrum none}}
   {if {== $emissivekeys rb3_keys} {set $emissivekeys none}}

   {if {== $dx_multiangle 1} {set $dx_forcedx_multiangle FALSE}}
)