#define DX_PS3_HW_DETECTION
(
   {if {file_exists "GD:/dev_hdd0/game/BLES80608/USRDIR/COLOR.INI"} ; used for hw detection, BLES80608 is multiman
      {set $dx_ps3hw TRUE}
   }
)
#define DX_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/dx.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx.dta" #endif
)
#define MOD_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/mod.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/mod.dta" #endif
)
#define VAL_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/val.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/val.dta" #endif
)
#define DRP_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/discordrp.json" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/discordrp.json" #endif
)
#define LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/log.dta" #endif
)
#define CURRENT_SONG_TXT_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/currentsong.txt" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/currentsong.txt" #endif
)
#define CURRENT_SONG_JSON_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/currentsong.json" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/currentsong.json" #endif
)
#define PREV_LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/last_log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/last_log.dta" #endif
)
#define MENU_BACKGROUND_BIK_PATH
(
   #ifdef HX_XBOX "GAME:/main_background.bik" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/main_background.bik" #endif
)
#define DX_BOOT_FILE_CHECKER
(
   #ifndef HX_WII
   {$this check_dx}
   {$this check_xeniawrites}
   #endif
)
#define DX_BOOT_FILE_HANDLERS
(
   (check_dx
      {unless {file_exists DX_FILE_PATH}
         {unless $dxwelcomeseen
            {dx_log_writer {sprint "Cannot find DX.dta"}}
            {ui push_screen hint_dx_welcome_screen}
         }
      }
   )
   (check_xeniawrites
      {unless {file_exists DX_FILE_PATH}
         {if $dxwelcomeseen
            {unless $dx_settings_error
               {dx_log_writer {sprint "Cannot write DX.dta"}}
               {ui push_screen hint_relative_writes_screen}
            }
         }
      }
   )
)
#define DX_TOGGLE_POST_FX_FROM_BOOT
(
   {if {&& $toggle_postfx {! $bootpostfxtoggled}} ; dx - ensure we are properly keeping track of the state of the post proc toggle
      {set $bootpostfxtoggled TRUE}
      {dx_log_writer {sprint "Toggling Post Processing FX. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
      {rnd toggle_all_postprocs}
   }
)
#define INIT_DX_READER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to read dx.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {foreach $entry {read_file DX_FILE_PATH}
      {if {== {elem $entry 0} {basename mtv_position}}
         {set $mtvpos_0
            {elem {find $entry mtv_position} 1}
         }
         {set $mtvpos_1
            {elem {find $entry mtv_position} 2}
         }
         {set $mtvpos_2
            {elem {find $entry mtv_position} 3}
         }
      }
      {if {== {elem $entry 0} {basename gem_colors}}
         {set $slot1_color
            {elem {find $entry gem_colors} 1}
         }
         {set $slot2_color
            {elem {find $entry gem_colors} 2}
         }
         {set $slot3_color
            {elem {find $entry gem_colors} 3}
         }
         {set $slot4_color
            {elem {find $entry gem_colors} 4}
         }
         {set $slot5_color
            {elem {find $entry gem_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename sustain_colors}}
         {set $sus1_color
            {elem {find $entry sustain_colors} 1}
         }
         {set $sus2_color
            {elem {find $entry sustain_colors} 2}
         }
         {set $sus3_color
            {elem {find $entry sustain_colors} 3}
         }
         {set $sus4_color
            {elem {find $entry sustain_colors} 4}
         }
         {set $sus5_color
            {elem {find $entry sustain_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename smasher_colors}}
         {set $dx_fret1_color
            {elem {find $entry smasher_colors} 1}
         }
         {set $dx_fret2_color
            {elem {find $entry smasher_colors} 2}
         }
         {set $dx_fret3_color
            {elem {find $entry smasher_colors} 3}
         }
         {set $dx_fret4_color
            {elem {find $entry smasher_colors} 4}
         }
         {set $dx_fret5_color
            {elem {find $entry smasher_colors} 5}
         }
      }
      {if {== {elem $entry 0} {basename drum_smasher_colors}}
         {set $dx_smasher1_color
            {elem {find $entry drum_smasher_colors} 1}
         }
         {set $dx_smasher2_color
            {elem {find $entry drum_smasher_colors} 2}
         }
         {set $dx_smasher3_color
            {elem {find $entry drum_smasher_colors} 3}
         }
         {set $dx_smasher4_color
            {elem {find $entry drum_smasher_colors} 4}
         }
      }
      {if {== {elem $entry 0} {basename drum_tom_colors}}
         {set $drum1_color
            {elem {find $entry drum_tom_colors} 1}
         }
         {set $drum2_color
            {elem {find $entry drum_tom_colors} 2}
         }
         {set $drum3_color
            {elem {find $entry drum_tom_colors} 3}
         }
         {set $drum4_color
            {elem {find $entry drum_tom_colors} 4}
         }
      }
      {if {== {elem $entry 0} {basename drum_cymbal_color}}
         {set $cym1_color
            {elem {find $entry drum_cymbal_color} 1}
         }
         {set $cym2_color
            {elem {find $entry drum_cymbal_color} 2}
         }
         {set $cym3_color
            {elem {find $entry drum_cymbal_color} 3}
         }
         {set $cym4_color
            {elem {find $entry drum_cymbal_color} 4}
         }
      }
      {if {== {elem $entry 0} {basename kick_color}}
         {set $kick_color
            {elem {find $entry kick_color} 1}
         }
      }
      {if {== {elem $entry 0} {basename main_menu_screen}}
         {set $svnumber
            {elem {find $entry main_menu_screen} 1}
         }
      }
      {if {== {elem $entry 0} {basename emulate_fps}}
         {set $emulatefps
            {elem {find $entry emulate_fps} 1}
         }
      }
      {if {== {elem $entry 0} {basename track_speed}}
         {set $trackspeed
            {elem {find $entry track_speed} 1}
         }
      }
      {if {== {elem $entry 0} {basename song_speed}}
         {set $speedmod
            {elem {find $entry song_speed} 1}
         }
      }
      {if {== {elem $entry 0} {basename animated_gem_texture}}
         {set $animatedgemname
            {elem {find $entry animated_gem_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename gem_texture}}
         {set $gem
            {elem {find $entry gem_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename sustain_texture}}
         {set $sustain
            {elem {find $entry sustain_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename smasher_texture}}
         {set $smasher
            {elem {find $entry smasher_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename crowdmeter_texture}}
         {set $crowdmeter
            {elem {find $entry crowdmeter_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename multiring_texture}}
         {set $multiring
            {elem {find $entry multiring_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename odbar_texture}}
         {set $odbar
            {elem {find $entry odbar_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename rails_texture}}
         {set $rails
            {elem {find $entry rails_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename score_texture}}
         {set $scoretex
            {elem {find $entry score_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename flames_texture}}
         {set $flames
            {elem {find $entry flames_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename voxarrow_texture}}
         {set $voxarrow
            {elem {find $entry voxarrow_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename voxhw_texture}}
         {set $voxhw
            {elem {find $entry voxhw_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename keyboard_texture}}
         {set $keyboard
            {elem {find $entry keyboard_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename emissive_texture}}
         {set $emissive
            {elem {find $entry emissive_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename emissive_color}}
         {set $emissive_r
            {elem {find $entry emissive_color} 1}
         }
         {set $emissive_g
            {elem {find $entry emissive_color} 2}
         }
         {set $emissive_b
            {elem {find $entry emissive_color} 3}
         }
      }
      {if {== {elem $entry 0} {basename emissive_gtr_texture}}
         {set $emissivegtr
            {elem {find $entry emissive_gtr_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename emissive_bass_texture}}
         {set $emissivebass
            {elem {find $entry emissive_bass_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename emissive_drum_texture}}
         {set $emissivedrum
            {elem {find $entry emissive_drum_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename emissive_keys_texture}}
         {set $emissivekeys
            {elem {find $entry emissive_keys_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename spotlight_texture}}
         {set $spotlight
            {elem {find $entry spotlight_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename spotlight_gtr_texture}}
         {set $spotlightgtr
            {elem {find $entry spotlight_gtr_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename spotlight_bass_texture}}
         {set $spotlightbass
            {elem {find $entry spotlight_bass_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename spotlight_drum_texture}}
         {set $spotlightdrum
            {elem {find $entry spotlight_drum_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename spotlight_keys_texture}}
         {set $spotlightkeys
            {elem {find $entry spotlight_keys_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename highway_texture}}
         {set $highway
            {elem {find $entry highway_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename highway_gtr_texture}}
         {set $highwaygtr
            {elem {find $entry highway_gtr_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename highway_bass_texture}}
         {set $highwaybass
            {elem {find $entry highway_bass_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename highway_drum_texture}}
         {set $highwaydrum
            {elem {find $entry highway_drum_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename highway_keys_texture}}
         {set $highwaykeys
            {elem {find $entry highway_keys_texture} 1}
         }
      }
      {if {== {elem $entry 0} {basename multi_angle}}
         {set $dx_multiangle
            {elem {find $entry multi_angle} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_prefix}}
         {set $dx_currentsong_prefix
            {elem {find $entry dx_currentsong_prefix} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_year}}
         {set $dx_currentsong_year
            {elem {find $entry dx_currentsong_year} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_yearonline}}
         {set $dx_currentsong_yearonline
            {elem {find $entry dx_currentsong_yearonline} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_album}}
         {set $dx_currentsong_album
            {elem {find $entry dx_currentsong_album} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_genre}}
         {set $dx_currentsong_genre
            {elem {find $entry dx_currentsong_genre} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_currentsong_source}}
         {set $dx_currentsong_source
            {elem {find $entry dx_currentsong_source} 1}
         }
      }
      {if {== {elem $entry 0} {basename rb3_venue}}
         {set $venue
            {elem {find $entry rb3_venue} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_guitar}}
         {set $dx_joypad_type_guitar
            {elem {find $entry dx_joypad_type_guitar} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_keys}}
         {set $dx_joypad_type_keys
            {elem {find $entry dx_joypad_type_keys} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_type_vocals}}
         {set $dx_joypad_type_vocals
            {elem {find $entry dx_joypad_type_vocals} 1}
         }
      }
      {if {== {elem $entry 0} {basename dx_joypad_pad_mapping}}
         {set $dx_joypad_pad_mapping
            {elem {find $entry dx_joypad_pad_mapping} 1}
         }
      }
      {if {== {elem $entry 0} {basename mod_nosustain}}
         {if {== {elem {find $entry mod_nosustain} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_nosustain}
         }
      }
      {if {== {elem $entry 0} {basename mod_rb2sustain}}
         {if {== {elem {find $entry mod_rb2sustain} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_rb2sustain}
         }
      }
      {if {== {elem $entry 0} {basename mod_rb4sustain}}
         {if {== {elem {find $entry mod_rb4sustain} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_rb4sustain}
         }
      }
      {if {== {elem $entry 0} {basename mod_rb4os}}
         {if {== {elem {find $entry mod_rb4os} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_rb4os}
         }
      }
      {if {== {elem $entry 0} {basename mod_rivalsos}}
         {if {== {elem {find $entry mod_rivalsos} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_rivalsos}
         }
      }
      {if {== {elem $entry 0} {basename mod_xboxos}}
         {if {== {elem {find $entry mod_xboxos} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_xboxos}
         }
      }
      {if {== {elem $entry 0} {basename mod_ps3os}}
         {if {== {elem {find $entry mod_ps3os} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_ps3os}
         }
      }
      {if {== {elem $entry 0} {basename mod_wiios}}
         {if {== {elem {find $entry mod_wiios} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_wiios}
         }
      }
      {if {== {elem $entry 0} {basename mod_no_crowd_meter}}
         {if {== {elem {find $entry mod_no_crowd_meter} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_no_crowd_meter}
         }
      }
      {if {== {elem $entry 0} {basename mod_no_scoreboard}}
         {if {== {elem {find $entry mod_no_scoreboard} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_no_scoreboard}
         }
      }
      {if {== {elem $entry 0} {basename mod_songtitle}}
         {if {== {elem {find $entry mod_songtitle} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_songtitle}
         }
      }
      {if {== {elem $entry 0} {basename mod_songtitlestats}}
         {if {== {elem {find $entry mod_songtitlestats} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_songtitlestats}
         }
      }
      {if {== {elem $entry 0} {basename mod_no_mtv_overlay}}
         {if {== {elem {find $entry mod_no_mtv_overlay} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_no_mtv_overlay}
         }
      }
      {if {== {elem $entry 0} {basename mod_dx_showbpm}}
         {if {== {elem {find $entry mod_dx_showbpm} 1} 1}
            {unless {modifier_mgr is_modifier_active mod_dx_showbpm}
               {modifier_mgr toggle_modifier_enabled mod_dx_showbpm}
            }
         }
      }
      {if {== {elem $entry 0} {basename mod_blackmenu}}
         {if {== {elem {find $entry mod_blackmenu} 1} 1}
            {modifier_mgr toggle_modifier_enabled mod_blackmenu}
         }
      }
      {if {== {elem $entry 0} {basename blur_restored}}
         {set $blurisbackon
            {elem {find $entry blur_restored} 1}
         }
      }
      {if {== {elem $entry 0} {basename crust_restored}}
         {set $crustisbackon
            {elem {find $entry crust_restored} 1}
         }
      }
   }
   #endif
)
#define INIT_DX_WRITER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to write DX.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file DX_FILE_PATH
      {array
         (
            (mtv_position
               (mtv_position $mtvpos_0 $mtvpos_1 $mtvpos_2)
            )
            (gem_colors
               (gem_colors $slot1_color $slot2_color $slot3_color $slot4_color $slot5_color)
            )
            (sustain_colors
               (sustain_colors $sus1_color $sus2_color $sus3_color $sus4_color $sus5_color)
            )
            (smasher_colors
               (smasher_colors $dx_fret1_color $dx_fret2_color $dx_fret3_color $dx_fret4_color $dx_fret5_color)
            )
            (drum_smasher_colors
               (drum_smasher_colors $dx_smasher1_color $dx_smasher2_color $dx_smasher3_color $dx_smasher4_color)
            )
            (drum_tom_colors
               (drum_tom_colors $drum1_color $drum2_color $drum3_color $drum4_color)
            )
            (drum_cymbal_color
               (drum_cymbal_color $cym1_color $cym2_color $cym3_color $cym4_color )
            )
            (kick_color
               (kick_color $kick_color)
            )
            (main_menu_screen
               (main_menu_screen $svnumber)
            )
            (emulate_fps
               (emulate_fps $emulatefps)
            )
            (track_speed
               (track_speed $trackspeed)
            )
            (song_speed
               (song_speed $speedmod)
            )
            (animated_gem_texture
               (animated_gem_texture $animatedgemname)
            )
            (gem_texture
               (gem_texture $gem)
            )
            (sustain_texture
               (sustain_texture $sustain)
            )
            (smasher_texture
               (smasher_texture $smasher)
            )
            (crowdmeter_texture
               (crowdmeter_texture $crowdmeter)
            )
            (multiring_texture
               (multiring_texture $multiring)
            )
            (odbar_texture
               (odbar_texture $odbar)
            )
            (rails_texture
               (rails_texture $rails)
            )
            (score_texture
               (score_texture $scoretex)
            )
            (flames_texture
               (flames_texture $flames)
            )
            (voxarrow_texture
               (voxarrow_texture $voxarrow)
            )
            (voxhw_texture
               (voxhw_texture $voxhw)
            )
            (keyboard_texture
               (keyboard_texture $keyboard)
            )
            (emissive_texture
               (emissive_texture $emissive)
            )
            (emissive_color
               (emissive_color $emissive_r $emissive_g $emissive_b)
            )
            (emissive_gtr_texture
               (emissive_gtr_texture $emissivegtr)
            )
            (emissive_bass_texture
               (emissive_bass_texture $emissivebass)
            )
            (emissive_drum_texture
               (emissive_drum_texture $emissivedrum)
            )
            (emissive_keys_texture
               (emissive_keys_texture $emissivekeys)
            )
            (spotlight_texture
               (spotlight_texture $spotlight)
            )
            (spotlight_gtr_texture
               (spotlight_gtr_texture $spotlightgtr)
            )
            (spotlight_bass_texture
               (spotlight_bass_texture $spotlightbass)
            )
            (spotlight_drum_texture
               (spotlight_drum_texture $spotlightdrum)
            )
            (spotlight_keys_texture
               (spotlight_keys_texture $spotlightkeys)
            )
            (highway_texture
               (highway_texture $highway)
            )
            (highway_gtr_texture
               (highway_gtr_texture $highwaygtr)
            )
            (highway_bass_texture
               (highway_bass_texture $highwaybass)
            )
            (highway_drum_texture
               (highway_drum_texture $highwaydrum)
            )
            (highway_keys_texture
               (highway_keys_texture $highwaykeys)
            )
            (multi_angle
               (multi_angle $dx_multiangle)
            )
            (fullcombo_sfx
               (fullcombo_sfx $fcsfx)
            )
            (toggle_postfx
               (toggle_postfx $toggle_postfx)
            )
            (dx_currentsong_prefix
               (dx_currentsong_prefix $dx_currentsong_prefix)
            )
            (dx_currentsong_year
               (dx_currentsong_year $dx_currentsong_year)
            )
            (dx_currentsong_yearonline
               (dx_currentsong_yearonline $dx_currentsong_yearonline)
            )
            (dx_currentsong_album
               (dx_currentsong_album $dx_currentsong_album)
            )
            (dx_currentsong_genre
               (dx_currentsong_genre $dx_currentsong_genre)
            )
            (dx_currentsong_source
               (dx_currentsong_source $dx_currentsong_source)
            )
            (rb3_venue
               (rb3_venue
                  {if_else {&& {== $force TRUE}
                                {||
                                   {== $venue small_venues} {== $venue big_venues} {== $venue arena_venues}
                                   {== $venue festival_venues} {== $venue venues_video}
                                   {== $venue small_club_01} {== $venue small_club_02} {== $venue small_club_03}
                                   {== $venue small_club_04} {== $venue small_club_05} {== $venue small_club_06}
                                   {== $venue small_club_10} {== $venue small_club_11} {== $venue small_club_13}
                                   {== $venue small_club_14} {== $venue small_club_15} {== $venue big_club_01}
                                   {== $venue big_club_02} {== $venue big_club_04} {== $venue big_club_05}
                                   {== $venue big_club_06} {== $venue big_club_07} {== $venue big_club_08}
                                   {== $venue big_club_09} {== $venue big_club_10} {== $venue big_club_11}
                                   {== $venue big_club_12} {== $venue big_club_13} {== $venue big_club_14}
                                   {== $venue big_club_15} {== $venue big_club_17} {== $venue arena_01}
                                   {== $venue arena_02} {== $venue arena_03} {== $venue arena_04}
                                   {== $venue arena_06} {== $venue arena_07} {== $venue arena_10}
                                   {== $venue arena_11} {== $venue arena_12} {== $venue festival_01}
                                   {== $venue festival_02} {== $venue none}
                                }
                            }
                     $venue
                     FALSE
                  }
               )
            )
            (dx_joypad_type_guitar
               (dx_joypad_type_guitar $dx_joypad_type_guitar)
            )
            (dx_joypad_type_keys
               (dx_joypad_type_keys $dx_joypad_type_keys)
            )
            (dx_joypad_type_vocals
               (dx_joypad_type_vocals $dx_joypad_type_vocals)
            )
            (dx_joypad_pad_mapping
               (dx_joypad_pad_mapping $dx_joypad_pad_mapping)
            )
            (mod_nosustain
               (mod_nosustain {modifier_mgr is_modifier_active mod_nosustain})
            )
            (mod_rb2sustain
               (mod_rb2sustain {modifier_mgr is_modifier_active mod_rb2sustain})
            )
            (mod_rb4sustain
               (mod_rb4sustain {modifier_mgr is_modifier_active mod_rb4sustain})
            )
            (mod_rb4os
               (mod_rb4os {modifier_mgr is_modifier_active mod_rb4os})
            )
            (mod_rivalsos
               (mod_rivalsos {modifier_mgr is_modifier_active mod_rivalsos})
            )
            (mod_xboxos
               (mod_xboxos {modifier_mgr is_modifier_active mod_xboxos})
            )
            (mod_ps3os
               (mod_ps3os {modifier_mgr is_modifier_active mod_ps3os})
            )
            (mod_wiios
               (mod_wiios {modifier_mgr is_modifier_active mod_wiios})
            )
            (mod_no_crowd_meter
               (mod_no_crowd_meter {modifier_mgr is_modifier_active mod_no_crowd_meter})
            )
            (mod_no_scoreboard
               (mod_no_scoreboard {modifier_mgr is_modifier_active mod_no_scoreboard})
            )
            (mod_songtitle
               (mod_songtitle {modifier_mgr is_modifier_active mod_songtitle})
            )
            (mod_songtitlestats
               (mod_songtitlestats {modifier_mgr is_modifier_active mod_songtitlestats})
            )
            (mod_no_mtv_overlay
               (mod_no_mtv_overlay {modifier_mgr is_modifier_active mod_no_mtv_overlay})
            )
            (mod_dx_showbpm
               (mod_dx_showbpm {modifier_mgr is_modifier_active mod_dx_showbpm})
            )
            (mod_blackmenu
               (mod_blackmenu {modifier_mgr is_modifier_active mod_blackmenu})
            )
            (blur_restored
               (blur_restored $blurisbackon)
            )
            (crust_restored
               (crust_restored $crustisbackon)
            )
         )
      }
   }
   #endif
)
#define INIT_MOD_READER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to read mod.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {dx_modifier_reader mod_static_fills}
   {dx_modifier_reader mod_chord_numbers}
   {dx_modifier_reader mod_nohud}
   {dx_modifier_reader mod_miss_sounds}
   {dx_modifier_reader mod_whammyfx}
   {dx_modifier_reader mod_songselectnoise}
   {dx_modifier_reader mod_practiceoverdrive}
   {dx_modifier_reader mod_nolanes}
   {dx_modifier_reader mod_rb4lanes}
   {dx_modifier_reader mod_nomv}
   {dx_modifier_reader mod_nointro}
   {dx_modifier_reader mod_nosfx}
   {dx_modifier_reader mod_current_song_logging}
   {dx_modifier_reader mod_synced_track_speeds}
   {dx_modifier_reader mod_nopause}
   {dx_modifier_reader mod_skipsavemsg}
   {unless {modifier_mgr is_modifier_active mod_doublespeed}
      {dx_modifier_reader mod_doublespeed}
   }
   {unless {modifier_mgr is_modifier_active mod_dx_no_overdrive}
      {dx_modifier_reader mod_dx_no_overdrive}
   }
   {foreach $entry {read_file MOD_FILE_PATH}
      {if {== {elem $entry 0} {basename mod_dx_logging}}
         {set $mod_dx_logging
            {elem {find $entry mod_dx_logging} 1}
         }
      }
   }
   #endif
)
#define INIT_MOD_WRITER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to write mod.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file MOD_FILE_PATH
      {array
         (
            (mod_doublespeed
              (mod_doublespeed {modifier_mgr is_modifier_active mod_doublespeed})
            )
            (mod_static_fills
               (mod_static_fills {modifier_mgr is_modifier_active mod_static_fills})
            )
            (mod_chord_numbers
               (mod_chord_numbers {modifier_mgr is_modifier_active mod_chord_numbers})
            )
            (mod_nohud
               (mod_nohud {modifier_mgr is_modifier_active mod_nohud})
            )
            (mod_miss_sounds
               (mod_miss_sounds {! {modifier_mgr is_modifier_active mod_miss_sounds}}) ;swapped TRUE/FALSE due to modifier being on by default
            )
            (mod_whammyfx
               (mod_whammyfx {modifier_mgr is_modifier_active mod_whammyfx})
            )
            (mod_songselectnoise
               (mod_songselectnoise {modifier_mgr is_modifier_active mod_songselectnoise})
            )
            (mod_practiceoverdrive
               (mod_practiceoverdrive {modifier_mgr is_modifier_active mod_practiceoverdrive})
            )
            (mod_nolanes
               (mod_nolanes {modifier_mgr is_modifier_active mod_nolanes})
            )
            (mod_rb4lanes
               (mod_rb4lanes {modifier_mgr is_modifier_active mod_rb4lanes})
            )
            (mod_nomv
               (mod_nomv {modifier_mgr is_modifier_active mod_nomv})
            )
            (mod_nointro
               (mod_nointro {modifier_mgr is_modifier_active mod_nointro})
            )
            (mod_nosfx
               (mod_nosfx {modifier_mgr is_modifier_active mod_nosfx})
            )
            (mod_dx_logging
               (mod_dx_logging {modifier_mgr is_modifier_active mod_dx_logging})
            )
            (mod_current_song_logging
               (mod_current_song_logging {modifier_mgr is_modifier_active mod_current_song_logging})
            )
            (mod_synced_track_speeds
               (mod_synced_track_speeds {modifier_mgr is_modifier_active mod_synced_track_speeds})
            )
            (mod_nopause
               (mod_nopause {modifier_mgr is_modifier_active mod_nopause})
            )
            (mod_skipsavemsg
               (mod_skipsavemsg {modifier_mgr is_modifier_active mod_skipsavemsg})
            )
            (mod_dx_no_overdrive
               (mod_dx_no_overdrive {modifier_mgr is_modifier_active mod_dx_no_overdrive})
            )
         )
      }
   }
   #endif
)
#define INIT_VAL_READER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to read val.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {foreach $entry {read_file VAL_FILE_PATH}
      {if {== {elem $entry 0} {basename mic_vols}}
         {set $mic_vol_1
            {elem {find $entry mic_vols} 1}
         }
         {set $mic_vol_2
            {elem {find $entry mic_vols} 2}
         }
         {set $mic_vol_3
            {elem {find $entry mic_vols} 3}
         }
      }
      {if {== {elem $entry 0} {basename default_slot0}}
         {set $default_slot0
            {elem {find $entry default_slot0} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot1}}
         {set $default_slot1
            {elem {find $entry default_slot1} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot2}}
         {set $default_slot2
            {elem {find $entry default_slot2} 1}
         }
      }
      {if {== {elem $entry 0} {basename default_slot3}}
         {set $default_slot3
            {elem {find $entry default_slot3} 1}
         }
      }
   }
   #endif
)
#define INIT_VAL_WRITER
(
   #ifndef HX_WII
   {dx_log_writer {sprint "Attempting to write val.dta. Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {write_file VAL_FILE_PATH
      {array
         (
            (mic_vols
               (mic_vols {profile_mgr get_mic_vol 0} {profile_mgr get_mic_vol 1} {profile_mgr get_mic_vol 2})
            )
            (default_slot0
               (default_slot0 $default_slot0)
            )
            (default_slot1
               (default_slot1 $default_slot1)
            )
            (default_slot2
               (default_slot2 $default_slot2)
            )
            (default_slot3
               (default_slot3 $default_slot3)
            )
         )
      }
   }
   #endif
)
#define DX_LOG_CLEAR
(
   {if {file_exists LOG_FILE_PATH}
      {write_file PREV_LOG_FILE_PATH {read_file LOG_FILE_PATH}}
      {set $dx_log_reader ("start of log")}
      {write_file LOG_FILE_PATH {array $dx_log_reader}}
   }
)
#define DX_CURRENT_SONG_CLEAR
(
   {do
      {set $dx_current_song FALSE}
      {set $dx_current_song ("No Song Loaded")}
      {write_file CURRENT_SONG_TXT_FILE_PATH {array $dx_current_song}}
   }
)
#define DX_CURRENT_SONG_WRITER
(
   #ifndef HX_WII
   {if {&& {modifier_mgr is_modifier_active mod_songtitlestats} {modifier_mgr is_modifier_active mod_current_song_logging}}
      {set $dx_current_song ()}
      {resize $dx_current_song 0}
      {if_else $dx_currentsong_prefix
         {do
            {push_back $dx_current_song {sprint "Song: " $song_title}}
            {if_else {&& $dx_currentsong_year $dx_currentsong_yearonline}
               {push_back $dx_current_song {sprint "Artist: " $artistvar ", " $yearvar}}
               {push_back $dx_current_song {sprint "Artist: " $artistvar}}
            }
            {if $dx_currentsong_album
               {push_back $dx_current_song {sprint "Album: " $albumvar}}
            }
            {if $dx_currentsong_genre
               {push_back $dx_current_song {sprint "Genre: " {localize $genrevar}}}
            }
            {if {&& $dx_currentsong_year {! $dx_currentsong_yearonline}}
               {push_back $dx_current_song {sprint "Year: " $yearvar}}
            }
            {if $dx_currentsong_source
               {push_back $dx_current_song {sprint "Source: " {localize $sourcevar}}}
            }
            {if $authorvar
               {push_back $dx_current_song {sprint "Author: " $authorvar}}
            }
         }
         {do
            {push_back $dx_current_song $song_title}
            {if_else {&& $dx_currentsong_year $dx_currentsong_yearonline}
               {push_back $dx_current_song {sprint $artistvar ", " $yearvar}}
               {push_back $dx_current_song $artistvar}
            }
            {if $dx_currentsong_album
               {push_back $dx_current_song $albumvar}
            }
            {if $dx_currentsong_genre
               {push_back $dx_current_song {localize $genrevar}}
            }
            {if {&& $dx_currentsong_year {! $dx_currentsong_yearonline}}
               {push_back $dx_current_song $yearvar}
            }
            {if $dx_currentsong_source
               {push_back $dx_current_song {localize $sourcevar}}
            }
            {if $authorvar
               {push_back $dx_current_song $authorvar}
            }
         }
      }
      {write_file CURRENT_SONG_TXT_FILE_PATH
         {array
            $dx_current_song
         }
      }
   }
   #endif
)
#define DX_JSON_CLEAR
(
   {do
      {set $dx_current_song ()}
      {resize $dx_current_song 0}
      {write_file CURRENT_SONG_JSON_FILE_PATH {array $dx_current_song}}
   }
)
#define DX_JSON_WRITER
(
   #ifndef HX_WII
   {unless $dx_ps3hw
      {if {&& {modifier_mgr is_modifier_active mod_songtitlestats} {modifier_mgr is_modifier_active mod_current_song_logging}}
         {set $dx_current_song ()}
         {resize $dx_current_song 0}
         {push_back $dx_current_song {sprint "{" "\q" "Playlist" "\q" ":" "\q\q" "\q" "," "\q" "SubPlaylist" "\q" ":" "\q" "\q" "," "\q" "IsModChart" "\q" ":" "false" ","
         "\q" "SelectedInstruments" "\q" ":" "[" 
         "{" "\q" "active" "\q" ":" $guitarplayeractive "," "\q" "instrument" "\q" ":" "\q" "GUITAR" "\q" "," "\q" "difficulty" "\q" ":" "\q" $guitarrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $real_guitarplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_GUITAR" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_guitarrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $drumplayeractive "," "\q" "instrument" "\q" ":" "\q" "DRUMS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $drumrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $vocalsplayeractive "," "\q" "instrument" "\q" ":" "\q" "VOCALS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $vocalsrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $bassplayeractive "," "\q" "instrument" "\q" ":" "\q" "BASS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $bassrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $real_bassplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_BASS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_bassrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $keysplayeractive "," "\q" "instrument" "\q" ":" "\q" "KEYS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $keysrankvar "\q" "}" ","
         "{" "\q" "active" "\q" ":" $real_keysplayeractive "," "\q" "instrument" "\q" ":" "\q" "REAL_KEYS" "\q" "," "\q" "difficulty" "\q" ":" "\q" $real_keysrankvar "\q" "}" "]" ","
         "\q" "HasLyrics" "\q" ":" "false" "," "\q" "VideoStartOffset" "\q" ":" 0 "," "\q" "CacheRoot" "\q" ":" "\q" "FakePath" "\q" "," "\q" "DrumType" "\q" ":" "0" ","
         "\q" "Name" "\q" ":" "\q" $song_title "\q" "," "\q" "NameNoParenthesis" "\q" ":" "\q" $song_title "\q" "," "\q" "Artist" "\q" ":" "\q" $artistvar "\q" ","
         "\q" "Charter" "\q" ":" "\q" $authorvar "\q" "," "\q" "IsMaster" "\q" ":" $mastervar "," "\q" "Album" "\q" ":" "\q" $albumvar "\q" "," "\q" "AlbumTrack" "\q" ":" 3 ","
         "\q" "PlaylistTrack" "\q" ":" "0" "," "\q" "Genre" "\q" ":" "\q" $genrevar "\q" "," "\q" "Year" "\q" ":" "\q" $yearvar "\q" "," "\q" "SongLength" "\q" ":" "231271" ","
         "\q" "SongLengthTimeSpan" "\q" ":" "\q" "00:03:51.2710000" "\q" "," "\q" "PreviewStart" "\q" ":" "53454" "," "\q" "PreviewStartTimeSpan" "\q" ":" "\q" "00:00:53.4540000" "\q" ","
         "\q" "PreviewEnd" "\q" ":" "-1" "," "\q" "PreviewEndTimeSpan" "\q" ":" "\q" "-00:00:00.0010000" "\q" "," "\q" "Delay" "\q" ":" "0.0" "," "\q" "LoadingPhrase" "\q" ":" "\q" "\q" ","
         "\q" "HopoThreshold" "\q" ":" "170" "," "\q" "EighthNoteHopo" "\q" ":" "false" "," "\q" "MultiplierNote" "\q" ":" "116" "," "\q" "Source" "\q" ":" "\q" $sourcevar "\q" ","
         "\q" "PartDifficulties" "\q" ":" "{" "\q" "GUITAR" "\q" ":" $guitarrankvar "," "\q" "GUITAR_COOP" "\q" ":" "-1" "," "\q" "REAL_GUITAR" "\q" ":" $real_guitarrankvar ","
         "\q" "RHYTHM" "\q" ":" "-1" "," "\q" "BASS" "\q" ":" $bassrankvar "," "\q" "REAL_BASS" "\q" ":" $real_bassrankvar "," "\q" "DRUMS" "\q" ":" $drumrankvar ","
         "\q" "GH_DRUMS" "\q" ":" "-1" "," "\q" "REAL_DRUMS" "\q" ":" "-1" "," "\q" "KEYS" "\q" ":" $keysrankvar "," "\q" "REAL_KEYS" "\q" ":" $real_keysrankvar ","
         "\q" "VOCALS" "\q" ":" $vocalsrankvar "," "\q" "HARMONY" "\q" ":" $vocalsrankvar "}" "," "\q" "BandDifficulty" "\q" ":" $bandrankvar "," "\q" "AvailableParts" "\q" ":" "1030793138175" ","
         "\q" "VocalParts" "\q" ":" "3" "," "\q" "Checksum" "\q" ":" "\q" "C89E28F4C0987A33859ECB9DC06748EDC49B567B" "\q" "," "\q" "NotesFile" "\q" ":" "\q" "notes.mid" "\q" "," "\q" "Location" "\q" ":" "\q" "FakePath" "\q" "}"}}
         {write_file CURRENT_SONG_JSON_FILE_PATH
            {array
               $dx_current_song
            }
         }
      }
   }
   #endif
)