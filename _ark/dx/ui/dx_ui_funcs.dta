{func
   dx_log_writer
   ($write_file $dx_log_writer)
   #ifdef RB3E
   {print_debug $dx_log_writer}
   #endif
   #ifndef HX_WII
   {unless {== $dx_logging never}
      {do
         DX_GAMEMODE_CHECKER
         {if_else {file_exists LOG_FILE_PATH}
            {set $dx_log_reader {array $dx_log_reader}}
            {set $dx_log_reader ("start of log")}
         }
         {if {== $dx_log_counter 3}
            {push_back $dx_log_reader "Game Entered three times, starting new log."}
            {set $prev_dx_log_reader {array $dx_log_reader}}
            {if $write_file
               {write_file PREV_LOG_FILE_PATH $dx_log_reader}
               {set $dx_log_counter 0}
            }
            {set $dx_log_reader ({sprint "Game Entered three times, log reset. Number of songs completed this session: " $dx_num_songs_this_session})}
         }
         {push_back $dx_log_reader $dx_log_writer}
         {if {|| {&& $write_file {== $dx_logging default}} {== $dx_logging always}}
            {write_file LOG_FILE_PATH
               {array
                  $dx_log_reader
               }
            }
         }
      }
   }
   #endif
}
{func
   dx_discordrp_writer
   ($dx_discordrp_writer)
   #ifndef HX_WII
   {do
      {write_file DRP_FILE_PATH {array ($dx_discordrp_writer)}}
   }
   #endif
}
{func
   dx_modifier_reader
   ($dx_modifier_reader)
   #ifndef HX_WII
   {foreach $entry {read_file MOD_FILE_PATH}
      {if {== {elem $entry 0} {basename $dx_modifier_reader}}
         {if {== {elem {find $entry $dx_modifier_reader} 1} 1}
            {modifier_mgr toggle_modifier_enabled $dx_modifier_reader}
         }
      }
   }
   #endif
}
{func
   dx_mtv_formatter
   ($dx_mtv_addition)
   {if_else {== $dx_mtv_addition reset}
      {do 
         {set $dx_mtv_holder ()}
         {resize $dx_mtv_holder 0}
         {set $dx_mtv_elements 0}
      }
      {do
         {push_back $dx_mtv_holder $dx_mtv_addition}
         {set $dx_mtv_elements {+ $dx_mtv_elements 1}}
      }
   }
   ;{dx_log_writer FALSE $dx_mtv_addition}
}
{func
   dx_rank_var_finder
   ($instrument $var_rankvar $rank_threshold_0 $rank_threshold_1 $rank_threshold_2 $rank_threshold_3 $rank_threshold_4 $rank_threshold_5)
   {foreach $entry $var_rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {find $entry $instrument}
            {set $var_actual_rankvar
               {elem {find $entry $instrument} 1}
            }
         }
      }
      {cond
         ({< $var_actual_rankvar $rank_threshold_0}
            {set $var_instrument_rankvar 0})
         ({&& {>= $var_actual_rankvar $rank_threshold_0} {< $var_actual_rankvar $rank_threshold_1}}
            {set $var_instrument_rankvar 1})
         ({&& {>= $var_actual_rankvar $rank_threshold_1} {< $var_actual_rankvar $rank_threshold_2}}
            {set $var_instrument_rankvar 2})
         ({&& {>= $var_actual_rankvar $rank_threshold_2} {< $var_actual_rankvar $rank_threshold_3}}
            {set $var_instrument_rankvar 3})
         ({&& {>= $var_actual_rankvar $rank_threshold_3} {< $var_actual_rankvar $rank_threshold_4}}
            {set $var_instrument_rankvar 4})
         ({&& {>= $var_actual_rankvar $rank_threshold_4} {< $var_actual_rankvar $rank_threshold_5}}
            {set $var_instrument_rankvar 5})
         ({>= $var_actual_rankvar $rank_threshold_5}
            {set $var_instrument_rankvar 6})
      }
   }
   {switch $instrument
      (guitar {set $guitarrankvar $var_instrument_rankvar})
      (bass {set $bassrankvar $var_instrument_rankvar})
      (drum {set $drumrankvar $var_instrument_rankvar})
      (vocals {set $vocalsrankvar $var_instrument_rankvar})
      (band {set $bandrankvar $var_instrument_rankvar})
      (keys {set $keysrankvar $var_instrument_rankvar})
      (real_keys {set $real_keysrankvar $var_instrument_rankvar})
      (real_guitar {set $real_guitarrankvar $var_instrument_rankvar})
      (real_bass {set $real_bassrankvar $var_instrument_rankvar})
   }
}
{func
   dx_set_postfx
   ($dx_postfx_state)
   {switch $dx_postfx
      (0 ;if post proc is currently off
         {if $dx_postfx_state ;and we want to turn it on
            {set $dx_postfx TRUE}
            {rnd toggle_all_postprocs}
         }
      )
      (1 ;if post proc is currently on
         {unless $dx_postfx_state ;and we want to turn it off
            {set $dx_postfx FALSE}
            {rnd toggle_all_postprocs}
         }
      )
   }
}
#define DX_POST_PROC_HANDLER
(
   {if {!= $emulatefps 30}
      {$dx_this_var iterate PostProc $p {$p set emulate_fps $emulatefps}}
   }
   {if {! $dx_noise}
      {$dx_this_var iterate PostProc $p {$p set noise_intensity $dx_noise}}
   }
   {if {! $dx_motion_blur}
      {$dx_this_var iterate PostProc $p {$p set motion_blur_velocity $dx_motion_blur}}
      {$dx_this_var iterate PostProc $p {$p set motion_blur_blend $dx_motion_blur}}
      {$dx_this_var iterate PostProc $p {$p set motion_blur_weight $dx_motion_blur}}
      {$dx_this_var iterate PostProc $p {$p set motion_blur_exposure $dx_motion_blur}}
   }
   {unless $dx_camera_shake
      ;{$char iterate CharHair $hair {$hair reset 35}}
      {$dx_this_var iterate WorldDir $wd
;         {do
;            {set $dx_cursysms {system_ms}}
;            {set $dxdbg_objs {array ({sprint "List of BandCamShots in " {$wd name} " on " {ui current_screen} " at " $dx_cursysms "ms since boot"})}}
;            {$wd iterate BandCamShot $p {push_back $dxdbg_objs {sprintf "%s : %s" {$p name} {$p class_name}}}}
;            {write_file {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/" {sprintf "%010d" $dx_cursysms} "-BandCamShots-" {$wd name} "-" {ui current_screen} ".dta"} $dxdbg_objs}
;         }
         {$wd iterate BandCamShot $bcs
            {do
               ($dx_num_keyframes {$bcs size (keyframes)})
;               {dx_log_writer TRUE {sprint "Number of keyframes in " {$wd name} "/" {$bcs name} " on " {ui current_screen}": " $dx_num_keyframes}}
               {foreach_int $i 0 $dx_num_keyframes
                  {$bcs set (keyframes $i shake_noisefreq) 0}
                  {$bcs set (keyframes $i shake_noiseamp) 0}
                  {$bcs set (keyframes $i shake_maxangle x) 0}
                  {$bcs set (keyframes $i shake_maxangle y) 0}
               }
            }
         }
      }
   }
   {unless $dx_camera_blur
      {$dx_this_var iterate WorldDir $wd
         {$wd iterate BandCamShot $bcs
            {do
               ($dx_num_keyframes {$bcs size (keyframes)})
               {foreach_int $i 0 $dx_num_keyframes
                  {$bcs set (keyframes $i blur_depth) 0}
                  {$bcs set (keyframes $i max_blur) 0}
                  {$bcs set (keyframes $i focus_blur_multiplier) 0}
               }
            }
         }
      }
   }
   {if $dx_force_lod
      ;i dont know if this even works
      {$dx_this_var iterate WorldDir $wd
         {$wd iterate BandCamShot $bcs
            {$bcs set force_lod 1}
            {$bcs set self_shadow 1}
         }
      }
   }
)
{func
   dx_postfx_setter
   {if {exists game}
      {if $world
         {set $dx_this_var $world}
         DX_POST_PROC_HANDLER
      }
   }
   {set $dx_this_var $this}
   DX_POST_PROC_HANDLER
   {if $post_proc_needs_reset
      {set $post_proc_needs_reset FALSE}
      {rnd reset_postproc}
   }
}
{func
   dx_state_setup
   ($current_overshell_state $message)
   {unless $in_state ;the view code trick runs several times, so we need to make sure to only run the function once in the view
      {set $in_state TRUE} ;gate it off REMEMBER, turn this to false when running this code in a reset handle
      {overshell_list_creation}
      {overshell_list_chooser}
      {$current_list set circular $options_circular}
      {$current_list set_data $options_list_data}
      {set $previous_state $current_state} ;don't rely on this this is only useful for a big switch state with many entry points, aka texture states
      {set $current_state $current_overshell_state}
      {foreach $entry $dx_state_tracker
         {if {== {elem $entry 0} {basename $current_overshell_state}}
            {$current_list set_selected {elem {find $entry {sprint $current_overshell_state}} 1}}
         }
      }
      ;{if $message
      ;   {dx_overshell_msg $message}
      ;}
      {set $dx_tracked_changed FALSE}
      #ifdef HX_WII {choose_profile.lbl set text_token os_blnk} #endif
   }
}
{func
   dx_state_pos_tracker
   {set $in_state FALSE}
   {if_else $dx_tracked_changed
      {set $current_state_pos $dx_tracked_changed} ;probe the item we will be switching too
      {set $current_state_pos {$current_list selected_sym}} ;probe the current list position
   }
   {unless $dx_tracked_changed
      ;clean up the list for the state transition
      {switch $current_slots
         (1 {$current_list set_data (os_blnk)})
         (2 {$current_list set_data (os_blnk os_blnk)})
         (3 {$current_list set_data (os_blnk os_blnk os_blnk)})
         (4 {$current_list set_data (os_blnk os_blnk os_blnk os_blnk)})
         (5 {$current_list set_data (os_blnk os_blnk os_blnk os_blnk os_blnk)})
         (6 {$current_list set_data (os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)})
         (7 {$current_list set_data (os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk os_blnk)})
      }
   }
   ;this is stupid but it works
   {foreach $entry $dx_state_tracker
      {if {== {elem $entry 0} {basename $current_state}} ;first check if we have the state tracked already
         {remove_elem {find $dx_state_tracker $current_state} {elem {find $dx_state_tracker $current_state} 1}} ;removed the previously tracked list position
         {push_back {find $dx_state_tracker $current_state} $current_state_pos} ;add in the new list position
      }
   }

   {foreach $entry $dx_state_tracker
      {if {!= {elem $entry 0} {basename $current_state}} ;check if the state isnt in the list
         {set $pushtime_guitar TRUE} ;get ready to push it
      }
   }
   {foreach $entry $dx_state_tracker
      {if {== {elem $entry 0} {basename $current_state}} ;check the list again, and if it is in the list
         {set $pushtime_guitar FALSE} ;dont push it
      }
   }
   {if $pushtime_guitar ;if we need to push
      {push_back $dx_state_tracker ($current_state $current_state_pos)} ;push_back a new state into the array
   }

   {foreach $entry $dx_state_tracker
      {if {!= {elem $entry 0} {basename $current_state}} ;check if the state isnt in the list
         {set $pushtime_drum TRUE} ;get ready to push it
      }
   }
   {foreach $entry $dx_state_tracker
      {if {== {elem $entry 0} {basename $current_state}} ;check the list again, and if it is in the list
         {set $pushtime_drum FALSE} ;dont push it
      }
   }
   {if $pushtime_drum ;if we need to push
      {push_back $dx_state_tracker ($current_state $current_state_pos)} ;push_back a new state into the array
   }
   
   {foreach $entry $dx_state_tracker
      {if {!= {elem $entry 0} {basename $current_state}} ;check if the state isnt in the list
         {set $pushtime_bass TRUE} ;get ready to push it
      }
   }
   {foreach $entry $dx_state_tracker
      {if {== {elem $entry 0} {basename $current_state}} ;check the list again, and if it is in the list
         {set $pushtime_bass FALSE} ;dont push it
      }
   }
   {if $pushtime_bass ;if we need to push
      {push_back $dx_state_tracker ($current_state $current_state_pos)} ;push_back a new state into the array
   }
   
   {foreach $entry $dx_state_tracker
      {if {!= {elem $entry 0} {basename $current_state}} ;check if the state isnt in the list
         {set $pushtime_keys TRUE} ;get ready to push it
      }
   }
   {foreach $entry $dx_state_tracker
      {if {== {elem $entry 0} {basename $current_state}} ;check the list again, and if it is in the list
         {set $pushtime_keys FALSE} ;dont push it
      }
   }
   {if $pushtime_keys ;if we need to push
      {push_back $dx_state_tracker ($current_state $current_state_pos)} ;push_back a new state into the array
   }

   {set $dx_state_tracker {array $dx_state_tracker}} ;re read the array so the vars enumerate and the array becomes static
   {$current_list set circular FALSE}
   {set $in_state FALSE}
   ;{dx_log_writer TRUE {array $dx_state_tracker}}
}
{func
   overshell_list_chooser
   {switch $current_slots
      (1 {do {set $current_list confirm_action.lst}})
      (2 {do {set $current_list options_end_game.lst}})
      (3 {do {set $current_list options_extras.lst}})
      (4 {do {set $current_list #ifdef HX_WII online_options.lst #else online_options.lst #endif}})
      (5 {do {set $current_list #ifdef HX_WII options_audio.lst #else options.lst #endif}})
      (6 {do {set $current_list #ifdef HX_WII profiles_wii.lst #else options_audio.lst #endif}})
      (7 {do {set $current_list game_options.lst}})
   }
   {$current_list set circular $options_circular}
   {$current_list set display_num $current_slots}
   {$current_list set max_display $current_slots}
   {$current_list set scroll_past_max_display FALSE}
   {$current_list set scroll_time 0}
   {$current_list set_data $options_list_data}
}
{func
   overshell_view_chooser
   {switch $current_slots
      (1 confirm_action)
      (2 options_end_game)
      (3 options_extras)
      (4 #ifdef HX_WII online_options #else online_options #endif)
      (5 #ifdef HX_WII options_audio #else options #endif)
      (6 #ifdef HX_WII choose_profile_wii #else options_audio #endif)
      (7 game_options)
   }
}
{func
   overshell_list_creation
   {$this iterate CheckboxDisplay $c {$c set checked FALSE}}
   {set $num_of_slots 0}
   {foreach $entry $options
      {set $num_of_slots {+ $num_of_slots 1}}
   }
   {if_else {>= $num_of_slots 9}
      {set $options_circular TRUE}
      {set $options_circular FALSE}
   }
   {if {>= $num_of_slots 6}
      {set $num_of_slots 6}
   }
   {set $current_slots $num_of_slots}
   {unless {$this in_game} ;in game overshell does not need to account for same slot size animation transitions
      {if {== $current_slots $previous_num_slot}
         {if_else {< $current_slots 6}
            {set $num_of_slots {+ $num_of_slots 1}}
            {set $num_of_slots {- $num_of_slots 1}}
         }
      }
      {set $previous_num_slot $num_of_slots}
      {set $current_slots $num_of_slots}
   }
   $options
   {set $options_list_data {array $options}}
}
{func
   dx_overshell_msg
   ($message)
   ;opens player message panel on current player
   {if {! {session is_in_game}}
      {{overshell_player_message find show.trg} trigger}
      {overshell_player_message set_showing TRUE}
      {set $dx_no_message_sound TRUE} ;prevents message sound from playing in menus
      ($this setup_message_text $message)
   }
}
{func
   dx_passive_messenger
   ($message)
   {passive_messages_panel queue_message $message}
}
{func
   dx_check_for_dupe ; function to allow 5L/Pro instruments together but still block same parts from being selected
   ($slot) ; current slot number of the user
   {do
      {set $selected_part ; grabs the currently selected part of the user
         {switch $slot
            (0 $default_slot0)
            (1 $default_slot1)
            (2 $default_slot2)
            (3 $default_slot3)
         }
      }
      (set $dupe_allowed TRUE) ; allows dupe TRUE by default, any check below will set it to FALSE
      {switch $selected_part
         ((overshell_drums overshell_drums_pro) {set $dupe_allowed FALSE}) ; don't allow drums/drums_pro together, crashes game
         (overshell_guitar
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackGuitar} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
         (overshell_real_guitar
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackRealGuitar} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
         (overshell_bass
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackBass} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
         (overshell_real_bass
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackRealBass} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
         (overshell_keys
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackKeys} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
         (overshell_real_keys
            {user_mgr foreach_user $user
               {unless {== {$user get_slot_num} $slot} ; don't compare user against themself
                  {if {== {$user get_track_type} kTrackRealKeys} {set $dupe_allowed FALSE}} ; block dupe if another player already has this part
               }
            }
         )
      }
      $dupe_allowed ; returns dupe TRUE/FALSE check back to slot_states
   }
}
{func dx_print_objects
   {if_else {$this in_game}
      {do
         ($focus_panel {get_track_panel})
         {set $objArray {array ({sprintf "List of objects" })}}
         {{{get_track_panel} loaded_dir} iterate Object $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
         #ifndef HX_WII
         {write_file DX_OBJECTS_PATH $objArray}
         #endif
      }
      {ui foreach_screen $screen
         {do
            ($focus_panel {$screen focus_panel})
            {set $objArray {array ({sprintf "List of objects" })}}
            {{$focus_panel loaded_dir} iterate Object $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
            #ifndef HX_WII
            {write_file DX_OBJECTS_PATH $objArray}
            #endif
         }
      }
   }
}

{func dx_mtv_time_remaining_handler_old ;made this a function because a macro can't expand within itself, jnack's version that uses beats
   {if $dx_time_remaining
      {set $dx_song_length {+ $dx_final_note 2}}
      {set $dx_current_progress CURRENTBEAT}
      {set $dx_time_total {int {beat_to_seconds $dx_final_note}}}
      {set $dx_time_remaining_counter {int {beat_to_seconds {- $dx_song_length $dx_current_progress}}}}
      {set $dx_timer_total_minutes {int {/ $dx_time_total 60}}}
      {set $dx_timer_minutes {int {/ $dx_time_remaining_counter 60}}}
      {set $dx_timer_total_seconds {int {- $dx_time_total {* $dx_timer_total_minutes 60}}}}
      {set $dx_timer_seconds {int {- $dx_time_remaining_counter {* $dx_timer_minutes 60}}}}
      {if {< $dx_timer_seconds 0} {set $dx_timer_seconds 0}}
      {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprint $dx_timer_minutes ":" {sprintf "%02d" $dx_timer_seconds} "/" $dx_timer_total_minutes ":" {sprintf "%02d" $dx_timer_total_seconds}}}
      {script_task
         kTaskSeconds
         (delay 0.5)
         (script {dx_mtv_time_remaining_handler_old})
      }
      ;{{{gamemode get track_panel} find mtv_overlay} mtv_formatter} ;refresh the mtv overlay
   }
}

{func dx_mtv_time_remaining_handler
   {if $dx_time_remaining
      {set $dx_song_length {+ $dx_final_note 2}}
      {set $dx_get_song_ms {beatmatch get_song_ms}}
      {set $dx_current_progress {int {/ $dx_get_song_ms 1000}}}
      {set $dx_time_total {int {beat_to_seconds $dx_final_note}}}
      {set $dx_time_remaining_counter {int {- {beat_to_seconds $dx_song_length} $dx_current_progress}}}
;      {set $dx_time_remaining_counter {int {beat_to_seconds {- $dx_song_length $dx_current_progress}}}}
      {set $dx_timer_total_minutes {int {/ $dx_time_total 60}}}
      {set $dx_timer_minutes {int {/ $dx_time_remaining_counter 60}}}
      {set $dx_timer_total_seconds {int {- $dx_time_total {* $dx_timer_total_minutes 60}}}}
      {set $dx_timer_seconds {int {- $dx_time_remaining_counter {* $dx_timer_minutes 60}}}}
      {if {< $dx_timer_seconds 0} {set $dx_timer_seconds 0}}
      {if_else $dx_time_remain_dbg
         {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d\nDBG: %.3f / %d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds {- $dx_time_total {/ $dx_get_song_ms 1000}} $dx_time_total}} ;include debug line
         {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds}} ;don't include debug line
      }
      {script_task
         kTaskUISeconds
         (delay 0.067)
         (script {dx_mtv_time_remaining_handler})
      }
      ;{{{gamemode get track_panel} find mtv_overlay} mtv_formatter} ;refresh the mtv overlay
   }
}
