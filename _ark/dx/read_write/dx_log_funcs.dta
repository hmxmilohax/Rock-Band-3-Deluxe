#ifndef HX_WII
{func dx_print_gamemode
   ;{dx_log_writer info {sprint "func: dx_print_gamemode"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_print_gamemode - time: %.4fms"
   ;      {time
            {if_else {exists gamemode}
               {do
                  {if {gamemode in_mode init} {set $dx_gamemode init}}
                  {if {gamemode in_mode campaign} {set $dx_gamemode campaign}}
                  {if {gamemode in_mode defaults} {set $dx_gamemode defaults}}
                  {if {gamemode in_mode tour} {set $dx_gamemode tour}}
                  {if {gamemode in_mode qp_career_songinfo} {set $dx_gamemode qp_career_songinfo}}
                  {if {gamemode in_mode qp_party_shuffle} {set $dx_gamemode qp_party_shuffle}}
                  {if {gamemode in_mode practice} {set $dx_gamemode practice}}
                  {if {gamemode in_mode qp_coop} {set $dx_gamemode qp_coop}}
                  {if {gamemode in_mode party_shuffle} {set $dx_gamemode party_shuffle}}
                  {if {gamemode in_mode qp_practice} {set $dx_gamemode qp_practice}}
                  {if {gamemode in_mode pro_song_lessons_keyboard} {set $dx_gamemode pro_song_lessons_keyboard}}
                  {if {gamemode in_mode pro_song_lessons_real_guitar} {set $dx_gamemode pro_song_lessons_real_guitar}}
                  {if {gamemode in_mode pro_song_lessons_real_bass} {set $dx_gamemode pro_song_lessons_real_bass}}
                  {if {gamemode in_mode drum_freestyle} {set $dx_gamemode drum_freestyle}}
                  {if {gamemode in_mode trainer_drums} {set $dx_gamemode trainer_drums}}
                  {if {gamemode in_mode trainer_pro_drums} {set $dx_gamemode trainer_pro_drums}}
                  {if {gamemode in_mode trainer_real_guitar} {set $dx_gamemode trainer_real_guitar}}
                  {if {gamemode in_mode trainer_pro_keyboard} {set $dx_gamemode trainer_pro_keyboard}}
                  {if {gamemode in_mode trainer} {set $dx_gamemode trainer}}
                  #ifdef HX_XBOX {if {gamemode in_mode audition} {set $dx_gamemode audition}} #endif
               }
               {set $dx_gamemode none}
            }
   ;      }
   ;   }
   ;}
}
#define DX_LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/log.dta" #endif
   #ifdef HX_WII "log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/log.dta" #endif
)
#define DX_LAST_LOG_FILE_PATH
(
   #ifdef HX_XBOX "GAME:/last_log.dta" #endif
   #ifdef HX_WII "last_log.dta" #endif
   #ifdef HX_PS3 "GD:/dev_hdd0/game/BLUS30463/USRDIR/last_log.dta" #endif
)
#define DX_LOG_CLEAR
(
   {if {file_exists DX_LOG_FILE_PATH}
      {write_file DX_LAST_LOG_FILE_PATH {read_file DX_LOG_FILE_PATH}}
      {set $dx_log_reader ("start of log")}
      {write_file DX_LOG_FILE_PATH {array $dx_log_reader}}
   }
)
#ifdef DX_LEGACY_LOG
{func
   dx_log_writer
   ($loglevel $dx_log_writer)
   {if {|| $dx_logging_essential $dx_logging_default $dx_logging_info $dx_logging_insane $dx_logging_beatmatch $dx_logging_countdown}
      {do
         {dx_print_gamemode}
         {dx_print_current_panel}
         #ifndef RB3E
         {if_else {file_exists DX_LOG_FILE_PATH}
            {set $dx_log_reader {array $dx_log_reader}}
            {set $dx_log_reader ("start of log")}
         }
         {if
            {||
               {&& $dx_logging_essential {> {size $dx_log_reader} 75}}
               {&& $dx_logging_default {> {size $dx_log_reader} 75}}
               {&& $dx_logging_info {> {size $dx_log_reader} 150}}
               {&& $dx_logging_insane {> {size $dx_log_reader} 150}}
               {&& $dx_logging_beatmatch {> {size $dx_log_reader} 350}}
               {&& $dx_logging_countdown {> {size $dx_log_reader} 350}}
            }
            {push_back $dx_log_reader "Log too big, starting new log."}
            {set $prev_dx_log_reader {array $dx_log_reader}}
            {write_file DX_LAST_LOG_FILE_PATH $dx_log_reader}
            {set $dx_log_counter 0}
            {set $dx_log_reader ({sprint "Log reset. Number of songs completed this session: " $dx_num_songs_this_session})}
         }
         #endif
         {if
            {||
                {&& {== $loglevel essential} $dx_logging_essential}
                {&& {== $loglevel default} $dx_logging_default}
                {&& {== $loglevel info} $dx_logging_info}
                {&& {== $loglevel insane} $dx_logging_insane}
                {&& {== $loglevel beatmatch} $dx_logging_beatmatch}
                {&& {== $loglevel countdown} $dx_logging_countdown}
            }
            #ifdef RB3E
            {print_debug {sprint $dx_log_writer  " - Current Panel: " $dx_current_panel " - Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode {dx_uptime}}}
            #else
            {push_back $dx_log_reader {sprint $dx_log_writer " - Current Panel: " $dx_current_panel " - Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode {dx_uptime}}}
            {write_file DX_LOG_FILE_PATH
               {array
                  $dx_log_reader
               }
            }
            #endif
         }
      }
   }
}
#else
{func
   dx_log_writer
   ($loglevel $dx_log_writer)
   kDataUnhandled
}
#endif
#endif
#ifdef HX_WII
{func
   dx_log_writer
   ($loglevel $dx_log_writer)
   {if
      {||
          {&& {== $loglevel essential} $dx_logging_essential}
          {&& {== $loglevel default} $dx_logging_default}
          {&& {== $loglevel info} $dx_logging_info}
          {&& {== $loglevel insane} $dx_logging_insane}
          {&& {== $loglevel beatmatch} $dx_logging_beatmatch}
          {&& {== $loglevel countdown} $dx_logging_countdown}
      }
      {notify {sprint $dx_log_writer}}
   }
}
#endif
{func
   dx_passive_messenger
   ($message)
   {passive_messages_panel queue_message $message}
}
{func
   dx_passive_messenger_symbol
   ($message)
   {passive_messages_panel queue_message {symbol $message}}
}
{func
   dx_modal_messenger
   ($message)
   {ui_event_mgr trigger_event error_message
      (dummy init $message)
      {ui pop_screen}
   }
}
{func
   dx_modal_messenger_symbol
   ($message)
   {ui_event_mgr trigger_event error_message
      (dummy init {symbol $message})
      {ui pop_screen}
   }
}
;usage: {dx_ms_to_time_str $ms $colon}
;       $ms is an integer representing the number of milliseconds
;       $colon is a bool indicating whether to do "XX:YY" formatting (TRUE) or "XXm XXs" formatting (FALSE)
{func
   dx_ms_to_time_str
   ($ms $colon)
   {cond
      ({< $ms 3600000} ;if less than one hour, only display minutes and seconds
         {if_else $colon
            {sprintf "%d:%02d"
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}
            }
            {sprintf "%dm %ds"
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}
            }
         }
      )
      ({< $ms 86400000} ;if less than one day, only display hours, minutes, and seconds
         {if_else $colon
            {sprintf "%d:%02d:%02d"
               {int {mod {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}
            }
            {sprintf "%dh %dm %ds"
               {int {mod {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}}
         }
      )
      ({>= $ms 86400000} ;if equal to or more than one day, display days hours, minutes, and seconds
         {if_else $colon
            {sprintf "%d:%02d:%02d:%02d"
               {int {/ {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}
            }
            {sprintf "%dd %dh %dm %ds"
               {int {/ {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ {/ $ms 1000.0} 60} 60} 24}}
               {int {mod {/ {/ $ms 1000.0} 60} 60}}
               {int {mod {/ $ms 1000.0} 60}}}
         }
      )
   }
}

{func
   dx_uptime_onscreen
   {dx_passive_messenger_symbol {sprintf "RB3DX Uptime\n%s" {dx_ms_to_time_str {system_ms} FALSE}}}
   {dx_log_writer default {sprintf "RB3DX Uptime: %s" {dx_ms_to_time_str {system_ms} FALSE}}}
}
{func
   dx_uptime
   {sprintf " - Uptime: %s" {dx_ms_to_time_str {system_ms} FALSE}}
}
;usage: {dx_log_objs_type $panel $type $suffix}
;       $panel is a symbol representing the panel you wish to dump the object list from
;       $type is a symbol representing the type of object to filter the list to
;       $suffix is a string containing a suffix to be added to the filename, or "" for no suffix
{func dx_log_objs_type
   ($obj $type $suffix)
   ;{dx_log_writer info {sprint "func: dx_log_objs_type"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_log_objs_type - time: %.4fms"
   ;      {time
            {do
               {set $objArray {array ({sprintf "List of %s in %s" $type $obj})}}
;               {dx_log_writer default {sprintf "Iterating through %s and fetching list of objects of type %s..." $obj $type}}
               {{$obj loaded_dir} iterate $type $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
               {if_else $suffix
                  {do
;                     {dx_log_writer default {sprintf "Writing file to %s-%s-%s.dta..." $obj $type $suffix}}
                     #ifdef HX_PS3
                     {write_file {sprintf "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/%s-%s-%s.dta" $obj $type $suffix} $objArray}
                     #endif
                     #ifdef HX_XBOX
                     {write_file {sprintf "GAME:/objects/%s-%s-%s.dta" $obj $type $suffix}}
                     #endif
                  }
                  {do
;                     {dx_log_writer default {sprintf "Writing file to %s-%s.dta..." $obj $type}}
                     #ifdef HX_PS3
                     {write_file {sprintf "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/%s-%s.dta" $obj $suffix} $objArray}
                     #endif
                     #ifdef HX_XBOX
                     {write_file {sprintf "GAME:/objects/%s-%s.dta" $obj $suffix} $objArray}
                     #endif
                  }
               }
            }
   ;      }
   ;   }
   ;}
}

;usage: {dx_log_objs $panel $suffix}
;       $panel is a symbol representing the panel you wish to dump the object list from
;       $suffix is a string containing a suffix to be added to the filename, or "" for no suffix
{func dx_log_objs
   ($obj $suffix)
   ;{dx_log_writer info {sprint "func: dx_log_objs" "Args - " $obj ", " $suffix}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_log_objs - time: %.4fms"
   ;      {time
            {do
               ($objsize {size $obj})
               {set $objArray {array ({sprintf "List of %d Objects in %s" $objsize $obj})}}
;               {dx_log_writer default {sprintf "Iterating through %s and fetching list of objects..." $obj}}
               {{$obj loaded_dir} iterate Object $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
               {if_else $suffix
                  {do
;                     {dx_log_writer default {sprintf "Writing file to %s-Object-%s.dta..." $obj $suffix}}
                     #ifdef HX_PS3
                     {write_file {sprintf "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/%s-Object-%s.dta" $obj $suffix}
                     $objArray}
                     #endif
                     #ifdef HX_XBOX
                     {write_file {sprintf "GAME:/objects/%s-Object-%s.dta" $obj $suffix} $objArray}
                     #endif
                  }
                  {do
;                     {dx_log_writer default {sprintf "Writing file to %s-Object.dta..." $obj}}
                     #ifdef HX_PS3
                     {write_file {sprintf "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/%s-Object.dta" $obj} $objArray}
                     #endif
                     #ifdef HX_XBOX
                     {write_file {sprintf "GAME:/objects/%s-Object.dta" $obj} $objArray}
                     #endif
                  }
               }
            }
   ;      }
   ;   }
   ;}
}
{func dx_print_objects
   ;{dx_log_writer info {sprint "func: dx_print_objects"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_print_objects - time: %.4fms"
   ;      {time
            {if_else {session is_in_game}
               {do
                  ($focus_panel {get_track_panel})
                  {set $objArray {array ({sprintf "List of objects" })}}
                  {{{get_track_panel} loaded_dir} iterate Object $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
                  {write_file DX_OBJECTS_FILE_PATH $objArray}
               }
               {ui foreach_screen $screen
                  {do
                     ($focus_panel {$screen focus_panel})
                     {set $objArray {array ({sprintf "List of objects" })}}
                     {{$focus_panel loaded_dir} iterate Object $p {push_back $objArray {sprintf "%s : %s" {$p name} {$p class_name}}}}
                     {write_file DX_OBJECTS_FILE_PATH $objArray}
                  }
               }
            }
   ;      }
   ;   }
   ;}
}
{func
   dx_print_current_panel
   {ui
      foreach_screen
      $screen
      {unless
         {== $screen panel_select_screen}
         {$screen
            foreach_panel
            $panel
            {if {$panel loaded_dir}
               {set $dx_current_panel
                  {path_name
                     {$panel loaded_dir}
                  }
               }
            }
         }
      }
   }
}
{func
   print_hmx_panel
   ;{dx_log_writer info {sprint "func: dx_print_objects"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_print_objects - time: %.4fms"
   ;      {time
            {do
               ($list_items
                  ())
               ($list_item_strings
                  ())
               ($resources
                  ())
               {resize $list_items 0}
               {resize $list_item_strings 0}
               {resize $resources 0}
               {ui
                  foreach_screen
                  $screen
                  {unless
                     {== $screen panel_select_screen}
                     {$screen
                        foreach_panel
                        $panel
                        {if
                           {&&
                              {$panel loaded_dir}
                              {!
                                 {find_elem
                                    $list_items
                                    {$panel loaded_dir}}}}
                           {push_back
                              $list_items
                              {$panel loaded_dir}}
                           {push_back
                              $list_item_strings
                              {path_name
                                 {$panel loaded_dir}
                              }
                           }
                        }
                     }
                  }
               }
               {foreach
                  $dir
                  $list_items
                  {$dir
                     iterate
                     Object
                     $obj
                     {do
                        ($class
                           {$obj class_name})
                        ($type
                           {$obj get_type})
                        ($resource '')
                        {if
                           {&& $class $type}
                           {set
                              $resource
                              {find_exists $syscfg objects $class types $type resource_file}}
                           {if
                              $resource
                              {set
                                 $resource
                                 {sprintf
                                    "ui/%s"
                                    {elem $resource 1}
                                 }
                              }
                           }
                        }
                        {if
                           {&&
                              $resource
                              {!
                                 {find_elem $resources $resource}}}
                           {push_back $resources $resource}
                           {push_back $list_item_strings $resource}
                        }
                     }
                  }
               }
               {set
                  $num_panel_dirs
                  {size
                     $list_items}}
               {insert_elems
                  $list_items
                  $num_panel_dirs
                  $resources}
               {dx_log_writer info $list_item_strings}
            }
   ;      }
   ;   }
   ;}
}