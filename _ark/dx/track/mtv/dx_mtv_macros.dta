;welcome to jnacks hell
;inside the ark
#define SONGPATH_DISC
(
   {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../gen/songs.dtb"} ;if we loaded a song from on disc, this is the location of the loaded songs.dta
)
;a dlc dta
#define SONGPATH_DLC
(
   {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../songs.dta"} ;if we loaded a dlc song, this is the location of the loaded songs.dta
)
;on disc update
#define SONGPATH_UPDATE
(
   {sprint {song_mgr song_path {meta_performer song}} "/../../../gen/missing_song_data_updates.dtb"} ;if we loaded a dlc song that has an on disc update
)
#define SONGPATH_RAW_DTB
(
   {sprint "dx/song_dta_collection/gen/" {meta_performer song} ".dtb"}
)
#define DX_MTV_BPM_HANDLER
(
   {if {&& $dx_bpm_report $dx_mtvup}
      {set $dx_tmp {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}}
      {set $dx_bpm_counter {* {* 60 {/ 1 {- {beat_to_seconds {+ $dx_tmp 1}} {beat_to_seconds $dx_tmp}}}} $speedmod}}
      {dx_mtv_setup_text}
   }
)
#define DX_MTV_SET_POS_HANDLER
(
   (dx_set_mtv_pos
      {if_else {modifier_mgr is_modifier_active mod_fakejuke} ;check if fake jukebox mode is enabled
         {Group.grp set_local_pos 0 -30 -136} ;if it is, hard set the location of the mtv overlay for style
         {Group.grp set_local_pos $mtvpos_0 $mtvpos_1 $mtvpos_2} ;otherwise put it in the custom location
      }
   )
)
#define MTV_DTA_PREPPER
(
   {dx_log_writer default {sprint "Attempting to read loaded song DTA."}}
   ;{unless $dx_readdtaonce
   ;   {set $dx_readdtaonce TRUE}
   ;   {set $dx_readadditionaldtaonce FALSE}
   ;   {set $theactualpath FALSE}
      ;{set $songdtareader {read_file SONGPATH_DLC}} ;load the dta into memory
      ;{if_else $theactualpath
      ;   {do
      ;      {if_else {== $theactualpath SONGPATH_UPDATE} ;check if this is an on disc update 
      ;         {if_else {file_exists SONGPATH_RAW_DTB} ;check for the raw dtb, should always be there
      ;            {do
      ;               {set $songdtareader {read_file SONGPATH_RAW_DTB}} ; read the raw dtb
      ;            }
      ;            {do
      ;               {set $dx_path_failed TRUE} ;failure (shouldnt happen)
      ;               {dx_log_writer default {sprint "Found DTA update path, but couldn't find raw dtb"}}
      ;            }
      ;         }
      ;         {set $songdtareader {read_file $theactualpath}} ;load the dta into memory
      ;      }
      ;      {dx_log_writer info {sprint "Found DTA path: " $theactualpath}}
      ;   }
      ;   {do
      ;      {set $dx_path_failed TRUE}
      ;      {dx_log_writer default {sprint "Unmapped DTA path: " {song_mgr song_file_path {meta_performer song} "/"}}}
      ;   }
      ;}
   ;}
)
#define DTA_ARRAY_READER
(
   {if {> {size $songdtareader} 0}
      {if {find_exists $songdtareader loading_phrase}
         {set $dx_loading_tip_var {elem {find $songdtareader loading_phrase} 1}}
      }
      {if {find_exists $songdtareader name}
         {set $namevar {elem {find $songdtareader name} 1}}
      }
      {if {find_exists $songdtareader artist}
         {set $artistvar {sprintf {localize dx_mtv_1} {elem {find $songdtareader artist} 1}}}
      }
      {if {find_exists $songdtareader year_released}
         {set $yearvar {elem {find $songdtareader year_released} 1}}
      }
      {if {find_exists $songdtareader album_name}
         {set $albumvar {elem {find $songdtareader album_name} 1}}
      }
      {if {find_exists $songdtareader game_origin}
         {set $sourcevar {elem {find $songdtareader game_origin} 1}}
      }
      {if {== $sourcevar rb1_dlc}
         {set $sourcevar dlc}
      }
      {if {find_exists $songdtareader genre}
         {set $genrevar {elem {find $songdtareader genre} 1}}
      }
      {if {find_exists $songdtareader sub_genre}
         {set $subgenrevar {elem {find $songdtareader sub_genre} 1}}
      }
      {if {find_exists $songdtareader master}
         {set $mastervar {elem {find $songdtareader master} 1}}
      }
      {if {find_exists $songdtareader author}
         {set $authorvar {elem {find $songdtareader author} 1}}
      }
      {if {find_exists $songdtareader strings_author}
         {set $stringsauthorvar {elem {find $songdtareader strings_author} 1}}
      }
      {if {find_exists $songdtareader keys_author}
         {set $keysauthorvar {elem {find $songdtareader keys_author} 1}}
      }
      {if {|| {find_exists $songdtareader song_key} {find_exists $songdtareader vocal_tonic_note}}
         {if {find_exists $songdtareader vocal_tonic_note}
            {set $dx_vocal_tonic_note_var {elem {find $songdtareader vocal_tonic_note} 1}}
         }
         {if {find_exists $songdtareader song_key} ;song_key will take priority over vocal_tonic_note if it exists
            {set $dx_vocal_tonic_note_var {elem {find $songdtareader song_key} 1}}
         }
         {if_else {find_exists $songdtareader song_tonality}
            {set $dx_song_tonality_var {elem {find $songdtareader song_tonality} 1}}
            {set $dx_song_tonality_var 0} ;default to major key if song_tonality is not defined
         }
         {if_else $dx_vocal_tonic_note_var
            {switch $dx_vocal_tonic_note_var
               (0 {set $dx_song_key_var "c"})
               (1 {set $dx_song_key_var "c_sharp"})
               (2 {set $dx_song_key_var "d"})
               (3 {set $dx_song_key_var "d_sharp"})
               (4 {set $dx_song_key_var "e"})
               (5 {set $dx_song_key_var "f"})
               (6 {set $dx_song_key_var "f_sharp"})
               (7 {set $dx_song_key_var "g"})
               (8 {set $dx_song_key_var "g_sharp"})
               (9 {set $dx_song_key_var "a"})
               (10 {set $dx_song_key_var "a_sharp"})
               (11 {set $dx_song_key_var "b"})
            }
            ; TODO: figure out why vocal_tonic_note 0 is not being read
            {set $dx_song_key_var "c"}
         }
         {if_else {== $dx_song_tonality_var 0}
            {set $dx_song_key_var {sprint $dx_song_key_var "_major"}}
            {set $dx_song_key_var {sprint $dx_song_key_var "_minor"}}
         }
      }
      {dx_rank_var_finder guitar 139 176 221 267 333 409}
      {dx_rank_var_finder drum 124 151 178 242 345 448}
      {dx_rank_var_finder bass 135 181 228 293 364 436}
      {dx_rank_var_finder vocals 132 175 218 279 353 427}
      {dx_rank_var_finder band 163 215 243 267 292 345}
      {dx_rank_var_finder keys 153 211 269 327 385 443}
      {dx_rank_var_finder real_keys 153 211 269 327 385 443}
      {dx_rank_var_finder real_guitar 150 205 264 323 382 442}
      {dx_rank_var_finder real_bass 150 208 267 325 384 442}
   }
)
#define MTV_DTA_READER
(
   {if $dx_author_finder_is_enabled
      {set $dx_path_failed FALSE}
      {set $tempreadarray ()}
      {resize $tempreadarray 0}
      {set $songdtareader ()}
      {resize $songdtareader 0}
      {set $filepath {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../songs.dta"}}
      {if_else {file_exists {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../songs.dta"}}
         {set $filepath {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../songs.dta"}} ;a dlc dta
          {if_else {file_exists {sprint {song_mgr song_path {symbol {meta_performer song}}} "/../../gen/songs.dtb"}}
            {set $filepath "songs/songs.dta"} ;on disc
            {set $dx_path_failed TRUE}
         }
      }
      {if {! $dx_path_failed}
         #ifdef HX_PS3 ; if we didnt find the above file path on ps3, its not on disc and we need to do stupid things for hardware
         {if {&& {!= $filepath "songs/songs.dta"} {! {file_exists $filepath}}}
            {set $packagename {sprint {song_mgr package_name {meta_performer song}}}}
            {if {has_substr $filepath BLUS30050}
               {set $ps3_base_path {sprint "GD:/dev_hdd0/game/BLUS30050/USRDIR/" $packagename "/songs/songs.dta"}}
            }
            {if {has_substr $filepath BLUS30147}
               {set $ps3_base_path {sprint "GD:/dev_hdd0/game/BLUS30147/USRDIR/" $packagename "/songs/songs.dta"}}
            }
            {if {has_substr $filepath BLUS30463}
               {set $ps3_base_path {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/" $packagename "/songs/songs.dta"}}
            }
            {if_else {file_exists $ps3_base_path}
               {set $filepath $ps3_base_path}
               {set $dx_path_failed TRUE}
            }
         }
         #endif
         #ifdef HX_WII ;on wii if your shortname does not match the folder name, you're fucked. fix your shit
         {if {&& {!= $filepath "songs/songs.dta"} {! {file_exists $filepath}}}
            {set $filepath {sprint {song_mgr song_path {symbol {meta_performer song}}}}}
            {set $dx_pathbefore {sprint "/" {meta_performer song} "/" {meta_performer song}}}
            {set $dx_pathafter {sprint "/" {meta_performer song} "/songs.dta"}}
            {search_replace $filepath $dx_pathbefore $dx_pathafter $filepath}
            {search_replace $filepath "_song/" "/" $filepath}
            ;{set $dx_songpath {sprint {tolower $dx_songpath}}}
         }
         #endif

         {if_else #ifdef HX_WII TRUE #else {|| {== $filepath "songs/songs.dta"} {file_exists $filepath}} #endif
            {set $songdtareader {read_file $filepath}}
            {set $dx_path_failed TRUE}
         }

         {if_else {> {size $songdtareader} 0}
            {foreach $entry $songdtareader
               {if {== {elem $entry 0} {symbol {meta_performer song}}}
                  {set $songdtareader $entry}
                  DTA_ARRAY_READER
               }
            }
            {set $dx_path_failed TRUE}
         }

         {set $songdtareader ()}
         {resize $songdtareader 0}
         {if {! $dx_path_failed}
            {if {find_exists $syscfg missing_song_data {symbol {meta_performer song}}}
               {set $songdtareader {find $syscfg missing_song_data {symbol {meta_performer song}}}}
               {if {> {size $songdtareader} 0}
                  DTA_ARRAY_READER
               }
            }
         }
      }
   }
)
#define DX_MTV_FORMATTER_HANDLER
(
   (mtv_formatter
      {dx_mtv_formatter reset} ; reset the formatted label to nothing first to prep for new data
      ;TODO this is awful
      {if {&& $artistvar $dx_artist_mtv_line}
         {if_else $mastervar ;check if this song is labelled as a cover or not
            {if_else {&& $dx_year_on_mtv $yearvar $dx_year_on_one_mtv_line}
               {dx_mtv_formatter {sprint $artistvar ", " $yearvar}}
               {dx_mtv_formatter $artistvar}
            }
            {if_else {&& $dx_year_on_mtv $yearvar $dx_year_on_one_mtv_line}
               {dx_mtv_formatter {sprint {localize store_famous_by} ": " $artistvar ", " $yearvar}}
               {dx_mtv_formatter {sprint {localize store_famous_by} ": " $artistvar}}
            }
         }
      }
      {if {|| {&& $dx_year_on_mtv $yearvar $dx_year_on_one_mtv_line {! $dx_artist_mtv_line}} {&& $dx_year_on_mtv $yearvar {! $dx_year_on_one_mtv_line}}}
         {dx_mtv_formatter {sprint $yearvar}}
      }
      {if {&& $dx_current_section $dx_section_mtv_line}
         {dx_mtv_formatter {sprint {localize section} ": " $dx_current_section}}
      }
      ;{dx_mtv_formatter {sprint "\n" {localize time_remaining} ": " $dx_timer_minutes ":" $dx_timer_seconds}}
      {if {&& $dx_album_mtv_line $albumvar}
         {dx_mtv_formatter {sprint $albumvar}}
      }
      {if {&& $dx_genre_mtv_line $genrevar}
         {dx_mtv_formatter {sprint {localize $genrevar}}}
      }
      {if {&& $dx_sub_genre_mtv_line $subgenrevar}
         {dx_mtv_formatter {sprint {localize $subgenrevar}}}
      }
      {if {&& $dx_game_origin_mtv_line $sourcevar}
         {dx_mtv_formatter {sprint {localize $sourcevar}}}
      }
      {if {&& $dx_author_mtv_line $authorvar}
         {dx_mtv_formatter {sprint {localize author} ": " $authorvar}}
      }
      {if {|| {== $real_bassplayeractive true} {== $real_guitarplayeractive true}}
         {if {&& $dx_author_mtv_line $stringsauthorvar}
            {dx_mtv_formatter {sprint ", " {localize strings_author} ": " $stringsauthorvar}}
         }
      }
      {if {|| {== $real_keysplayeractive true} {== $keysplayeractive true}}
         {if {&& $dx_author_mtv_line $keysauthorvar}
            {dx_mtv_formatter {sprint ", " {localize keys_author} ": " $keysauthorvar}}
         }
      }
      {if {&& $dx_song_key_mtv_line $dx_song_key_var}
         {dx_mtv_formatter {sprint {localize key_of} ": " {localize $dx_song_key_var}}}
      }
      {artist.lbl set fixed_length 1000}
      {artist.lbl set leading 0.9}
      {switch $dx_mtv_elements
         (0 {artist.lbl set height 100}) ;I dont know a better way to do this but we check how many elements are chosen by the user and fetch each of the elements from the created array manually depending on how many
         (1 {artist.lbl set height 200} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_1} {elem $dx_mtv_holder 0}}})
         (2 {artist.lbl set height 300} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_2} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1}}})
         (3 {artist.lbl set height 400} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_3} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2}}})
         (4 {artist.lbl set height 500} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_4} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3}}})
         (5 {artist.lbl set height 600} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_5} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4}}})
         (6 {artist.lbl set height 700} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_6} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5}}})
         (7 {artist.lbl set height 800} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_7} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6}}})
         (8 {artist.lbl set height 900} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_8} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6} {elem $dx_mtv_holder 7}}})
         (9 {artist.lbl set height 1000} {artist.lbl set_token_fmt {sprintf {localize dx_mtv_9} {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6} {elem $dx_mtv_holder 8} {elem $dx_mtv_holder 9}}})
      }
   )
)
#define MTV_MOD_WRITER_HANDLER
(
   (mtv_song_title_writer
      {set $dx_tmp ""}
      {set $dx_tmp2 ""}
      {if {modifier_mgr is_modifier_active mod_fastermode}
         {set $dx_tmp2 {sprint $dx_tmp2 {localize mod_fastermode} " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%) " }}
      }
      {if {modifier_mgr is_modifier_active mod_chmode}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "DRUNK MODE"}}
      }
      {if {modifier_mgr is_modifier_active mod_precision}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "PRECISION MODE"}}
      }
      {if {&& {modifier_mgr is_modifier_active mod_auto_play} {! {modifier_mgr is_modifier_active mod_fakejuke}}}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "AUTOPLAY"}}
      }
      {if $dx_bpm_report
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "BPM: " $dx_bpm_counter}}
      }
      {if {&& {!= $speedmod 1.0} {! {modifier_mgr is_modifier_active mod_fastermode}}}
         {set $dx_tmp {sprint $dx_tmp " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%)" }}
      }
      {if_else $dx_song_title_mtv_line
         {if {!= $dx_tmp2 ""}
            {set $dx_tmp {sprint $dx_tmp "\n" $dx_tmp2}}
         }
         {if {!= $dx_tmp2 ""}
            {set $dx_tmp {sprint $dx_tmp $dx_tmp2}}
         }
      }
      {if_else $dx_song_title_mtv_line
         {if_else {!= $dx_tmp ""}
            {song.lbl set_token_fmt {sprint {{song_mgr get_meta_data {meta_performer song}} title} $dx_tmp}}
            {song.lbl set_token_fmt {sprint {{song_mgr get_meta_data {meta_performer song}} title}}}
         }
         {if_else {!= $dx_tmp ""}
            {song.lbl set_token_fmt {sprint $dx_tmp}}
            {song.lbl set_token_fmt {sprint " "}}
         }
      }
   )
)
#define MTV_SONG_WRITER
(
   {if {modifier_mgr is_modifier_active mod_fakejuke} ;if fake jukebox mode is enabled
       {set $authorvar FALSE} ;just completely disregard the author so our next script lands in the correct spot
   }
   {unless $dx_hmxcheckedonce
      {set $dx_hmxcheckedonce TRUE}
      #ifndef HX_XBOX
      DX_CURRENT_SONG_TXT_WRITER
      DX_CURRENT_SONG_JSON_WRITER
      #endif
      ;TODO this is lousy
      ;{if_else $yearvar
      ;   {dx_log_writer default {sprint "Song Loaded: " $song_title " - " $artistvar ", " $yearvar " - Album: " $albumvar " - Genre: " $genrevar " - Source: " {localize $sourcevar} " - Authored By: " $authorvar " - Gamemode: " $dx_gamemode}}
      ;   {if_else $authorvar
      ;      {dx_log_writer default {sprint "Song Loaded: " $song_title " - " $artistvar " - Authored By: " $authorvar " - Gamemode: " $dx_gamemode}}
      ;      {if_else $artistvar
      ;         {dx_log_writer default {sprint "Song Loaded: " $song_title " - " $artistvar " - Gamemode: " $dx_gamemode}}
      ;         {dx_log_writer default {sprint "Song Loaded: " $song_title " - Gamemode: " $dx_gamemode}}
      ;      }
      ;   }
      ;}
   }
   {unless {&& $dx_bpm_report $dx_mtv_formatted_once} ;show bpm formats way too often to be formatted multiple times
      {set $dx_mtv_formatted_once TRUE}
      {$this mtv_formatter}
   }
)
#define MTV_WRITER_CHOOSER
(
   {if {! {gamemode in_mode trainer}}
      {if {&& $dx_author_finder_is_enabled {! $dx_path_failed}}
         {unless $dx_path_failed
            {do
               {unless $dx_mtv_dta_reader_once
                  {set $dx_mtv_dta_reader_once TRUE} ;no matter how many times this function gets called, we only need to read these dtas once because its very heavy
                  MTV_DTA_READER
               }
               {if
                  {&&
                     {! $artistvar}
                     {! $namevar}
                  }
                  {set $dx_path_failed TRUE}
               }
               ;{if {! $namevar} {set $namevar "No Name Found"}}
               ;{if {! $artistvar} {set $artistvar "No Artist Found"}}
               ;{if {! $yearvar} {set $yearvar "No Year Found"}}
               ;{if {! $albumvar} {set $albumvar "No Album Found"}}
               ;{if {! $genrevar} {set $genrevar "No Genre Found"}}
               ;{if {! $subgenrevar} {set $subgenrevar "No Sub Genre Found"}}
               ;{if {! $sourcevar} {set $sourcevar "No Source Found"}}
               ;{if {! $dx_song_key_var} {set $dx_song_key_var "No Song Key Found"}}
               {if {exists song.lbl}
                  {song.lbl set fixed_length 1000}
                  {$this mtv_song_title_writer}
               }
               {if {exists artist.lbl}
                  MTV_SONG_WRITER
               }
            }
         }
      }
      {if $dx_path_failed
         {unless $dx_author_finder_failed
            {set $dx_author_finder_failed TRUE}
            {dx_log_writer default {sprint "Author Finder Failed - Song Loaded: " $song_title}}
         }
         {if
            {exists song.lbl}
            {song.lbl set fixed_length 1000}
            {$this mtv_song_title_writer}
         }
         {if
            {exists artist.lbl}
            {artist.lbl set_artist_name_from_shortname $short_name}
         }
      }
   }
)
#define MTV_WRITER_NO_AUTHOR_FINDER
(
   {do
      {if
         {exists song.lbl}
         {song.lbl set fixed_length 1000}
         {$this mtv_song_title_writer}
      }
      {if
         {exists artist.lbl}
         {artist.lbl set_artist_name_from_shortname $short_name}
      }
   }
)