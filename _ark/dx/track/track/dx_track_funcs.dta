{func
   dx_track_bre_reset
   ;{dx_log_writer info {sprint "func: dx_track_bre_reset"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_track_bre_reset - time: %.4fms"
         {time
            {if {&& {modifier_mgr is_modifier_active mod_nobre} $imabigboy} ;check if we have no bre active, and we havent restarted already on this song
               {if {! $dx_already_restarted} ;cheap attempt to fix the "notes too quick bug" by restarting once automatically on initial song start, this will at least work in black bg
                  {do ;do
                     {set $imabigboy FALSE} ;tell the logic we have restarted once to switch to expert
                     {set $dx_already_restarted TRUE} ;also tell the logic we
                     {{{beatmatch active_player 0} get_user} set_difficulty kDifficultyExpert} ;since we have entered the track on easy, set the player to expert to enable no bre behavior
                     {game_restart} ;quick restart the song
                  }
               }
            }
         }
   ;   }
   ;}
}
; whether not to darken the highway of remote players
{func
   dx_dim_remote_players
   {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
      {unless {== {$player instrument} vocals}
         {set_this {find_obj DX_GEMTRACKDIR}}
         {if_else {{$player get_user} is_local}
            {network_local.trig trigger}
            {if_else $dx_dim_remote_players
               {network_remote.trig trigger}
               {network_local.trig trigger}
            }
         }
      }
   }
}
; each local player of a session will send their current instrument's track speed to online players
{func
   dx_apply_remote_track_speeds
   {unless {session_mgr is_local}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {if {{$player get_user} is_local}
            {switch {$player instrument}
               (guitar
                  {set $remote_trackspeed_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_guitar {',' $trackspeed_guitar}}) kNetReliable}}
               )
               (bass
                  {set $remote_trackspeed_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_bass {',' $trackspeed_bass}}) kNetReliable}}
               )
               (real_guitar
                  {set $remote_trackspeed_real_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_guitar {',' $trackspeed_real_guitar}}) kNetReliable}}
               )
               (real_bass
                  {set $remote_trackspeed_real_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_bass {',' $trackspeed_real_bass}}) kNetReliable}}
               )
               ((drum real_drum)
                  {set $remote_trackspeed_drum FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_drum {',' $trackspeed_drum}}) kNetReliable}}
               )
               (keys
                  {set $remote_trackspeed_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_keys {',' $trackspeed_keys}}) kNetReliable}}
               )
               (real_bass
                  {set $remote_trackspeed_real_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_keys {',' $trackspeed_real_keys}}) kNetReliable}}
               )
               (vocals kDataUnhandled) ;lol vox
            }
         }
      }
   }
}
{func
   dx_track_configurer
   {if {&& {session is_in_game} $dx_track_config_changed}
      {beatmatch foreach_active_player $player
         {unless {== {$player instrument} vocals}
            {set_this {find_obj DX_GEMTRACKDIR}}
            {$this set_pitch $dx_pitch}
            {$this set_fov $dx_fov}
            {$this set_cam_pos $dx_x_pos $dx_y_pos $dx_z_pos}
         }
      }
   }
}
; used to unhide tracks incase the user quit the last song mid-countdown
{func
   dx_reset_track_meshes
   {set $track_out_0 FALSE}
   {set $track_out_1 FALSE}
   {set $track_out_2 FALSE}
   {set $track_out_3 FALSE}
   {beatmatch foreach_active_player $player
      {unless {== {$player instrument} vocals}
         ;make sure to show the correct rails if the same slot was on a different instrument last song
         {{{find_obj DX_GEMTRACKDIR} find guitar_draw.grp} set showing {|| {== {$player instrument} guitar} {== {$player instrument} bass} {== {$player instrument} keys}}}
         {{{find_obj DX_GEMTRACKDIR} find drum_draw.grp} set showing {|| {== {$player instrument} drum} {== {$player instrument} real_drum}}}
         {{{find_obj DX_GEMTRACKDIR} find keyboard_draw.grp} set showing {== {$player instrument} real_keys}}
         {{{{find_obj DX_GEMTRACKDIR} get star_power_meter} find power_meter.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find draw.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find streak_meter.grp} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find peak_state_sm_mesh.mesh} set showing TRUE}
         {{{{find_obj DX_GEMTRACKDIR} get streak_meter} find peak_state_sm_mesh_counter.mesh} set showing TRUE}
         {{{find_obj DX_GEMTRACKDIR} find overdrive_plane.mesh} set showing TRUE}
         {{{find_obj DX_GEMTRACKDIR} find rig.grp} set_local_pos 0 0 0}
      }
   }
}
{func dx_check_for_high_score
   ($enabled)
   {if $enabled
      {cond
         ($dx_reported_highscore kDataUnhandled) ;do nothing if highscore has been seen or no highscore
         ({|| {> $dx_num_active_instruments 1} {< $current_solo_highscore 10}} kDataUnhandled) ;do nothing if multiplayer or a low highscore
         ({gamemode in_mode qp_coop} ;only run in single player quickplay
            {beatmatch foreach_active_player $player
               {if {&& {{$player get_user} is_local} {> {$player score} $current_solo_highscore}}
                  {set $dx_reported_highscore TRUE}
                  {set_this {coop_track_panel find tracker_broadcast_display}}
                  {$this set_showing TRUE}
                  {band_message.lbl set_showing TRUE}
                  {band_message.lbl set markdown TRUE}
                  {band_message.lbl set alt_style_enabled TRUE}
                  {band_message.lbl set alt_font_resource_name instrument_icons_small}
                  {band_message.lbl set alt_z_offset 0.08}
                  {set $pickadisplay {random_int 0 4}}
                  {switch $pickadisplay
                     (1 {set $picked_display kTrackerChallengeType_Streak})
                     (2 {set $picked_display kTrackerChallengeType_Accuracy})
                     (3 {set $picked_display kTrackerChallengeType_Overdrive})
                     {set $picked_display kTrackerChallengeType_Streak}
                  }
                  {$this set_challenge_type $picked_display}
                  {$this set_display_type kBroadcastTrackerDisplay_BandMessage}
                  {$this show_brief_band_message {sprint {localize {sprint "inst_icon_" {$player instrument}}} {localize dx_highscore_best}}}
               }
            }
         )
         kDataUnhandled
      }
   }
}