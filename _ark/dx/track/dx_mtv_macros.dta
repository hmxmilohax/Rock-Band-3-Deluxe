;welcome to jnacks hell
;inside the ark
#define SONGPATH
(
   {song_mgr song_file_path {meta_performer song} "/../../gen/songs.dtb"} ;if we loaded a song from on disc, this is the location of the loaded songs.dta
)
;a dlc dta
#define SONGPATH2
(
   {song_mgr song_file_path {meta_performer song} "/../../songs.dta"} ;if we loaded a dlc song, this is the location of the loaded songs.dta
)
;on disc update
#define SONGPATH3
(
   {song_mgr song_file_path {meta_performer song} "/../../../gen/missing_song_data_updates.dtb"} ;if we loaded a dlc song that has an on disc update
)
#define DX_MTV_SETUP_TEXT
(
   {{{gamemode get track_panel} find mtv_overlay} setup_text} ;refresh the mtv overlay
)
#define DX_MTV_BPM_HANDLER
(
   {if {&& {modifier_mgr is_modifier_active mod_dx_showbpm} $dx_mtvup}
      {set $dx_tmp {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}}
      {set $dx_bpm_counter {* {* 60 {/ 1 {- {beat_to_seconds {+ $dx_tmp 1}} {beat_to_seconds $dx_tmp}}}} $speedmod}}
      DX_MTV_SETUP_TEXT
   }
)
#define DX_MTV_SET_POS_HANDLER
(
   (dx_set_mtv_pos
      {if_else {modifier_mgr is_modifier_active mod_fakejuke} ;check if fake jukebox mode is enabled
         {Group.grp set_local_pos 0 -30 -136} ;if it is, hard set the location of the mtv overlay for style
         {Group.grp set_local_pos $mtvpos_0 $mtvpos_1 $mtvpos_2} ;otherwise put it in the custom location
      }
   )
)
#define DX_RANK_VAR_HANDLER
(
   {foreach $entry $rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {elem {find $entry guitar} 1}
            {set $actual_guitarrankvar {elem {find $entry guitar} 1}}
         }
      }
      {cond
         ({< $actual_guitarrankvar 139}
            {set $guitarrankvar 0})
         ({&& {>= $actual_guitarrankvar 139} {< $actual_guitarrankvar 176}}
            {set $guitarrankvar 1})
         ({&& {>= $actual_guitarrankvar 176} {< $actual_guitarrankvar 221}}
            {set $guitarrankvar 2})
         ({&& {>= $actual_guitarrankvar 221} {< $actual_guitarrankvar 267}}
            {set $guitarrankvar 3})
         ({&& {>= $actual_guitarrankvar 267} {< $actual_guitarrankvar 333}}
            {set $guitarrankvar 4})
         ({&& {>= $actual_guitarrankvar 333} {< $actual_guitarrankvar 409}}
            {set $guitarrankvar 5})
         ({>= $actual_guitarrankvar 409}
            {set $guitarrankvar 6})
      }
   }
   {foreach $entry $rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {elem {find $entry drum} 1}
            {set $actual_drumrankvar {elem {find $entry drum} 1}}
         }
      }
      {cond
         ({< $actual_drumrankvar 124}
            {set $drumrankvar 0})
         ({&& {>= $actual_drumrankvar 124} {< $actual_drumrankvar 151}}
            {set $drumrankvar 1})
         ({&& {>= $actual_drumrankvar 151} {< $actual_drumrankvar 178}}
            {set $drumrankvar 2})
         ({&& {>= $actual_drumrankvar 178} {< $actual_drumrankvar 242}}
            {set $drumrankvar 3})
         ({&& {>= $actual_drumrankvar 242} {< $actual_drumrankvar 345}}
            {set $drumrankvar 4})
         ({&& {>= $actual_drumrankvar 345} {< $actual_drumrankvar 448}}
            {set $drumrankvar 5})
         ({>= $actual_drumrankvar 448}
            {set $drumrankvar 6})
      }
   }
   {foreach $entry $rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {elem {find $entry bass} 1}
            {set $actual_bassrankvar {elem {find $entry bass} 1}}
         }
      }
      {cond
         ({< $actual_bassrankvar 135}
            {set $bassrankvar 0})
         ({&& {>= $actual_bassrankvar 135} {< $actual_bassrankvar 181}}
            {set $bassrankvar 1})
         ({&& {>= $actual_bassrankvar 181} {< $actual_bassrankvar 228}}
            {set $bassrankvar 2})
         ({&& {>= $actual_bassrankvar 228} {< $actual_bassrankvar 293}}
            {set $bassrankvar 3})
         ({&& {>= $actual_bassrankvar 293} {< $actual_bassrankvar 364}}
            {set $bassrankvar 4})
         ({&& {>= $actual_bassrankvar 364} {< $actual_bassrankvar 436}}
            {set $bassrankvar 5})
         ({>= $actual_bassrankvar 436}
            {set $bassrankvar 6})
      }
   }
   {foreach $entry $rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {elem {find $entry vocals} 1}
            {set $vocalsrankvar {elem {find $entry vocals} 1}}
         }
      }
      {cond
         ({< $actual_vocalsrankvar 132}
            {set $vocalsrankvar 0})
         ({&& {>= $actual_vocalsrankvar 132} {< $actual_vocalsrankvar 175}}
            {set $vocalsrankvar 1})
         ({&& {>= $actual_vocalsrankvar 175} {< $actual_vocalsrankvar 218}}
            {set $vocalsrankvar 2})
         ({&& {>= $actual_vocalsrankvar 218} {< $actual_vocalsrankvar 279}}
            {set $vocalsrankvar 3})
         ({&& {>= $actual_vocalsrankvar 279} {< $actual_vocalsrankvar 353}}
            {set $vocalsrankvar 4})
         ({&& {>= $actual_vocalsrankvar 353} {< $actual_vocalsrankvar 427}}
            {set $vocalsrankvar 5})
         ({>= $actual_vocalsrankvar 427}
            {set $vocalsrankvar 6})
      }
   }
   {foreach $entry $rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {elem {find $entry band} 1}
            {set $actual_bandrankvar {elem {find $entry band} 1}}
         }
      }
      {cond
         ({< $actual_bandrankvar 163}
            {set $bandrankvar 0})
         ({&& {>= $actual_bandrankvar 163} {< $actual_bandrankvar 215}}
            {set $bandrankvar 1})
         ({&& {>= $actual_bandrankvar 215} {< $actual_bandrankvar 243}}
            {set $bandrankvar 2})
         ({&& {>= $actual_bandrankvar 243} {< $actual_bandrankvar 267}}
            {set $bandrankvar 3})
         ({&& {>= $actual_bandrankvar 267} {< $actual_bandrankvar 292}}
            {set $bandrankvar 4})
         ({&& {>= $actual_bandrankvar 292} {< $actual_bandrankvar 345}}
            {set $bandrankvar 5})
         ({>= $actual_bandrankvar 345}
            {set $bandrankvar 6})
      }
   }
   {if $hackydisabled ;disabled for now because author finder cannot properly find pro upgrade dta ranks
      {if {== $keysplayeractive true}
         {foreach $entry $rankvar
            {if {== {elem $entry 0} {basename rank}}
               {if {elem {find $entry keys} 1}
                  {set $actual_keysrankvar {elem {find $entry keys} 1}}
               }
            }
         }
         {cond
            ({< $actual_keysrankvar 153}
               {set $keysrankvar 0})
            ({&& {>= $actual_keysrankvar 153} {< $actual_keysrankvar 211}}
               {set $keysrankvar 1})
            ({&& {>= $actual_keysrankvar 211} {< $actual_keysrankvar 269}}
               {set $keysrankvar 2})
            ({&& {>= $actual_keysrankvar 269} {< $actual_keysrankvar 327}}
               {set $keysrankvar 3})
            ({&& {>= $actual_keysrankvar 327} {< $actual_keysrankvar 385}}
               {set $keysrankvar 4})
            ({&& {>= $actual_keysrankvar 385} {< $actual_keysrankvar 443}}
               {set $keysrankvar 5})
            ({>= $actual_keysrankvar 443}
               {set $keysrankvar 6})
         }
      }
      {if {== $real_keysplayeractive true}
         {foreach $entry $rankvar
            {if {== {elem $entry 0} {basename rank}}
               {if {elem {find $entry real_keys} 1}
                  {set $actual_real_keysrankvar {elem {find $entry real_keys} 1}}
               }
            }
         }
         {cond
            ({< $actual_real_keysrankvar 153}
               {set $real_keysrankvar 0})
            ({&& {>= $actual_real_keysrankvar 153} {< $actual_real_keysrankvar 211}}
               {set $real_keysrankvar 1})
            ({&& {>= $actual_real_keysrankvar 211} {< $actual_real_keysrankvar 269}}
               {set $real_keysrankvar 2})
            ({&& {>= $actual_real_keysrankvar 269} {< $actual_real_keysrankvar 327}}
               {set $real_keysrankvar 3})
            ({&& {>= $actual_real_keysrankvar 327} {< $actual_real_keysrankvar 385}}
               {set $real_keysrankvar 4})
            ({&& {>= $actual_real_keysrankvar 385} {< $actual_real_keysrankvar 443}}
               {set $real_keysrankvar 5})
            ({>= $actual_real_keysrankvar 443}
               {set $real_keysrankvar 6})
         }
      }
      {if {== $real_guitarplayeractive true}
         {foreach $entry $rankvar
            {if {== {elem $entry 0} {basename rank}}
               {if {elem {find $entry real_guitar} 1}
                  {set $actual_real_guitarrankvar {elem {find $entry real_guitar} 1}}
               }
            }
         }
         {cond
            ({< $actual_real_guitarrankvar 150}
               {set $real_guitarrankvar 0})
            ({&& {>= $actual_real_guitarrankvar 150} {< $actual_real_guitarrankvar 205}}
               {set $real_guitarrankvar 1})
            ({&& {>= $actual_real_guitarrankvar 205} {< $actual_real_guitarrankvar 264}}
               {set $real_guitarrankvar 2})
            ({&& {>= $actual_real_guitarrankvar 264} {< $actual_real_guitarrankvar 323}}
               {set $real_guitarrankvar 3})
            ({&& {>= $actual_real_guitarrankvar 323} {< $actual_real_guitarrankvar 382}}
               {set $real_guitarrankvar 4})
            ({&& {>= $actual_real_guitarrankvar 382} {< $actual_real_guitarrankvar 442}}
               {set $real_guitarrankvar 5})
            ({>= $actual_real_guitarrankvar 442}
               {set $real_guitarrankvar 6})
         }
      }
      {if {== $real_bassplayeractive true}
         {foreach $entry $rankvar
            {if {== {elem $entry 0} {basename rank}}
               {if {elem {find $entry real_bass} 1}
                  {set $actual_real_bassrankvar {elem {find $entry real_bass} 1}}
               }
            }
         }
         {cond
            ({< $actual_real_bassrankvar 150}
               {set $real_bassrankvar 0})
            ({&& {>= $actual_real_bassrankvar 150} {< $actual_real_bassrankvar 208}}
               {set $real_bassrankvar 1})
            ({&& {>= $actual_real_bassrankvar 208} {< $actual_real_bassrankvar 267}}
               {set $real_bassrankvar 2})
            ({&& {>= $actual_real_bassrankvar 267} {< $actual_real_bassrankvar 325}}
               {set $real_bassrankvar 3})
            ({&& {>= $actual_real_bassrankvar 325} {< $actual_real_bassrankvar 384}}
               {set $real_bassrankvar 4})
            ({&& {>= $actual_real_bassrankvar 384} {< $actual_real_bassrankvar 442}}
               {set $real_bassrankvar 5})
            ({>= $actual_real_bassrankvar 442}
               {set $real_bassrankvar 6})
         }
      }
   }
)

#define DX_ENTRY_SWITCH
(
   {switch $dx_entry_finder
      (author {set $authorvar {elem {find $entry $dx_entry_finder} 1}})
      (artist {set $artistvar {elem {find $entry $dx_entry_finder} 1}})
      (year_released {set $yearvar {elem {find $entry $dx_entry_finder} 1}})
      (album_name {set $albumvar {elem {find $entry $dx_entry_finder} 1}})
      (game_origin {set $sourcevar {elem {find $entry $dx_entry_finder} 1}})
      (genre {set $genrevar {elem {find $entry $dx_entry_finder} 1}})
      (master {set $mastervar {elem {find $entry $dx_entry_finder} 1}})
      (strings_author {set $stringsauthorvar {elem {find $entry $dx_entry_finder} 1}})
      (keys_author {set $keysauthorvar {elem {find $entry $dx_entry_finder} 1}})
      (rank {set $rankvar ({find $entry $dx_entry_finder})} {if $rankvar DX_RANK_VAR_HANDLER})
   }
)
#define MTV_DTA_PREPPER
(
   {dx_log_writer {sprint "Attempting to read loaded song DTA. - Gamemode: " $dx_gamemode}}
   {unless $dx_readdtaonce
      {set $dx_readdtaonce TRUE}
      {set $dx_readadditionaldtaonce FALSE}
      {set $theactualpath FALSE}
      {if_else {file_exists SONGPATH2}
         {set $theactualpath SONGPATH2} ;a dlc dta
         {if_else {file_exists SONGPATH3}
            {set $theactualpath SONGPATH3} ;on disc update
            {if {file_exists SONGPATH}
               {set $theactualpath SONGPATH} ;inside the ark
            }
         }
      }
      {if_else $theactualpath
         {do
            {if_else {== $theactualpath SONGPATH3}
               {set $songdtareader $dx_raw_song_cache_holder}
               {set $songdtareader {read_file $theactualpath}} ;load the dta into memory
            }
            {dx_log_writer {sprint "Found DTA path: " $theactualpath}}
         }
         {do
            {set $dx_path_failed}
            {dx_log_writer {sprint "Unmapped DTA path: " {song_mgr song_file_path {meta_performer song} "/../songs.dta"}}}
         }
      }
   }
)
#define MTV_DTA_READER
(
   {foreach $entry $songdtareader
      {if {== {elem $entry 0} {basename {meta_performer song}}}
         {if_else {find $entry $dx_entry_finder}
            DX_ENTRY_SWITCH
         }
      }
   }
   {foreach $entry $dx_song_cache_holder ;if we didnt find album_name there, we need to scan our updates dta
      {if {== {elem $entry 0} {basename {meta_performer song}}} ;find the current song's shortname
         {if_else {find $entry $dx_entry_finder} ;check for album_name again
            DX_ENTRY_SWITCH
         }
      }
   }
)
#define DX_MTV_FORMATTER_HANDLER
(
   (mtv_formatter
      {dx_mtv_formatter reset} ; reset the formatted label to nothing first to prep for new data
      {if $dx_artist_mtv_line
         {if_else $mastervar ;check if this song is labelled as a cover or not
            {dx_mtv_formatter $artistvar}
            {dx_mtv_formatter {sprint {localize store_famous_by} ": " $artistvar}}
         }
      }
      {if $dx_year_on_mtv
         {if_else $dx_year_on_one_mtv_line ;check if we should seperate the year to its own line or not
            {if_else {== $dx_mtv_elements 0} ;this check throughout checks to see if this is the only line we are writing, if its the only line, we dont want to print a new line
               {dx_mtv_formatter $yearvar}
               {dx_mtv_formatter {sprint ", " $yearvar}}
            }
            {if_else {== $dx_mtv_elements 0}
               {dx_mtv_formatter $yearvar}
               {dx_mtv_formatter {sprint "\n" $yearvar}}
            }
         }
      }
      {if $dx_album_mtv_line
         {if_else {== $dx_mtv_elements 0}
            {dx_mtv_formatter {sprint $albumvar}}
            {dx_mtv_formatter {sprint "\n" $albumvar}}
         }
      }
      {if $dx_genre_mtv_line
         {if_else {== $dx_mtv_elements 0}
            {dx_mtv_formatter {sprint {localize $genrevar}}}
            {dx_mtv_formatter {sprint "\n" {localize $genrevar}}}
         }
      }
      {if $dx_game_origin_mtv_line
         {if_else {== $dx_mtv_elements 0}
            {dx_mtv_formatter {sprint {localize $sourcevar}}}
            {dx_mtv_formatter {sprint "\n" {localize $sourcevar}}}
         }
      }
      {if $dx_author_mtv_line
         {if $authorvar
            {if_else {== $dx_mtv_elements 0}
               {dx_mtv_formatter {sprint {localize author} ": " $authorvar}}
               {dx_mtv_formatter {sprint "\n" {localize author} ": " $authorvar}}
            }
         }
      }
      {if $dx_author_mtv_line
         {if $stringsauthorvar
            {if_else {== $dx_mtv_elements 0}
               {dx_mtv_formatter {sprint {localize strings_author} ": " $stringsauthorvar}}
               {dx_mtv_formatter {sprint "\n" {localize strings_author} ": " $stringsauthorvar}}
            }
         }
      }
      {if $dx_author_mtv_line
         {if $keysauthorvar
            {if_else {== $dx_mtv_elements 0}
               {dx_mtv_formatter {sprint {localize keys_author} ": " $keysauthorvar}}
               {dx_mtv_formatter {sprint "\n" {localize keys_author} ": " $keysauthorvar}}
            }
         }
      }
      {artist.lbl set fixed_length 1000}
      {artist.lbl set leading 0.9}
      {switch $dx_mtv_elements
         (0 {artist.lbl set height 100} {artist.lbl set_token_fmt {sprint " "}}) ;I dont know a better way to do this but we check how many elements are chosen by the user and fetch each of the elements from the created array manually depending on how many
         (1 {artist.lbl set height 200} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0}}})
         (2 {artist.lbl set height 300} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1}}})
         (3 {artist.lbl set height 400} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2}}})
         (4 {artist.lbl set height 500} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3}}})
         (5 {artist.lbl set height 600} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4}}})
         (6 {artist.lbl set height 700} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5}}})
         (7 {artist.lbl set height 800} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6}}})
         (8 {artist.lbl set height 800} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6} {elem $dx_mtv_holder 7}}})
         (9 {artist.lbl set height 800} {artist.lbl set_token_fmt {sprint {elem $dx_mtv_holder 0} {elem $dx_mtv_holder 1} {elem $dx_mtv_holder 2} {elem $dx_mtv_holder 3} {elem $dx_mtv_holder 4} {elem $dx_mtv_holder 5} {elem $dx_mtv_holder 6} {elem $dx_mtv_holder 8} {elem $dx_mtv_holder 9}}})
      }
   )
)
#define MTV_MOD_WRITER_HANDLER
(
   (mtv_song_title_writer
      {set $dx_tmp ""}
      {set $dx_tmp2 ""}
      {if {modifier_mgr is_modifier_active mod_fastermode}
         {set $dx_tmp2 {sprint $dx_tmp2 {localize mod_fastermode} " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%) " }}
      }
      {if {modifier_mgr is_modifier_active mod_chmode}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "DRUNK MODE"}}
      }
      {if {&& {modifier_mgr is_modifier_active mod_auto_play} {! {modifier_mgr is_modifier_active mod_fakejuke}}}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "AUTOPLAY"}}
      }
      {if {modifier_mgr is_modifier_active mod_dx_showbpm}
         {set $dx_tmp2 {sprint $dx_tmp2 {if_else {!= $dx_tmp2 ""} " | " ""} "BPM: " $dx_bpm_counter}}
      }
      {if {&& {!= $speedmod 1.0} {! {modifier_mgr is_modifier_active mod_fastermode}}}
         {set $dx_tmp {sprint $dx_tmp " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%)" }}
      }
      {if_else $dx_song_title_mtv_line
         {if {!= $dx_tmp2 ""}
            {set $dx_tmp {sprint $dx_tmp "\n" $dx_tmp2}}
         }
         {if {!= $dx_tmp2 ""}
            {set $dx_tmp {sprint $dx_tmp $dx_tmp2}}
         }
      }
      {if_else $dx_song_title_mtv_line
         {if_else {!= $dx_tmp ""}
            {song.lbl set_token_fmt {sprint {{song_mgr get_meta_data {meta_performer song}} title} $dx_tmp}}
            {song.lbl set_token_fmt {sprint {{song_mgr get_meta_data {meta_performer song}} title}}}
         }
         {if_else {!= $dx_tmp ""}
            {song.lbl set_token_fmt {sprint $dx_tmp}}
            {song.lbl set_token_fmt {sprint " "}}
         }
      }
   )
)
#define MTV_SONG_WRITER
(
   {if {modifier_mgr is_modifier_active mod_fakejuke} ;if fake jukebox mode is enabled
       {set $authorvar FALSE} ;just completely disregard the author so our next script lands in the correct spot
   }
   {unless $dx_hmxcheckedonce
      {set $dx_hmxcheckedonce TRUE}
      {foreach $entry $songdtareader
         {if {== {elem $entry 0} {basename {meta_performer song}}}
            {set $authorvar "Harmonix"}
         }
      }
      DX_CURRENT_SONG_WRITER
      DX_JSON_WRITER
      {if_else $yearvar
         {dx_song_writer {sprint "Song Loaded: " $song_title " - " $artistvar ", " $yearvar " - Album: " $albumvar " - Genre: " $genrevar " - Source: " {localize $sourcevar} " - Authored By: " $authorvar} " - Gamemode: " $dx_gamemode}
         {if_else $authorvar
            {dx_log_writer {sprint "Song Loaded: " $song_title " - " $artistvar " - Authored By: " $authorvar} " - Gamemode: " $dx_gamemode}
            {if_else $artistvar
               {dx_log_writer {sprint "Song Loaded: " $song_title " - " $artistvar} " - Gamemode: " $dx_gamemode}
               {dx_log_writer {sprint "Song Loaded: " $song_title} " - Gamemode: " $dx_gamemode}
            }
         }
      }
   }
   {unless {&& {modifier_mgr is_modifier_active mod_dx_showbpm} $dx_mtv_formatted_once} ;show bpm formats way too often to be formatted multiple times
      {set $dx_mtv_formatted_once TRUE}
      {$this mtv_formatter}
   }
)
#define MTV_WRITER_CHOOSER
(
   #ifndef HX_WII
   {if
      {||
         {gamemode in_mode defaults} {gamemode in_mode qp_party_shuffle} ;only run stuff in normal game modes
         {gamemode in_mode qp_coop} {gamemode in_mode campaign}
         {gamemode in_mode party_shuffle} {gamemode in_mode tour}
         {gamemode in_mode practice} {gamemode in_mode qp_practice}
      }
      {unless
         {||
            $dx_ps3hw ; don't run on ps3 hardware
            $dx_path_failed
         }
         {do
            {unless $dx_mtv_dta_reader_once
               {set $dx_mtv_dta_reader_once TRUE} ;no matter how many times this function gets called, we only need to read these dtas once because its very heavy
               {set $dx_entry_finder artist} MTV_DTA_READER ;find the shit TODO make a func instead
               {set $dx_entry_finder author} MTV_DTA_READER
               {set $dx_entry_finder year_released} MTV_DTA_READER
               {set $dx_entry_finder album_name} MTV_DTA_READER
               {set $dx_entry_finder genre} MTV_DTA_READER
               {set $dx_entry_finder game_origin} MTV_DTA_READER
               {set $dx_entry_finder master} MTV_DTA_READER
               {set $dx_entry_finder strings_author} MTV_DTA_READER
               {set $dx_entry_finder keys_author} MTV_DTA_READER
               {set $dx_entry_finder rank} MTV_DTA_READER
            }
            {if {! $artistvar} {set $artistvar "No Artist Found"}}
            {if {! $yearvar} {set $yearvar "No Year Found"}}
            {if {! $albumvar} {set $albumvar "No Album Found"}}
            {if {! $genrevar} {set $genrevar "No Genre Found"}}
            {if {exists song.lbl}
               {song.lbl set fixed_length 1000}
               {$this mtv_song_title_writer}
            }
            {if {exists artist.lbl}
               MTV_SONG_WRITER
            }
         }
      }
   }
   {if
      {||
         $dx_ps3hw ; don't run on ps3 hardware
         $dx_path_failed
      }
      {do
         {unless $dx_author_finder_failed
            {set $dx_author_finder_failed TRUE}
            {dx_log_writer {sprint "Author Finder Failed - Song Loaded: " $song_title} " - Gamemode: " $dx_gamemode}
         }
         {if
            {exists song.lbl}
            {song.lbl set fixed_length 1000}
            {$this mtv_song_title_writer}
         }
         {if
            {exists artist.lbl}
            {artist.lbl set_artist_name_from_shortname $short_name}
         }
      }
   }
   #else
   {do
      {if
         {exists song.lbl}
         {song.lbl set fixed_length 1000}
         {$this mtv_song_title_writer}
      }
      {if
         {exists artist.lbl}
         {artist.lbl set_artist_name_from_shortname $short_name}
      }
   }
   #endif
)