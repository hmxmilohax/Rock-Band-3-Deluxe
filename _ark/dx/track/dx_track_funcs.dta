#define DX_FIND_LANED_TRACK ;must be used inside {beatmatch foreach_active_player $player ...} to get player number 
({find_obj {{get_track_panel} loaded_dir} {sprint "track_" {{$player get_user} get_slot_num}}})
{func
   dx_track_theme_name
   ($dx_dta_name)
   #ifdef HX_XBOX {sprint "GAME:/dx_track_theme_" $dx_dta_name ".dta"} #endif
   #ifdef HX_WII {sprint "SD:/dx_track_theme_" $dx_dta_name ".dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/dx_track_theme_" $dx_dta_name ".dta"} #endif
}
#define EXTERNAL_CUSTOM_TEX_PATH_FINDER
(
   #ifdef HX_PS3
   {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $path "/gen/" $customtex ".png_ps3"}
   #endif
   #ifdef HX_WII
   {sprint "SD:/custom_textures/" $path "/gen/" $customtex ".png_wii"}
   #endif
   #ifdef HX_XBOX
   {sprint "GAME:/custom_textures/" $path "/gen/" $customtex ".png_xbox"}
   #endif
)
#define EXTERNAL_CUSTOM_TEX_PATH
(
   #ifdef HX_PS3
   {$sourcetex set_bitmap {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_WII
   {$sourcetex set_bitmap {sprint "SD:/custom_textures/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_XBOX
   {$sourcetex set_bitmap {sprint "GAME:/custom_textures/" $path "/" $customtex ".png"}}
   #endif
)
#define INTERNAL_CUSTOM_TEX_PATH_FINDER
(
   {sprint "dx/custom_textures/" $path "/gen/" $customtex #ifdef HX_PS3 ".png_ps3" #endif #ifdef HX_WII ".png_wii" #endif #ifdef HX_XBOX ".png_xbox" #endif}
)
#define EXTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY
(
   #ifdef HX_PS3
   {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $category "/" $path "/gen/" $customtex ".png_ps3"}
   #endif
   #ifdef HX_WII
   {sprint "GAME:/custom_textures/" $category "/" $path "/gen/" $customtex ".png_wii"}
   #endif
   #ifdef HX_XBOX
   {sprint "GAME:/custom_textures/" $category "/" $path "/gen/" $customtex ".png_xbox"}
   #endif
)
#define EXTERNAL_CUSTOM_TEX_PATH_CATEGORY
(
   
   #ifdef HX_PS3
   {$sourcetex set_bitmap {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_WII
   {$sourcetex set_bitmap {sprint "SD:/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
   #ifdef HX_XBOX
   {$sourcetex set_bitmap {sprint "GAME:/custom_textures/" $category "/" $path "/" $customtex ".png"}}
   #endif
)
#define INTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY
(
   {sprint "dx/custom_textures/" $category "/" $path "/gen/" $customtex #ifdef HX_PS3 ".png_ps3" #endif #ifdef HX_WII ".png_wii" #endif #ifdef HX_XBOX ".png_xbox" #endif}
)
{func
   dx_custom_texture_setter
   ($category $path $sourcetex $customtex)
   ;{dx_log_writer insane {sprint "func: dx_custom_texture_setter" " - " $category ", " $path ", " $sourcetex ", " $customtex}}
   ;{dx_log_writer insane
   ;   {sprintf "Executed dx_custom_texture_setter - time: %.4fms"
         {time
            {search_replace $customtex "'" "" $customtex}
            {set $dx_failover_tex FALSE}
            {if {&& {exists beatmatch} $dx_customizer $dx_refresh_beatmatch}
               {set $dx_refresh_beatmatch FALSE}
               {beatmatch set_paused TRUE}
            }
            {unless
               #ifdef _SHIP
               ;idk why the find_exists crashes debug tbh
               {|| {! {find_exists $customtex}} {== $customtex none}} ;check the texture is not set to default
               #else
               {== $customtex none}
               #endif
               {dx_log_writer insane {sprint "Setting " $sourcetex " to: " $customtex}}
               {if_else $category
                  {if_else {file_exists EXTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY}
                     EXTERNAL_CUSTOM_TEX_PATH_CATEGORY
                     {if_else {file_exists INTERNAL_CUSTOM_TEX_PATH_FINDER_CATEGORY}
                        {$sourcetex set_bitmap {sprint "dx/custom_textures/" $category "/" $path "/" $customtex ".png"}}
                        {set $dx_failover_tex TRUE}
                     }
                  }
                  {if_else {file_exists EXTERNAL_CUSTOM_TEX_PATH_FINDER}
                     EXTERNAL_CUSTOM_TEX_PATH
                     {if_else {file_exists INTERNAL_CUSTOM_TEX_PATH_FINDER}
                        {$sourcetex set_bitmap {sprint "dx/custom_textures/" $path "/" $customtex ".png"}}
                        {set $dx_failover_tex TRUE}
                     }
                  }
               }
               {if $dx_failover_tex
                  {if_else $category
                     {$sourcetex set_bitmap {sprint "dx/custom_textures/" $category "/" $path "/rock band 3.png"}}
                     {$sourcetex set_bitmap {sprint "dx/custom_textures/" $path "/rock band 3.png"}}
                  }
               }
               {if {&& {exists beatmatch} $dx_customizer}
                  {beatmatch set_paused FALSE}
               }
            }
         }
   ;   }
   ;}
}
{func
   dx_track_bre_reset
   ;{dx_log_writer info {sprint "func: dx_track_bre_reset"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_track_bre_reset - time: %.4fms"
         {time
            {if {&& {modifier_mgr is_modifier_active mod_nobre} $imabigboy} ;check if we have no bre active, and we havent restarted already on this song
               {if {! $dx_already_restarted} ;cheap attempt to fix the "notes too quick bug" by restarting once automatically on initial song start, this will at least work in black bg
                  {do ;do
                     {set $imabigboy FALSE} ;tell the logic we have restarted once to switch to expert
                     {set $dx_already_restarted TRUE} ;also tell the logic we
                     {{{beatmatch active_player 0} get_user} set_difficulty kDifficultyExpert} ;since we have entered the track on easy, set the player to expert to enable no bre behavior
                     {game_restart} ;quick restart the song
                  }
               }
            }
         }
   ;   }
   ;}
}
{func
   dx_track_streak_reset
   ;{dx_log_writer info {sprint "func: dx_track_streak_reset"}}
   ;{dx_log_writer info
   ;   {sprintf "Executed dx_track_streak_reset - time: %.4fms"
         {time
            {if
               {&&
                  {exists gamemode}
                  {! {gamemode in_mode practice}}
                  {! {gamemode in_mode trainer}}
               }
               {dx_toggle_fail_feedback}
               {{coop_track_panel find scoreboard} set_showing $dx_score_meter_visibility}
               {{{coop_track_panel find scoreboard} find tracker_band_display} set_display_type kBandTrackerDisplayType_Text}
               {if {gamemode in_mode campaign}
                  {{{coop_track_panel find scoreboard} find tracker_band_display} set_display_style kBandTrackerDisplayStyle_Campaign}
               }
               {if {gamemode in_mode tour}
                  {{{coop_track_panel find scoreboard} find tracker_band_display} set_display_style kBandTrackerDisplayStyle_Tour}
               }
               {if {&& {! {gamemode in_mode tour}} {! {gamemode in_mode campaign}}}
                  {{{coop_track_panel find scoreboard} find tracker_band_display} set_challenge_type kTrackerChallengeType_Streak}
                  {if
                     {||
                        {|| {== $dx_time_remaining down} {== $dx_time_remaining up}}
                        {&& {== $dx_streak_counter single} {== $dx_num_active_instruments 1}}
                        {&& {== $dx_streak_counter multi} {> $dx_num_active_instruments 0}}
                     }
                     ;{{{coop_track_panel find scoreboard} find tracker_band_display} find sb_bg.mesh set_showing TRUE} ;ensure that it is visible at a base level
                     {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing TRUE} ;ensure that it is visible at a base level
                     {{{coop_track_panel find scoreboard} find tracker_band_display} set_challenge_type kTrackerChallengeType_Streak} ;set tracker type to streak
                     {{{coop_track_panel find scoreboard} find tracker_band_display} set_showing 1} ;ensure that it is visible at a base level
                     {{{coop_track_panel find scoreboard} find tracker_band_display} set_local_pos_index 2 {+ {{{coop_track_panel find scoreboard} find tracker_band_display} get_local_pos_index 2} 1.35}} ;move it up a bit
                     {{{coop_track_panel find scoreboard} find tracker_band_display} show os_blnk} ;fire the tracker's show trigger, defaulting it to os_blnk string
                     {{{coop_track_panel find scoreboard} find tracker_band_display} set_success_state TRUE} ;fire the tracker's show trigger, defaulting it to os_blnk string
                     {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_int 0 TRUE} ;set the value to 0 to start
                  }
                  {if_else {== $dx_streak_counter off}
                     {do
                        {{{coop_track_panel find scoreboard} find tracker_band_display} iterate Mesh $m {$m set_showing FALSE}} ;ensure that it is visible at a base level
                        {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing FALSE} ;ensure that it is visible at a base level
                     }
                     {if_else
                        {||
                           {&& {== $dx_streak_counter single} {== $dx_num_active_instruments 1}}
                           {&& {== $dx_streak_counter multi} {> $dx_num_active_instruments 0}}
                        }
                        {do
                           {{{coop_track_panel find scoreboard} find tracker_band_display} iterate Mesh $m {$m set_showing TRUE}} ;ensure that it is visible at a base level
                           {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing TRUE} ;ensure that it is visible at a base level
                        }
                        {do
                           {{{coop_track_panel find scoreboard} find tracker_band_display} iterate Mesh $m {$m set_showing FALSE}} ;ensure that it is visible at a base level
                           {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing FALSE} ;ensure that it is visible at a base level
                        }
                     }
                  }
                  {dx_mtv_time_remaining_handler} ;this will set up a script to run itself every half a second
               }
               {dx_reset_time_remaining_position}
            }
            {unless {== $dx_highway_text off}
               ;reset streak text
               {beatmatch foreach_active_player $player
                  {unless {== {$player instrument} vocals}
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt bass_streak}
                     {{DX_FIND_LANED_TRACK find failed_feedback} failed 0}
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes.grp} set_showing FALSE}
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes_bg.grp} set_showing FALSE}
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt {sprint 0}}
                  }
               }
            }
            ;reset "bass groove" text
            {beatmatch foreach_active_player $player
               {unless {== {$player instrument} vocals}
                  {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt bass_streak}
               }
            }
         }
   ;   }
   ;}
}
{func
   dx_reset_time_remaining_position
   {unless $dx_fetched_time_remaining_pos ;gate this block to run once
      {set $dx_fetched_time_remaining_pos TRUE}
      {set $dx_stored_time_remaining_pos {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} get_local_pos_index 2}} ;store the base position
      {set $dx_song_label_scale_x {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} get_local_scale_index 0}}
      {set $dx_song_label_scale_y {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} get_local_scale_index 2}}
   }
   {if {|| {== $dx_time_remaining down} {== $dx_time_remaining up}}
      {{{coop_track_panel find scoreboard} find tracker_band_display} iterate Mesh $m {$m set_showing TRUE}} ;ensure that it is visible at a base level
      {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing TRUE} ;ensure that it is visible at a base level
      #ifdef HX_WII ;the label is too big on wii so we shrink it
      {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_scale_index 0 {- $dx_song_label_scale_x 0.50}}
      {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_scale_index 2 {- $dx_song_label_scale_y 0.50}}
      #endif
      {cond
         ({&& {|| $dx_active_vocals {! $dx_time_remaining_on_top}} {== $dx_streak_counter single} {> $dx_num_active_instruments 1}} ;handle this stupid case specifically
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 {+ $dx_stored_time_remaining_pos 1.4}}
         )
         ({&& {! $dx_time_remaining_on_top} {|| {== $dx_streak_counter single} {== $dx_streak_counter multi}}} ;if vocals are active, move the label to the bottom again because it looks bad on top
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 $dx_stored_time_remaining_pos}
         )
         ({&& {|| {== $dx_streak_counter single} {== $dx_streak_counter multi}} $dx_active_vocals} ;if vocals are active, move the label to the bottom again because it looks bad on top
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 $dx_stored_time_remaining_pos}
         )
         ({&& {! $dx_time_remaining_on_top} {== $dx_streak_counter off}} ;if vocals are active, move the label to the bottom but slightly up to account for missing streak
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 {+ $dx_stored_time_remaining_pos 1.4}}
         )
         ({&& {== $dx_streak_counter off} $dx_active_vocals} ;if vocals are active, move the label to the bottom but slightly up to account for missing streak
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 {+ $dx_stored_time_remaining_pos 1.4}}
         )
         ({&& $dx_time_remaining_on_top {! $dx_active_vocals}} ;if we need to move the label to the top
            {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 {+ $dx_stored_time_remaining_pos 4.66}} ;move it up
         )
      }
   }
   {if {|| {== $dx_streak_counter off} {&& {== $dx_streak_counter single} {> $dx_num_active_instruments 1}}}
      {do
         {{{coop_track_panel find scoreboard} find tracker_band_display} iterate Mesh $m {$m set_showing FALSE}} ;ensure that it is visible at a base level
         {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_middle.lbl} set_showing FALSE} ;ensure that it is visible at a base level
      }
   }
   {if {|| {gamemode in_mode tour} {gamemode in_mode campaign}}
      {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_local_pos_index 2 $dx_stored_time_remaining_pos}
      {set $dx_current_time_remaining_pos {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} get_local_pos_index 2}}
   }
}
{func
   dx_track_fc_reset
   {if $dx_fc_glow
      {beatmatch foreach_active_player $player ;dx - add our custom fc checking callbacks to the currently loaded player
         {unless {== {$player instrument} vocals}
            {{{DX_FIND_LANED_TRACK find streak_meter} find peak_state.trig} trigger}
            {{{DX_FIND_LANED_TRACK find streak_meter} find star_deploy.trig} trigger}
         }
      }
   }
}
{func
   dx_note_streak_remover
   ($player $instrument)
   {unless {== {$player instrument} vocals}
      {if {== {$player instrument} $instrument}
         {{{DX_FIND_LANED_TRACK find player_feedback} find super_streak_end.trig} trigger}
      }
   }
}
{func
   dx_note_streak_popup
   ($instrument)
   {if {&& $dx_note_streak_popups {! {gamemode in_mode trainer}}}
      {set $dx_bpm {* {* 60 {/ 1 {- {beat_to_seconds {+ {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}} 1}} {beat_to_seconds {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}}}}} $speedmod}} ;grab current bpm same way the bpm counter does but not dependent on it
      {set $dx_streak_timer 4} ;fallback if somehow the cond fails to set something
      {cond
         ({< $dx_bpm 100} {set $dx_streak_timer 3})
         ({&& {> $dx_bpm 100} {< $dx_bpm 160}} {set $dx_streak_timer 4})
         ({&& {> $dx_bpm 160} {< $dx_bpm 220}} {set $dx_streak_timer 6})
         ({&& {> $dx_bpm 220} {< $dx_bpm 280}} {set $dx_streak_timer 8})
         ({&& {> $dx_bpm 280} {< $dx_bpm 340}} {set $dx_streak_timer 12})
         ({> $dx_bpm 340} {set $dx_streak_timer 18})
      }
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {== {$player instrument} vocals}
            {if {== {$player instrument} $instrument}
               {{{DX_FIND_LANED_TRACK find player_feedback} find super_streak_start.trig} trigger}
               {switch $instrument
                  (bass
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_bass}
                  )
                  (real_guitar
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_real_guitar}
                  )
                  (real_bass
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_real_bass}
                  )
                  (keys
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_keys}
                  )
                  (real_keys
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_real_keys}
                  )
                  (guitar
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_guitar}
                  )
                  (drum
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_drum}
                  )
                  (real_drum
                     {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_note_streak $num_gems_combo_real_drum}
                  )
               }
               {script_task
                  kTaskBeats
                  (delay $dx_streak_timer)
                  (script {dx_note_streak_remover $player $instrument})
               }
            }
         }
      }
   }
}
; displays the streak of each individual instrument at the bottom of each track
{func
   dx_indv_note_streak
   ($instrument)
   {if {== $dx_highway_text streaks}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {== {$player instrument} vocals}
            {if {== {$player instrument} $instrument}
               {{DX_FIND_LANED_TRACK find failed_feedback} failed 0}
               {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes.grp} set_showing FALSE}
               {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes_bg.grp} set_showing FALSE}
               {switch $instrument ;switch based off the currently loaded instrument
                  (guitar
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_guitar}
                  )
                  (bass
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_bass}
                  )
                  (real_guitar
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_real_guitar}
                  )
                  (real_bass
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_real_bass}
                  )
                  (keys
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_keys}
                  )
                  (real_keys
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_real_keys}
                  )
                  (drum
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_drum}
                  )
                  (real_drum
                     {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_indv_combo $num_gems_combo_real_drum}
                  )
               }
            }
         }
      }
   }
}
; shows the username of each player at the bottom of their respective highways
{func
   dx_show_track_username
   {if {== $dx_highway_text username}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {== {$player instrument} vocals}
            {set $dx_name {{$player get_user} get_user_name}}
            ;remove gross ps3 local user tags
            #ifdef HX_PS3
            {search_replace $dx_name " (1)" "" $dx_name}
            {search_replace $dx_name " (2)" "" $dx_name}
            {search_replace $dx_name " (3)" "" $dx_name}
            {search_replace $dx_name " (4)" "" $dx_name}
            {search_replace $dx_name " (5)" "" $dx_name}
            {search_replace $dx_name " (6)" "" $dx_name}
            {search_replace $dx_name " (7)" "" $dx_name}
            {search_replace $dx_name "*" "" $dx_name}
            #endif
            {set $dx_current_player_name_sanitized $dx_name}
            {{DX_FIND_LANED_TRACK find failed_feedback} failed 0}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes.grp} set_showing FALSE}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes_bg.grp} set_showing FALSE}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt {sprint $dx_current_player_name_sanitized}}
         }
      }
   }
}
; whether not to darken the highway of remote players
{func
   dx_dim_remote_players
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {== {$player instrument} vocals}
            {if_else {{$player get_user} is_local}
               {{DX_FIND_LANED_TRACK find network_local.trig} trigger}
               {if_else $dx_dim_remote_players
                  {{DX_FIND_LANED_TRACK find network_remote.trig} trigger}
                  {{DX_FIND_LANED_TRACK find network_local.trig} trigger}
               }
            }
         }
      }
}
; shows the current overdrive of each player at the bottom of their respective highways
{func
   dx_show_user_overdrive
   {if {== $dx_highway_text overdrive}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {unless {== {$player instrument} vocals}
            {{DX_FIND_LANED_TRACK find failed_feedback} failed 0}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes.grp} set_showing FALSE}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find strikes_bg.grp} set_showing FALSE}
            {{{DX_FIND_LANED_TRACK find failed_feedback} find failed.lbl} set_token_fmt dx_overdrive_report {* {$player band_energy} 100}}
         }
      }
   }
}
; prep od ready popup
{func
   dx_calc_overdrive
   ($instrument)
   {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
      {unless {== {$player instrument} vocals}
         {if {== {$player instrument} $instrument}
            ;fire popup once and then gate firing again until drained
            {if {>= {$player band_energy} 0.5}
               {switch $instrument
                  (bass {unless $dx_stop_bass_od {dx_od_ready_popup $instrument}} {set $dx_stop_bass_od TRUE})
                  (real_bass {unless $dx_stop_real_bass_od {dx_od_ready_popup $instrument}} {set $dx_stop_real_bass_od TRUE})
                  (guitar {unless $dx_stop_guitar_od {dx_od_ready_popup $instrument}} {set $dx_stop_guitar_od TRUE})
                  (real_guitar {unless $dx_stop_real_guitar_od {dx_od_ready_popup $instrument}} {set $dx_stop_real_guitar_od TRUE})
                  (drum {unless $dx_stop_drum_od {dx_od_ready_popup $instrument}} {set $dx_stop_drum_od TRUE})
                  (real_drum {unless $dx_stop_real_drum_od {dx_od_ready_popup $instrument}} {set $dx_stop_real_drum_od TRUE})
                  (keys {unless $dx_stop_keys_od {dx_od_ready_popup $instrument}} {set $dx_stop_keys_od TRUE})
                  (real_keys {unless $dx_stop_real_keys_od {dx_od_ready_popup $instrument}} {set $dx_stop_real_keys_od TRUE})
               }
            }
            ;once we are drained, allow popups to fire again when ready
            {if {<= {$player band_energy} 0.01}
               {switch $instrument
                  (bass {set $dx_stop_bass_od FALSE})
                  (real_bass {set $dx_stop_real_bass_od FALSE})
                  (guitar {set $dx_stop_guitar_od FALSE})
                  (real_guitar {set $dx_stop_real_guitar_od FALSE})
                  (drum {set $dx_stop_drum_od FALSE})
                  (real_drum {set $dx_stop_real_drum_od FALSE})
                  (keys {set $dx_stop_keys_od FALSE})
                  (real_keys {set $dx_stop_real_keys_od FALSE})
               }
            }
         }
      }
   }
}
; shows an "overdrive ready!" popup when od is ready
{func
   dx_od_ready_popup
   ($instrument)
   {if {&& $dx_od_ready_popups {! {gamemode in_mode trainer}}}
      {do
         {set $dx_bpm {* {* 60 {/ 1 {- {beat_to_seconds {+ {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}} 1}} {beat_to_seconds {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}}}}} $speedmod}} ;grab current bpm same way the bpm counter does but not dependent on it
         {set $dx_streak_timer 4} ;fallback if somehow the cond fails to set something
         {cond
            ({< $dx_bpm 100} {set $dx_streak_timer 3})
            ({&& {> $dx_bpm 100} {< $dx_bpm 160}} {set $dx_streak_timer 4})
            ({&& {> $dx_bpm 160} {< $dx_bpm 220}} {set $dx_streak_timer 6})
            ({&& {> $dx_bpm 220} {< $dx_bpm 280}} {set $dx_streak_timer 8})
            ({&& {> $dx_bpm 280} {< $dx_bpm 340}} {set $dx_streak_timer 12})
            ({> $dx_bpm 340} {set $dx_streak_timer 18})
         }
         {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
            {unless {== {$player instrument} vocals}
               {if {== {$player instrument} $instrument}
                  {{{DX_FIND_LANED_TRACK find player_feedback} find super_streak_start.trig} trigger}
                  {{{DX_FIND_LANED_TRACK find player_feedback} find bass_super_streak.lbl} set_token_fmt dx_overdrive_ready}
                  {script_task
                     kTaskBeats
                     (delay $dx_streak_timer)
                     (script {dx_note_streak_remover $player $instrument})
                  }
               }
            }
         }
      }
   }
}
; this function will re-apply the local player's texture setting if it was previously changed by a remote player 
{func
   dx_resync_local_textures
   ($instrument)
   {do
      {dx_log_writer info {sprint "dx_resync_local_textures"}}
      {switch $instrument
         ((kTrackGuitar kTrackRealGuitar)
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting guitar texture to local setting"}}
            {unless {== $dx_highway_guitar $dx_local_highway_guitar}
               {set $dx_highway_guitar $dx_local_highway_guitar}
               {set $dx_highway_guitar_needs_reset TRUE}
            }
            {unless {== $dx_streak_guitar $dx_local_streak_guitar}
               {set $dx_streak_guitar $dx_local_streak_guitar}
               {set $dx_streak_guitar_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_guitar $dx_local_overdrive_guitar}
               {set $dx_overdrive_guitar $dx_local_overdrive_guitar}
               {set $dx_overdrive_guitar_needs_reset TRUE}
            }
         )
         ((kTrackBass kTrackRealBass)
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting bass texture to local setting"}}
            {unless {== $dx_highway_bass $dx_local_highway_bass}
               {set $dx_highway_bass $dx_local_highway_bass}
               {set $dx_highway_bass_needs_reset TRUE}
            }
            {unless {== $dx_streak_bass $dx_local_streak_bass}
               {set $dx_streak_bass $dx_local_streak_bass}
               {set $dx_streak_bass_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_bass $dx_local_overdrive_bass}
               {set $dx_overdrive_bass $dx_local_overdrive_bass}
               {set $dx_overdrive_bass_needs_reset TRUE}
            }
         )
         (kTrackDrum
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting drum texture to local setting"}}
            {unless {== $dx_highway_drum $dx_local_highway_drum}
               {set $dx_highway_drum $dx_local_highway_drum}
               {set $dx_highway_drum_needs_reset TRUE}
            }
            {unless {== $dx_streak_drum $dx_local_streak_drum}
               {set $dx_streak_drum $dx_local_streak_drum}
               {set $dx_streak_drum_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_drum $dx_local_overdrive_drum}
               {set $dx_overdrive_drum $dx_local_overdrive_drum}
               {set $dx_overdrive_drum_needs_reset TRUE}
            }
         )
         (kTrackKeys
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting keys texture to local setting"}}
            {unless {== $dx_highway_keys $dx_local_highway_keys}
               {set $dx_highway_keys $dx_local_highway_keys}
               {set $dx_highway_keys_needs_reset TRUE}
            }
            {unless {== $dx_streak_keys $dx_local_streak_keys}
               {set $dx_streak_keys $dx_local_streak_keys}
               {set $dx_streak_keys_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_keys $dx_local_overdrive_keys}
               {set $dx_overdrive_keys $dx_local_overdrive_keys}
               {set $dx_overdrive_keys_needs_reset TRUE}
            }
         )
         (kTrackRealKeys
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting real_keys texture to local setting"}}
            {unless {== $dx_keyboard $dx_local_keyboard}
               {set $dx_keyboard $dx_local_keyboard}
               {set $dx_keyboard_needs_reset TRUE}
            }
            {unless {== $dx_streak_prokeys $dx_local_streak_prokeys}
               {set $dx_streak_prokeys $dx_local_streak_prokeys}
               {set $dx_streak_prokeys_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_prokeys $dx_local_overdrive_prokeys}
               {set $dx_overdrive_prokeys $dx_local_overdrive_prokeys}
               {set $dx_overdrive_prokeys_needs_reset TRUE}
            }
         )
         (kTrackVocals
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting vocals texture to local setting"}}
            {unless {== $dx_vocal_arrow $dx_local_vocal_arrow}
               {set $vocal_arrow $dx_local_vocal_arrowd}
               {set $dx_vocal_arrow_needs_reset TRUE}
            }
            {unless {== $dx_vocal_highway $dx_local_vocal_highway}
               {set $dx_vocal_highway $dx_local_vocal_highway}
               {set $dx_vocal_highway_needs_reset TRUE}
            }
            {unless {== $dx_vocal_notes $dx_local_vocal_notes}
               {set $dx_vocal_notes $dx_local_vocal_notes}
               {set $dx_vocal_notes_needs_reset TRUE}
            }
            {unless {== $dx_vocal_overdrive $dx_local_vocal_overdrive}
               {set $dx_vocal_overdrive $dx_local_vocal_overdrive}
               {set $dx_vocal_overdrive_needs_reset TRUE}
            }
         )
         ; checks every instrument texture if playing offline or if modifier was disabled
         (all
            {dx_log_writer info {sprint "dx_resync_local_textures: resetting every texture to local setting"}}
            {unless {== $dx_highway_guitar $dx_local_highway_guitar}
               {set $dx_highway_guitar $dx_local_highway_guitar}
               {set $dx_highway_guitar_needs_reset TRUE}
            }
            {unless {== $dx_streak_guitar $dx_local_streak_guitar}
               {set $dx_streak_guitar $dx_local_streak_guitar}
               {set $dx_streak_guitar_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_guitar $dx_local_overdrive_guitar}
               {set $dx_overdrive_guitar $dx_local_overdrive_guitar}
               {set $dx_overdrive_guitar_needs_reset TRUE}
            }
            {unless {== $dx_highway_bass $dx_local_highway_bass}
               {set $dx_highway_bass $dx_local_highway_bass}
               {set $dx_highway_bass_needs_reset TRUE}
            }
            {unless {== $dx_streak_bass $dx_local_streak_bass}
               {set $dx_streak_bass $dx_local_streak_bass}
               {set $dx_streak_bass_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_bass $dx_local_overdrive_bass}
               {set $dx_overdrive_bass $dx_local_overdrive_bass}
               {set $dx_overdrive_bass_needs_reset TRUE}
            }
            {unless {== $dx_highway_drum $dx_local_highway_drum}
               {set $dx_highway_drum $dx_local_highway_drum}
               {set $dx_highway_drum_needs_reset TRUE}
            }
            {unless {== $dx_streak_drum $dx_local_streak_drum}
               {set $dx_streak_drum $dx_local_streak_drum}
               {set $dx_streak_drum_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_drum $dx_local_overdrive_drum}
               {set $dx_overdrive_drum $dx_local_overdrive_drum}
               {set $dx_overdrive_drum_needs_reset TRUE}
            }
            {unless {== $dx_highway_keys $dx_local_highway_keys}
               {set $dx_highway_keys $dx_local_highway_keys}
               {set $dx_highway_keys_needs_reset TRUE}
            }
            {unless {== $dx_streak_keys $dx_local_streak_keys}
               {set $dx_streak_keys $dx_local_streak_keys}
               {set $dx_streak_keys_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_keys $dx_local_overdrive_keys}
               {set $dx_overdrive_keys $dx_local_overdrive_keys}
               {set $dx_overdrive_keys_needs_reset TRUE}
            }
            {unless {== $dx_keyboard $dx_local_keyboard}
               {set $dx_keyboard $dx_local_keyboard}
               {set $dx_keyboard_needs_reset TRUE}
            }
            {unless {== $dx_streak_prokeys $dx_local_streak_prokeys}
               {set $dx_streak_prokeys $dx_local_streak_prokeys}
               {set $dx_streak_prokeys_needs_reset TRUE}
            }
            {unless {== $dx_overdrive_prokeys $dx_local_overdrive_prokeys}
               {set $dx_overdrive_prokeys $dx_local_overdrive_prokeys}
               {set $dx_overdrive_prokeys_needs_reset TRUE}
            }
            {unless {== $dx_vocal_arrow $dx_local_vocal_arrow}
               {set $vocal_arrow $dx_local_vocal_arrowd}
               {set $dx_vocal_arrow_needs_reset TRUE}
            }
            {unless {== $dx_vocal_highway $dx_local_vocal_highway}
               {set $dx_vocal_highway $dx_local_vocal_highway}
               {set $dx_vocal_highway_needs_reset TRUE}
            }
            {unless {== $dx_vocal_notes $dx_local_vocal_notes}
               {set $dx_vocal_notes $dx_local_vocal_notes}
               {set $dx_vocal_notes_needs_reset TRUE}
            }
            {unless {== $dx_vocal_overdrive $dx_local_vocal_overdrive}
               {set $dx_vocal_overdrive $dx_local_vocal_overdrive}
               {set $dx_vocal_overdrive_needs_reset TRUE}
            }
         )
      }
   }
}
{func
   dx_apply_remote_textures
   {if_else {modifier_mgr is_modifier_active mod_remote_texture_sync}
      {do
         {user_mgr
            foreach_user
            $user
            {switch {$user get_track_type}
               ((kTrackGuitar kTrackRealGuitar)
                  {if_else {$user is_local}
                     ; if the local player is on guitar, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackGuitar}
                     ; otherwise apply a new guitar texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_highway_guitar $dx_highway_guitar}
                           {set $dx_highway_guitar $dx_remote_highway_guitar}
                           {set $dx_highway_guitar_needs_reset TRUE}
                        }
                        {unless {> $dx_num_active_strings 1} ; don't apply streaks/overdrive if multiple strings players are active
                           {do
                              {unless {== $dx_remote_streak_guitar $dx_streak_guitar}
                                 {set $dx_streak_guitar $dx_remote_streak_guitar}
                                 {set $dx_streak_guitar_needs_reset TRUE}
                              }
                              {unless {== $dx_remote_overdrive_guitar $dx_overdrive_guitar}
                                 {set $dx_overdrive_guitar $dx_remote_overdrive_guitar}
                                 {set $dx_overdrive_guitar_needs_reset TRUE}
                              }
                           }
                        }
                     }
                  }
               )
               ((kTrackBass kTrackRealBass)
                  {if_else {$user is_local}
                     ; if the local player is on bass, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackBass}
                     ; otherwise apply a new bass texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_highway_bass $dx_highway_bass}
                           {set $dx_highway_bass $dx_remote_highway_bass}
                           {set $dx_highway_bass_needs_reset TRUE}
                        }
                        {unless {> $dx_num_active_strings 1} ; don't apply streaks/overdrive if multiple strings players are active
                           {do
                              {unless {== $dx_remote_streak_bass $dx_streak_bass}
                                 {set $dx_streak_bass $dx_remote_streak_bass}
                                 {set $dx_streak_bass_needs_reset TRUE}
                              }
                              {unless {== $dx_remote_overdrive_bass $dx_overdrive_bass}
                                 {set $dx_overdrive_bass $dx_remote_overdrive_bass}
                                 {set $dx_overdrive_bass_needs_reset TRUE}
                              }
                           }
                        }
                     }
                  }
               )
               (kTrackDrum
                  {if_else {$user is_local}
                     ; if the local player is on drums, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackDrum}
                     ; otherwise apply a new drum texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_highway_drum $dx_highway_drum}
                           {set $dx_highway_drum $dx_remote_highway_drum}
                           {set $dx_highway_drum_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_streak_drum $dx_streak_drum}
                           {set $dx_streak_drum $dx_remote_streak_drum}
                           {set $dx_streak_drum_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_overdrive_drum $dx_overdrive_drum}
                           {set $dx_overdrive_drum $dx_remote_overdrive_drum}
                           {set $dx_overdrive_drum_needs_reset TRUE}
                        }
                     }
                  }
               )
               (kTrackKeys
                  {if_else {$user is_local}
                     ; if the local player is on keys, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackKeys}
                     ; otherwise apply a new keys texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_highway_keys $dx_highway_keys}
                           {set $dx_highway_keys $dx_remote_highway_keys}
                           {set $dx_highway_keys_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_streak_keys $dx_streak_keys}
                           {set $dx_streak_keys $dx_remote_streak_keys}
                           {set $dx_streak_keys_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_overdrive_keys $dx_overdrive_keys}
                           {set $dx_overdrive_keys $dx_remote_overdrive_keys}
                           {set $dx_overdrive_keys_needs_reset TRUE}
                        }
                     }
                  }
               )
               (kTrackRealKeys
                  {if_else {$user is_local}
                     ; if the local player is on pro keys, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackRealKeys}
                     ; otherwise apply a new pro keys texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_keyboard $dx_keyboard}
                           {set $dx_keyboard $dx_remote_keyboard}
                           {set $dx_keyboard_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_streak_prokeys $dx_streak_prokeys}
                           {set $dx_streak_prokeys $dx_remote_streak_prokeys}
                           {set $dx_streak_prokeys_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_overdrive_prokeys $dx_overdrive_prokeys}
                           {set $dx_overdrive_prokeys $dx_remote_overdrive_prokeys}
                           {set $dx_overdrive_prokeys_needs_reset TRUE}
                        }
                     }
                  }
               )
               (kTrackVocals
                  {if_else {$user is_local}
                     ; if the local player is on vocals, run function to (re)apply their own theme if needed
                     {dx_resync_local_textures kTrackVocals}
                     ; otherwise apply a new vocals texture if one was received from a remote player
                     {do
                        {unless {== $dx_remote_vocal_arrow $dx_vocal_arrow}
                           {set $dx_vocal_arrow $dx_remote_vocal_arrow}
                           {set $dx_vocal_arrow_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_vocal_highway $dx_vocal_highway}
                           {set $dx_vocal_highway $dx_remote_vocal_highway}
                           {set $dx_vocal_highway_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_vocal_notes $dx_vocal_notes}
                           {set $dx_vocal_notes $dx_remote_vocal_notes}
                           {set $dx_vocal_notes_needs_reset TRUE}
                        }
                        {unless {== $dx_remote_vocal_overdrive $dx_vocal_overdrive}
                           {set $dx_vocal_overdrive $dx_remote_vocal_overdrive}
                           {set $dx_vocal_overdrive_needs_reset TRUE}
                        }
                     }
                  }
               )
            }
         }
      }
      {dx_resync_local_textures all}
   }
}
; function to tell remote players what texture(s) the local player has
{func
   dx_sync_remote_textures
   ($instrument)
   {do
      {dx_log_writer info {sprint "dx_sync_remote_textures"}}
      {if_else {session_mgr is_local}
         {dx_resync_local_textures all} ; automatically use local user's own theme if playing offline
         {do
            {dx_log_writer info {sprint "dx_sync_remote_textures: PREPPING TO SEND TEXTURES"}}
            {dx_resync_local_textures $instrument} ; makes sure the local user is using their own theme on their instrument
            {switch $instrument
               ((kTrackGuitar kTrackRealGuitar)
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING GUITAR MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED GUITAR TEXTURES"}}
                                 {set $dx_remote_highway_guitar {',' $dx_local_highway_guitar}}
                                 {set $dx_remote_streak_guitar {',' $dx_local_streak_guitar}}
                                 {set $dx_remote_overdrive_guitar {',' $dx_local_overdrive_guitar}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
               ((kTrackBass kTrackRealBass)
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING bass MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED bass TEXTURES"}}
                                 {set $dx_remote_highway_bass {',' $dx_local_highway_bass}}
                                 {set $dx_remote_streak_bass {',' $dx_local_streak_bass}}
                                 {set $dx_remote_overdrive_bass {',' $dx_local_overdrive_bass}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
               (kTrackDrum
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING drum MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED drum TEXTURES"}}
                                 {set $dx_remote_highway_drum {',' $dx_local_highway_drum}}
                                 {set $dx_remote_streak_drum {',' $dx_local_streak_drum}}
                                 {set $dx_remote_overdrive_drum {',' $dx_local_overdrive_drum}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
               (kTrackKeys
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING keys MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED keys TEXTURES"}}
                                 {set $dx_remote_highway_keys {',' $dx_local_highway_keys}}
                                 {set $dx_remote_streak_keys {',' $dx_local_streak_keys}}
                                 {set $dx_remote_overdrive_keys {',' $dx_local_overdrive_keys}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
               (kTrackRealKeys
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING prokeys MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED prokeys TEXTURES"}}
                                 {set $dx_remote_keyboard {',' $dx_local_keyboard}}
                                 {set $dx_remote_streak_prokeys {',' $dx_local_streak_prokeys}}
                                 {set $dx_remote_overdrive_prokeys {',' $dx_local_overdrive_prokeys}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
               (kTrackVocals
                  {do
                     {dx_log_writer info {sprint "dx_sync_remote_textures: SENDING vocals MESSAGE"}}
                     {session send_msg_to_all
                        {'`' 
                           (
                              {do
                                 {dx_log_writer info {sprint "dx_sync_remote_textures: RECEIVED vocals TEXTURES"}}
                                 {set $dx_remote_vocal_arrow {',' $dx_local_vocal_arrow}}
                                 {set $dx_remote_vocal_highway {',' $dx_local_vocal_highway}}
                                 {set $dx_remote_vocal_notes {',' $dx_local_vocal_notes}}
                                 {set $dx_remote_vocal_overdrive {',' $dx_local_vocal_overdrive}}
                              }
                           )
                           kNetReliable
                        }
                     }
                  }
               )
            }
         }
      }
   }
}
; each local player of a session will send their current instrument's track speed to online players
{func
   dx_apply_remote_track_speeds
   {unless {session_mgr is_local}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {if {{$player get_user} is_local}
            {switch {$player instrument}
               (guitar
                  {set $remote_trackspeed_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_guitar {',' $trackspeed_guitar}}) kNetReliable}}
               )
               (bass
                  {set $remote_trackspeed_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_bass {',' $trackspeed_bass}}) kNetReliable}}
               )
               (real_guitar
                  {set $remote_trackspeed_real_guitar FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_guitar {',' $trackspeed_real_guitar}}) kNetReliable}}
               )
               (real_bass
                  {set $remote_trackspeed_real_bass FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_bass {',' $trackspeed_real_bass}}) kNetReliable}}
               )
               ((drum real_drum)
                  {set $remote_trackspeed_drum FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_drum {',' $trackspeed_drum}}) kNetReliable}}
               )
               (keys
                  {set $remote_trackspeed_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_keys {',' $trackspeed_keys}}) kNetReliable}}
               )
               (real_bass
                  {set $remote_trackspeed_real_keys FALSE}
                  {session send_msg_to_all {'`' ({set $remote_trackspeed_real_keys {',' $trackspeed_real_keys}}) kNetReliable}}
               )
               (vocals kDataUnhandled) ;lol vox
            }
         }
      }
   }
}
{func
   dx_track_configurer
   {if {&& {session is_in_game} $dx_track_config_changed}
      {beatmatch foreach_active_player $player
         {unless {== {$player instrument} vocals}
            {DX_FIND_LANED_TRACK set_pitch $dx_pitch}
            {DX_FIND_LANED_TRACK set_fov $dx_fov}
            {DX_FIND_LANED_TRACK set_cam_pos $dx_x_pos $dx_y_pos $dx_z_pos}
         }
      }
   }
}
{func
   dx_texture_corrector
   {unless {== $dx_streak_guitar none} {set $dx_streak_guitar_needs_reset TRUE}}

   {unless {== $dx_streak_bass none} {set $dx_streak_bass_needs_reset TRUE}}

   {unless {== $dx_streak_drum none} {set $dx_streak_drum_needs_reset TRUE}}

   {unless {== $dx_streak_keys none} {set $dx_streak_keys_needs_reset TRUE}}
   {unless {== $dx_streak_prokeys none} {set $dx_streak_prokeys_needs_reset TRUE}}

   {unless {== $dx_overdrive_guitar none} {set $dx_overdrive_guitar_needs_reset TRUE}}

   {unless {== $dx_overdrive_bass none} {set $dx_overdrive_bass_needs_reset TRUE}}

   {unless {== $dx_overdrive_drum none} {set $dx_overdrive_drum_needs_reset TRUE}}

   {unless {== $dx_overdrive_keys none} {set $dx_overdrive_keys_needs_reset TRUE}}
   {unless {== $dx_overdrive_prokeys none} {set $dx_overdrive_prokeys_needs_reset TRUE}}

   {unless {== $dx_keyboard none} {set $dx_keyboard_needs_reset TRUE}}

   {unless {== $dx_highway_guitar none} {set $dx_highway_guitar_needs_reset TRUE}}

   {unless {== $dx_highway_bass none} {set $dx_highway_bass_needs_reset TRUE}}

   {unless {== $dx_highway_drum none} {set $dx_highway_drum_needs_reset TRUE}}

   {unless {== $dx_highway_keys none} {set $dx_highway_keys_needs_reset TRUE}}

   {unless {== $dx_smasher none} {set $dx_smasher_needs_reset TRUE}}

   {unless {== $dx_gem none} {set $dx_gem_needs_reset TRUE}}

   {unless {|| {== $dx_sustain rb3} {== $dx_sustain empty}} {set $dx_sustain_needs_reset TRUE}}

   {unless {== $dx_lanes none} {set $dx_lanes_needs_reset TRUE}}

   {unless {== $dx_crowd_meter none} {set $dx_crowd_meter_needs_reset TRUE}}

   {unless {== $dx_multiplier_ring none} {set $dx_multiplier_ring_needs_reset TRUE}}

   {unless {== $dx_overdrive_bar none} {set $dx_overdrive_bar_needs_reset TRUE}}

   {unless {== $dx_rails none} {set $dx_rails_needs_reset TRUE}}
   
   {unless {== $dx_beatlines none} {set $dx_beat_lines_needs_reset TRUE}}

   {unless {== $dx_score_box none} {set $dx_score_box_needs_reset TRUE}}

   {unless {== $dx_stars none} {set $dx_stars_needs_reset TRUE}}

   {unless {== $dx_font none} {set $dx_font_needs_reset TRUE}}

   {unless {== $dx_solo_box none} {set $dx_solo_box_needs_reset TRUE}}

   {unless {== $dx_bre none} {set $dx_bre_needs_reset TRUE}}

   {unless {== $dx_flames none} {set $dx_flames_needs_reset TRUE}}

   {unless {== $dx_vocal_arrow none} {set $dx_vocal_arrow_needs_reset TRUE}}

   {unless {== $dx_vocal_highway none} {set $dx_vocal_highway_needs_reset TRUE}}

   {unless {== $dx_vocal_notes none} {set $dx_vocal_notes_needs_reset TRUE}}

   {unless {== $dx_vocal_overdrive none} {set $dx_vocal_overdrive_needs_reset TRUE}}

   {unless {== $dx_multiangle 1} {set $dx_use_multiangle TRUE}}

   {unless {== $dx_animated_gem none} {do {set $dx_animated_gems_enabled TRUE} {set $dx_animated_gem_needs_reset TRUE}}}
}
; used to unhide tracks incase the user quit the last song mid-countdown
{func
   dx_reset_track_meshes
   {set $track_out_0 FALSE}
   {set $track_out_1 FALSE}
   {set $track_out_2 FALSE}
   {set $track_out_3 FALSE}
   {beatmatch foreach_active_player $player
      {unless {== {$player instrument} vocals}
         ;make sure to show the correct rails if the same slot was on a different instrument last song
         {{DX_FIND_LANED_TRACK find guitar_draw.grp} set showing {|| {== {$player instrument} guitar} {== {$player instrument} bass} {== {$player instrument} keys}}}
         {{DX_FIND_LANED_TRACK find drum_draw.grp} set showing {|| {== {$player instrument} drum} {== {$player instrument} real_drum}}}
         {{DX_FIND_LANED_TRACK find keyboard_draw.grp} set showing {== {$player instrument} real_keys}}
         {{{DX_FIND_LANED_TRACK get star_power_meter} find power_meter.grp} set showing TRUE}
         {{{DX_FIND_LANED_TRACK get streak_meter} find draw.grp} set showing TRUE}
         {{{DX_FIND_LANED_TRACK get streak_meter} find streak_meter.grp} set showing TRUE}
         {{{DX_FIND_LANED_TRACK get streak_meter} find peak_state_sm_mesh.mesh} set showing TRUE}
         {{{DX_FIND_LANED_TRACK get streak_meter} find peak_state_sm_mesh_counter.mesh} set showing TRUE}
         {{DX_FIND_LANED_TRACK find overdrive_plane.mesh} set showing TRUE}
         {{DX_FIND_LANED_TRACK find rig.grp} set_local_pos 0 0 0}
      }
   }
}