{func
   dx_countdown_var_reset
      {set $current_beat FALSE}
      {set $startingbpm FALSE}
      {set $dx_bpm_counter_for_countdown FALSE}
      {foreach $entry (guitar bass drum keys vocals harm real_guitar real_bass real_drum real_keys)
         {set_var {sprint "tracked_beat_no_notes_start_" $entry} FALSE}
         {set_var {sprint "tracked_beat_no_notes_end_" $entry} FALSE}
         {set_var {sprint "first_" $entry "_gem_tracked"} FALSE}
         {set_var {sprint "current_tracked_beat_" $entry} FALSE}
         {set_var {sprint "delay_tracked_" $entry} FALSE}
         {set_var {sprint "solo_box_up_" $entry} FALSE}
      }
}
{func
   dx_midi_parser_var_reset
   {resize $guitar_note_tracker 0} ;resize the array
   {push_back $guitar_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $guitar_note_tracker_2 0} ;resize the array
   {set $guitar_last_note_time -1}

   {resize $drum_note_tracker 0} ;resize the array
   {push_back $drum_note_tracker (none none)} ;push_back a new state into the array

   {resize $drum_note_tracker_2 0} ;resize the array
   {set $drum_last_note_time -1}

   {resize $real_drum_note_tracker 0} ;resize the array
   {push_back $real_drum_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_drum_note_tracker_2 0} ;resize the array
   {set $real_drum_last_note_time -1}

   {resize $bass_note_tracker 0} ;resize the array
   {push_back $bass_note_tracker (none none)} ;push_back a new state into the array

   {resize $bass_note_tracker_2 0} ;resize the array
   {set $bass_last_note_time -1}

   {resize $keys_note_tracker 0} ;resize the array
   {push_back $keys_note_tracker (none none)} ;push_back a new state into the array

   {resize $keys_note_tracker_2 0} ;resize the array
   {set $keys_last_note_time -1}

   {resize $vocals_note_tracker 0} ;resize the array
   {push_back $vocals_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $harm_note_tracker 0} ;resize the array
   {push_back $harm_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_guitar_note_tracker 0} ;resize the array
   {push_back $real_guitar_note_tracker (none none)} ;push_back a new state into the array
   
   {resize $real_guitar_note_tracker_2 0} ;resize the array
   {set $real_guitar_last_note_time -1}

   {resize $real_bass_note_tracker 0} ;resize the array
   {push_back $real_bass_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_bass_note_tracker_2 0} ;resize the array
   {set $real_bass_last_note_time -1}

   {resize $real_keys_note_tracker 0} ;resize the array
   {push_back $real_keys_note_tracker (none none)} ;push_back a new state into the array

   {resize $real_keys_note_tracker_2 0} ;resize the array
   {set $real_keys_last_note_time -1}

   {set $dx_final_note 0}


}
{func
   dx_get_current_beat
   {int {+ 0.5 {seconds_to_beat {/ {beatmatch get_song_ms} 1000}}}}
}
{func
   dx_show_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {solo_start.trig trigger}
      {set_var {sprint "solo_box_up_" $instrument} TRUE}
   }
}
{func
   dx_restore_solo_box
   ($player $instrument)
   {dx_clean_solo_box $player $instrument}
   {set_var {sprint "solo_box_up_" $instrument} FALSE}
   {set_var {sprint "delay_tracked_" $instrument} FALSE}
   {set_var {sprint "current_tracked_beat_" $instrument} {+ {eval {var {sprint "current_tracked_beat_" $instrument}}} 1}}
}
{func
   dx_clean_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {$this set_showing TRUE}
   {points.lbl set_token_fmt dx_points}
}
{func
   dx_hide_solo_box
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {$this set_showing TRUE}
      {$this end_solo}
      {solo_end.trig trigger}
      {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int 2}}
      {solo_rating.lbl set_token_fmt get_ready}
      {score.lbl set_token_fmt os_blnk}
      {points.lbl set_token_fmt os_blnk}
   }
}
{func
   dx_final_percent_report
   ($player $instrument)
   {if {! {|| {== $instrument vocals} {== $instrument harm}}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
      {$this set_showing FALSE}
      {$this end_solo}
      {solo_end.trig trigger}
      {solo_percent.lbl set_token_fmt os_blnk}
      {solo_rating.lbl set_token_fmt os_blnk}
      {score.lbl set_token_fmt os_blnk}
      {points.lbl set_token_fmt os_blnk}
      {set_var {sprint "solo_box_up_" $instrument} FALSE}
   }
}
{func
   dx_handle_final_note_report
   ($player $instrument $gems_passed $gems_missed)
   {if {! {|| {== $instrument vocals} {== $instrument harm}}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
      {if_else {== {+ $gems_passed $gems_missed} 0}
         {solo_percent.lbl set_token_fmt full_combo_short}
         {if_else {== $gems_passed 0}
            {solo_percent.lbl set_token_fmt overstrums {localize_separated_int {int $gems_missed}}}
            {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int {int {- 0 $gems_passed}}}}
         }
      }
   }
}
{func
   dx_final_note_report
   ($player $instrument)
   {set_var {sprint $instrument "_finalnote"}
      {dx_handle_final_note_report
         $player
         $instrument
         {eval {var {sprint "num_gems_pass_" $instrument}}}
         {eval {var {sprint "num_gems_miss_" $instrument}}}
      }
   }
}
{func
   dx_solo_set_label
   ($player $instrument)
   {if_else {|| {== $instrument vocals} {== $instrument harm}}
      {set_this {find_obj DX_VOCALDIR player_feedback}}
      {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
   }
   {if {! {$this in_solo}}
      {solo_percent.lbl set_token_fmt solo_countdown {localize_separated_int {int {/ {- {eval {var {sprint "tracked_beat_no_notes_end_" $instrument}}} {dx_get_current_beat}} 4}}}}
   }
}
{func
   dx_hide_everything
   ($player $instrument)
   {if
      {&&
         {|| {gamemode in_mode qp_coop} {gamemode in_mode tour} {gamemode in_mode audition}}
         {||
            {&& {== $dx_hide_on_countdown single} {== $dx_num_gem_tracks 1}}
            {&& {== $dx_hide_on_countdown multi} {>= $dx_num_gem_tracks 1}}
         }
      }
      {script_task kTaskSeconds
         (delay 0.75)
         (script 
            {unless {|| {== $instrument vocals} {== $instrument harm}}
               ; bring track out when countdown begins
               ; unless statements prevent track from repeatedly popping out if it's already invisible
               {set_var {sprint "track_out_" {{$player get_user} get_slot_num}} TRUE}
               {set_this {find_obj DX_GEMTRACKDIR}}
               {track_out.trig trigger}
               {script_task kTaskSeconds
                  (delay 0.5) ; begin hiding track meshes 0.5 seconds after track_out animation begins while solo box is still visible
                  (script
                     ; bring track back in to keep solo box visible
                     {track_in.trig trigger}
                     ;turn on autoplay while track is hidden to block user inputs
                     {if {{$player get_user} is_local}
                        {if {! {modifier_mgr is_modifier_active mod_auto_play}}
                           {$player set_auto_play TRUE}
                        }
                     }
                     ; hide track meshes
                     {switch $instrument
                        ((guitar bass keys) {guitar_draw.grp set_showing FALSE})
                        ((drum real_drum) {drum_draw.grp set_showing FALSE})
                        (real_keys {keyboard_draw.grp set_showing FALSE})
                        kDataUnhandled
                     }
                     {{{$this get star_power_meter} find power_meter.grp} set_showing FALSE}
                     {{{$this get streak_meter} find draw.grp} set_showing FALSE}
                     {{{$this get streak_meter} find streak_meter.grp} set_showing FALSE}
                     {overdrive_plane.mesh set_showing FALSE}
                     {rig.grp set_local_pos 99 99 99}
                  )
               }
            }
         )
      }
   }
}
{func
   dx_restore_everything
   ($player $instrument)
   {if
      {&&
         {|| {gamemode in_mode qp_coop} {gamemode in_mode tour} {gamemode in_mode audition}}
         {||
            {&& {== $dx_hide_on_countdown single} {== $dx_num_gem_tracks 1}}
            {&& {== $dx_hide_on_countdown multi} {>= $dx_num_gem_tracks 1}}
         }
      }
      {unless {|| {== $instrument vocals} {== $instrument harm}}
         {set_var {sprint "track_out_" {{$player get_user} get_slot_num}} FALSE}
         {set_this {find_obj DX_GEMTRACKDIR}}
         ; remove "invisible" track from view while meshes are still hidden
         {track_out.trig trigger}
         {script_task kTaskSeconds
            ; begin restoring track meshes 0.5 seconds after track_out animation begins while solo box is still visible
            (delay 0.5)
            (script
               {track_in.trig trigger}
               ;disable autoplay to restore user inputs
               {if {{$player get_user} is_local}
                  {if {! {modifier_mgr is_modifier_active mod_auto_play}}
                     {$player set_auto_play FALSE}
                  }
               }
               {switch $instrument
                  ((guitar bass keys) {guitar_draw.grp set_showing TRUE})
                  (drum {drum_draw.grp set_showing TRUE})
                  (real_keys {keyboard_draw.grp set_showing TRUE})
                  kDataUnhandled
               }
               {{{$this get star_power_meter} find power_meter.grp} set_showing TRUE}
               {{{$this get streak_meter} find draw.grp} set_showing TRUE}
               {{{$this get streak_meter} find streak_meter.grp} set_showing TRUE}
               {overdrive_plane.mesh set_showing TRUE}
               {rig.grp set_local_pos 0 0 0}
            )
         }
      }
   }
}
#define ON_BEAT_FUNCS
(
   {dx_show_solo_box $player $instrument}
   {dx_solo_set_label $player $instrument}
   {dx_hide_everything $player $instrument}
)
{func
   dx_check_beat
   ($player $instrument $input)
   {switch $input
      (1.0
         {if {eval {var {sprint "solo_box_up_" $instrument}}}
            {dx_restore_solo_box $player $instrument}
         }
         {dx_clean_solo_box $player $instrument}
      )
      (8.0
         {if {eval {var {sprint "solo_box_up_" $instrument}}}
            {dx_hide_solo_box $player $instrument}
            {if {! {|| {== $instrument vocals} {== $instrument harm}}}
               {dx_restore_everything $player $instrument}
            }
         }
      )
      ((104.0 204.0 304.0 404.0 504.0 604.0 704.0 804.0 904.0) ON_BEAT_FUNCS)
      ((108.0 208.0 308.0 408.0 508.0 608.0 708.0 808.0 908.0) ON_BEAT_FUNCS)
      ((12.0 112.0 212.0 312.0 412.0 512.0 612.0 712.0 812.0 912.0) ON_BEAT_FUNCS)
      ((16.0 116.0 216.0 316.0 416.0 516.0 616.0 716.0 816.0 916.0) ON_BEAT_FUNCS)
      ((20.0 120.0 220.0 320.0 420.0 520.0 620.0 720.0 820.0 920.0) ON_BEAT_FUNCS)
      ((24.0 124.0 224.0 324.0 424.0 524.0 624.0 724.0 824.0 924.0) ON_BEAT_FUNCS)
      ((28.0 128.0 228.0 328.0 428.0 528.0 628.0 728.0 828.0 928.0) ON_BEAT_FUNCS)
      ((32.0 132.0 232.0 332.0 432.0 532.0 632.0 732.0 832.0 932.0) ON_BEAT_FUNCS)
      ((36.0 136.0 236.0 336.0 436.0 536.0 636.0 736.0 836.0 936.0) ON_BEAT_FUNCS)
      ((40.0 140.0 240.0 340.0 440.0 540.0 640.0 740.0 840.0 940.0) ON_BEAT_FUNCS)
      ((44.0 144.0 244.0 344.0 444.0 544.0 644.0 744.0 844.0 944.0) ON_BEAT_FUNCS)
      ((48.0 148.0 248.0 348.0 448.0 548.0 648.0 748.0 848.0 948.0) ON_BEAT_FUNCS)
      ((52.0 152.0 252.0 352.0 452.0 552.0 652.0 752.0 852.0 952.0) ON_BEAT_FUNCS)
      ((56.0 156.0 256.0 356.0 456.0 556.0 656.0 756.0 856.0 956.0) ON_BEAT_FUNCS)
      ((60.0 160.0 260.0 360.0 460.0 560.0 660.0 760.0 860.0 960.0) ON_BEAT_FUNCS)
      ((64.0 164.0 264.0 364.0 464.0 564.0 664.0 764.0 864.0 964.0) ON_BEAT_FUNCS)
      ((68.0 168.0 268.0 368.0 468.0 568.0 668.0 768.0 868.0 968.0) ON_BEAT_FUNCS)
      ((72.0 172.0 272.0 372.0 472.0 572.0 672.0 772.0 872.0 972.0) ON_BEAT_FUNCS)
      ((76.0 176.0 276.0 376.0 476.0 576.0 676.0 776.0 876.0 976.0) ON_BEAT_FUNCS)
      ((80.0 180.0 280.0 380.0 480.0 580.0 680.0 780.0 880.0 980.0) ON_BEAT_FUNCS)
      ((84.0 184.0 284.0 384.0 484.0 584.0 684.0 784.0 884.0 984.0) ON_BEAT_FUNCS)
      ((88.0 188.0 288.0 388.0 488.0 588.0 688.0 788.0 888.0 988.0) ON_BEAT_FUNCS)
      ((92.0 192.0 292.0 392.0 492.0 592.0 692.0 792.0 892.0 992.0) ON_BEAT_FUNCS)
      ((96.0 196.0 296.0 396.0 496.0 596.0 696.0 796.0 896.0 996.0) ON_BEAT_FUNCS)
      ((100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0) ON_BEAT_FUNCS)
      kDataUnhandled
   }
}
