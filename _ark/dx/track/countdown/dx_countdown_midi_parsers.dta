{new
   MidiParser
   guitar_timer
   (track_name 'PART GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {unless $first_guitar_gem_tracked
         {set $first_guitar_gem_tracked TRUE}
         {set $tracked_break_num_guitar 0}
         {set $first_guitar_gem_beat {int $mp.start}}
         {if {> $first_guitar_gem_beat 16}
            {push_back $guitar_note_tracker ("delay_0" 0 $first_guitar_gem_beat)}
            {set $guitar_note_tracker {array $guitar_note_tracker}}
            {set $tracked_break_num_guitar 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $guitar_tracked_start {int $mp.start}}
         {set $guitar_tracked_prev_end {int {- $guitar_tracked_start $mp.prev_end}}}
         {push_back $guitar_note_tracker ({sprint "delay_" $tracked_break_num_guitar} $guitar_tracked_prev_end $guitar_tracked_start)}
         {set $guitar_note_tracker {array $guitar_note_tracker}}
         {set $tracked_break_num_guitar {+ $tracked_break_num_guitar 1}}
         {dx_log_writer countdown {sprint "Guitar Tracker array: " $guitar_note_tracker}}
      }
      {set $dx_final_note_guitar {int $mp.end}}
      {if {> $dx_final_note_guitar $dx_final_note} {set $dx_final_note $dx_final_note_guitar}}
   )
}
{new
   MidiParser
   drum_timer
   (track_name 'PART DRUMS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 96 97 98 99 100 103)
   )
   (midi
      {unless $first_drum_gem_tracked
         {set $first_drum_gem_tracked TRUE}
         {set $tracked_break_num_drum 0}
         {set $first_drum_gem_beat {int $mp.start}}
         {if {> $first_drum_gem_beat 16}
            {push_back $drum_note_tracker ("delay_0" 0 $first_drum_gem_beat)}
            {set $drum_note_tracker {array $drum_note_tracker}}
            {set $tracked_break_num_drum 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $drum_tracked_start {int $mp.start}}
         {set $drum_tracked_prev_end {int {- $drum_tracked_start $mp.prev_end}}}
         {push_back $drum_note_tracker ({sprint "delay_" $tracked_break_num_drum} $drum_tracked_prev_end $drum_tracked_start)}
         {set $drum_note_tracker {array $drum_note_tracker}}
         {set $tracked_break_num_drum {+ $tracked_break_num_drum 1}}
         {dx_log_writer countdown {sprint "Drum Tracker array: " $drum_note_tracker}}
      }
      {set $dx_final_note_drum {int $mp.end}}
      {if {> $dx_final_note_drum $dx_final_note} {set $dx_final_note $dx_final_note_drum}}
   )
}
{new
   MidiParser
   bass_timer
   (track_name 'PART BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {unless $first_bass_gem_tracked
         {set $first_bass_gem_tracked TRUE}
         {set $tracked_break_num_bass 0}
         {set $first_bass_gem_beat {int $mp.start}}
         {if {> $first_bass_gem_beat 16}
            {push_back $bass_note_tracker ("delay_0" 0 $first_bass_gem_beat)}
            {set $bass_note_tracker {array $bass_note_tracker}}
            {set $tracked_break_num_bass 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $bass_tracked_start {int $mp.start}}
         {set $bass_tracked_prev_end {int {- $bass_tracked_start $mp.prev_end}}}
         {push_back $bass_note_tracker ({sprint "delay_" $tracked_break_num_bass} $bass_tracked_prev_end $bass_tracked_start)}
         {set $bass_note_tracker {array $bass_note_tracker}}
         {set $tracked_break_num_bass {+ $tracked_break_num_bass 1}}
         {dx_log_writer countdown {sprint "Bass Tracker array: " $bass_note_tracker}}
      }
      {set $dx_final_note_bass {int $mp.end}}
      {if {> $dx_final_note_bass $dx_final_note} {set $dx_final_note $dx_final_note_bass}}
   )
}
{new
   MidiParser
   keys_timer
   (track_name 'PART KEYS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_keys_gem_tracked
         {set $first_keys_gem_tracked TRUE}
         {set $tracked_break_num_keys 0}
         {set $first_keys_gem_beat {int $mp.start}}
         {if {> $first_keys_gem_beat 16}
            {push_back $keys_note_tracker ("delay_0" 0 $first_keys_gem_beat)}
            {set $keys_note_tracker {array $keys_note_tracker}}
            {set $tracked_break_num_keys 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $keys_tracked_start {int $mp.start}}
         {set $keys_tracked_prev_end {int {- $keys_tracked_start $mp.prev_end}}}
         {push_back $keys_note_tracker ({sprint "delay_" $tracked_break_num_keys} $keys_tracked_prev_end $keys_tracked_start)}
         {set $keys_note_tracker {array $keys_note_tracker}}
         {set $tracked_break_num_keys {+ $tracked_break_num_keys 1}}
         {dx_log_writer countdown {sprint "Keys Tracker array: " $keys_note_tracker}}
      }
      {set $dx_final_note_keys {int $mp.end}}
      {if {> $dx_final_note_keys $dx_final_note} {set $dx_final_note $dx_final_note_keys}}
   )
}
#ifdef RB3DX
{new
   MidiParser
   vocals_timer
   (track_name 'PART VOCALS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (105 106)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_vocals_gem_tracked
         {set $first_vocals_gem_tracked TRUE}
         {set $tracked_break_num_vocals 0}
         {set $first_vocals_gem_beat {int $mp.start}}
         {if {> $first_vocals_gem_beat 16}
            {push_back $vocals_note_tracker ("delay_0" 0 $first_vocals_gem_beat)}
            {set $vocals_note_tracker {array $vocals_note_tracker}}
            {set $tracked_break_num_vocals 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $vocals_tracked_start {int $mp.start}}
         {set $vocals_tracked_prev_end {int {- $vocals_tracked_start $mp.prev_end}}}
         {push_back $vocals_note_tracker ({sprint "delay_" $tracked_break_num_vocals} $vocals_tracked_prev_end $vocals_tracked_start)}
         {set $vocals_note_tracker {array $vocals_note_tracker}}
         {set $tracked_break_num_vocals {+ $tracked_break_num_vocals 1}}
         {dx_log_writer countdown {sprint "Vocal Tracker array: " $vocals_note_tracker}}
      }
      {set $dx_final_note_vocals {int $mp.end}}
      {if {> $dx_final_note_vocals $dx_final_note} {set $dx_final_note $dx_final_note_vocals}}
   )
}
{new
   MidiParser
   harm_timer
   (track_name 'HARM1')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (105 106)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_harm_gem_tracked
         {set $first_harm_gem_tracked TRUE}
         {set $tracked_break_num_harm 0}
         {set $first_harm_gem_beat {int $mp.start}}
         {if {> $first_harm_gem_beat 16}
            {push_back $harm_note_tracker ("delay_0" 0 $first_harm_gem_beat)}
            {set $harm_note_tracker {array $harm_note_tracker}}
            {set $tracked_break_num_harm 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $harm_tracked_start {int $mp.start}}
         {set $harm_tracked_prev_end {int {- $harm_tracked_start $mp.prev_end}}}
         {push_back $harm_note_tracker ({sprint "delay_" $tracked_break_num_harm} $harm_tracked_prev_end $harm_tracked_start)}
         {set $harm_note_tracker {array $harm_note_tracker}}
         {set $tracked_break_num_harm {+ $tracked_break_num_harm 1}}
         {dx_log_writer countdown {sprint "Harmonies Tracker array: " $harm_note_tracker}}
      }
      {set $dx_final_note_harm {int $mp.end}}
      {if {> $dx_final_note_harm $dx_final_note} {set $dx_final_note $dx_final_note_harm}}
   )
}
#endif