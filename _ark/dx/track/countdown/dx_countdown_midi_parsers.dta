{new
   MidiParser
   guitar_timer
   (track_name 'PART GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {unless $first_guitar_gem_tracked
         {set $first_guitar_gem_tracked TRUE}
         {set $tracked_break_num_guitar 0}
         {set $first_guitar_gem_beat {int $mp.start}}
         {if {> $first_guitar_gem_beat 16}
            {push_back $guitar_note_tracker ("delay_0" 0 $first_guitar_gem_beat)}
            {set $guitar_note_tracker {array $guitar_note_tracker}}
            {set $tracked_break_num_guitar 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $guitar_tracked_start {int $mp.start}}
         {set $guitar_tracked_prev_end {int {- $guitar_tracked_start $mp.prev_end}}}
         {push_back $guitar_note_tracker ({sprint "delay_" $tracked_break_num_guitar} $guitar_tracked_prev_end $guitar_tracked_start)}
         {set $guitar_note_tracker {array $guitar_note_tracker}}
         {set $tracked_break_num_guitar {+ $tracked_break_num_guitar 1}}
         {dx_log_writer countdown {sprint "Guitar Tracker array: " $guitar_note_tracker}}
      }
      {set $dx_final_note_guitar {int $mp.end}}
      {if {> $dx_final_note_guitar $dx_final_note} {set $dx_final_note $dx_final_note_guitar}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100}}
            {if {>= $mp.prev_start 0.03}
               {push_back $guitar_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $guitar_note_tracker_2_size {size $guitar_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   guitar_overdrive_timer
   (track_name 'PART GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $guitar_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $guitar_note_tracker {array $guitar_note_tracker}}
   )
}
{new
   MidiParser
   guitar_solo_timer
   (track_name 'PART GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $guitar_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $guitar_note_tracker {array $guitar_note_tracker}}
   )
}
{new
   MidiParser
   real_guitar_timer
   (track_name 'PART REAL_GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 101)
   )
   (midi
      {unless $first_real_guitar_gem_tracked
         {set $first_real_guitar_gem_tracked TRUE}
         {set $tracked_break_num_real_guitar 0}
         {set $first_real_guitar_gem_beat {int $mp.start}}
         {if {> $first_real_guitar_gem_beat 16}
            {push_back $real_guitar_note_tracker ("delay_0" 0 $first_real_guitar_gem_beat)}
            {set $real_guitar_note_tracker {array $real_guitar_note_tracker}}
            {set $tracked_break_num_real_guitar 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $real_guitar_tracked_start {int $mp.start}}
         {set $real_guitar_tracked_prev_end {int {- $real_guitar_tracked_start $mp.prev_end}}}
         {push_back $real_guitar_note_tracker ({sprint "delay_" $tracked_break_num_real_guitar} $real_guitar_tracked_prev_end $real_guitar_tracked_start)}
         {set $real_guitar_note_tracker {array $real_guitar_note_tracker}}
         {set $tracked_break_num_real_guitar {+ $tracked_break_num_real_guitar 1}}
         {dx_log_writer countdown {sprint "real_guitar Tracker array: " $real_guitar_note_tracker}}
      }
      {set $dx_final_note_real_guitar {int $mp.end}}
      {if {> $dx_final_note_real_guitar $dx_final_note} {set $dx_final_note $dx_final_note_real_guitar}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100} {== $mp.val 101}}
            {if {>= $mp.prev_start 0.03}
               {push_back $real_guitar_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $real_guitar_note_tracker_2_size {size $real_guitar_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   real_guitar_overdrive_timer
   (track_name 'PART REAL_GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $real_guitar_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_guitar_note_tracker {array $real_guitar_note_tracker}}
   )
}
{new
   MidiParser
   real_guitar_solo_timer
   (track_name 'PART REAL_GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (115)
   )
   (midi
      {push_back $real_guitar_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_guitar_note_tracker {array $real_guitar_note_tracker}}
   )
}
{new
   MidiParser
   bre_timer
   (track_name 'PART GUITAR')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (120)
   )
   (midi
      {push_back $guitar_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $guitar_note_tracker {array $guitar_note_tracker}}
      {push_back $bass_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $bass_note_tracker {array $bass_note_tracker}}
      {push_back $drum_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $drum_note_tracker {array $drum_note_tracker}}
      {push_back $keys_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $keys_note_tracker {array $keys_note_tracker}}
      {push_back $vocals_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $vocals_note_tracker {array $vocals_note_tracker}}
      {push_back $harm_note_tracker ({sprint "bre_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $harm_note_tracker {array $harm_note_tracker}}
   )
}
{new
   MidiParser
   drum_timer
   (track_name 'PART DRUMS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (24 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 96 97 98 99 100 103)
   )
   (midi
      {unless $first_drum_gem_tracked
         {set $first_drum_gem_tracked TRUE}
         {set $tracked_break_num_drum 0}
         {set $first_drum_gem_beat {int $mp.start}}
         {if {> $first_drum_gem_beat 16}
            {push_back $drum_note_tracker ("delay_0" 0 $first_drum_gem_beat)}
            {set $drum_note_tracker {array $drum_note_tracker}}
            {set $tracked_break_num_drum 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $drum_tracked_start {int $mp.start}}
         {set $drum_tracked_prev_end {int {- $drum_tracked_start $mp.prev_end}}}
         {push_back $drum_note_tracker ({sprint "delay_" $tracked_break_num_drum} $drum_tracked_prev_end $drum_tracked_start)}
         {set $drum_note_tracker {array $drum_note_tracker}}
         {set $tracked_break_num_drum {+ $tracked_break_num_drum 1}}
         {dx_log_writer countdown {sprint "Drum Tracker array: " $drum_note_tracker}}
      }
      {set $dx_final_note_drum {int $mp.end}}
      {if {> $dx_final_note_drum $dx_final_note} {set $dx_final_note $dx_final_note_drum}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100}}
            {push_back $drum_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
            {set $drum_note_tracker_2_size {size $drum_note_tracker_2}}
         }
      }
      {set $dx_final_note_real_drum $dx_final_note_drum}
      {set $real_drum_note_tracker_2 $drum_note_tracker_2}
      {set $real_drum_note_tracker $drum_note_tracker}
      {set $real_drum_note_tracker_2_size $drum_note_tracker_2_size}
   )
}
{new
   MidiParser
   drum_overdrive_timer
   (track_name 'PART DRUMS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $drum_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $drum_note_tracker {array $drum_note_tracker}}
   )
}
{new
   MidiParser
   drum_solo_timer
   (track_name 'PART DRUMS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $drum_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $drum_note_tracker {array $drum_note_tracker}}
   )
}
{new
   MidiParser
   bass_timer
   (track_name 'PART BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {unless $first_bass_gem_tracked
         {set $first_bass_gem_tracked TRUE}
         {set $tracked_break_num_bass 0}
         {set $first_bass_gem_beat {int $mp.start}}
         {if {> $first_bass_gem_beat 16}
            {push_back $bass_note_tracker ("delay_0" 0 $first_bass_gem_beat)}
            {set $bass_note_tracker {array $bass_note_tracker}}
            {set $tracked_break_num_bass 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $bass_tracked_start {int $mp.start}}
         {set $bass_tracked_prev_end {int {- $bass_tracked_start $mp.prev_end}}}
         {push_back $bass_note_tracker ({sprint "delay_" $tracked_break_num_bass} $bass_tracked_prev_end $bass_tracked_start)}
         {set $bass_note_tracker {array $bass_note_tracker}}
         {set $tracked_break_num_bass {+ $tracked_break_num_bass 1}}
         {dx_log_writer countdown {sprint "Bass Tracker array: " $bass_note_tracker}}
      }
      {set $dx_final_note_bass {int $mp.end}}
      {if {> $dx_final_note_bass $dx_final_note} {set $dx_final_note $dx_final_note_bass}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100}}
            {if {>= $mp.prev_start 0.03}
               {push_back $bass_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $bass_note_tracker_2_size {size $bass_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   bass_overdrive_timer
   (track_name 'PART BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $bass_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $bass_note_tracker {array $bass_note_tracker}}
   )
}
{new
   MidiParser
   bass_solo_timer
   (track_name 'PART BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $bass_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $bass_note_tracker {array $bass_note_tracker}}
   )
}
{new
   MidiParser
   real_bass_timer
   (track_name 'PART REAL_BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 101)
   )
   (midi
      {unless $first_real_bass_gem_tracked
         {set $first_real_bass_gem_tracked TRUE}
         {set $tracked_break_num_real_bass 0}
         {set $first_real_bass_gem_beat {int $mp.start}}
         {if {> $first_real_bass_gem_beat 16}
            {push_back $real_bass_note_tracker ("delay_0" 0 $first_real_bass_gem_beat)}
            {set $real_bass_note_tracker {array $real_bass_note_tracker}}
            {set $tracked_break_num_real_bass 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $real_bass_tracked_start {int $mp.start}}
         {set $real_bass_tracked_prev_end {int {- $real_bass_tracked_start $mp.prev_end}}}
         {push_back $real_bass_note_tracker ({sprint "delay_" $tracked_break_num_real_bass} $real_bass_tracked_prev_end $real_bass_tracked_start)}
         {set $real_bass_note_tracker {array $real_bass_note_tracker}}
         {set $tracked_break_num_real_bass {+ $tracked_break_num_real_bass 1}}
         {dx_log_writer countdown {sprint "real_bass Tracker array: " $real_bass_note_tracker}}
      }
      {set $dx_final_note_real_bass {int $mp.end}}
      {if {> $dx_final_note_real_bass $dx_final_note} {set $dx_final_note $dx_final_note_real_bass}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100} {== $mp.val 101}}
            {if {>= $mp.prev_start 0.03}
               {push_back $real_bass_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $real_bass_note_tracker_2_size {size $real_bass_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   real_bass_overdrive_timer
   (track_name 'PART REAL_BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $real_bass_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_bass_note_tracker {array $real_bass_note_tracker}}
   )
}
{new
   MidiParser
   real_bass_solo_timer
   (track_name 'PART REAL_BASS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (115)
   )
   (midi
      {push_back $real_bass_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_bass_note_tracker {array $real_bass_note_tracker}}
   )
}
{new
   MidiParser
   keys_timer
   (track_name 'PART KEYS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (96 97 98 99 100 103 120)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_keys_gem_tracked
         {set $first_keys_gem_tracked TRUE}
         {set $tracked_break_num_keys 0}
         {set $first_keys_gem_beat {int $mp.start}}
         {if {> $first_keys_gem_beat 16}
            {push_back $keys_note_tracker ("delay_0" 0 $first_keys_gem_beat)}
            {set $keys_note_tracker {array $keys_note_tracker}}
            {set $tracked_break_num_keys 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $keys_tracked_start {int $mp.start}}
         {set $keys_tracked_prev_end {int {- $keys_tracked_start $mp.prev_end}}}
         {push_back $keys_note_tracker ({sprint "delay_" $tracked_break_num_keys} $keys_tracked_prev_end $keys_tracked_start)}
         {set $keys_note_tracker {array $keys_note_tracker}}
         {set $tracked_break_num_keys {+ $tracked_break_num_keys 1}}
         {dx_log_writer countdown {sprint "Keys Tracker array: " $keys_note_tracker}}
      }
      {set $dx_final_note_keys {int $mp.end}}
      {if {> $dx_final_note_keys $dx_final_note} {set $dx_final_note $dx_final_note_keys}}
      {if $dx_perfects_indicator
         {if {|| {== $mp.val 96} {== $mp.val 97} {== $mp.val 98} {== $mp.val 99} {== $mp.val 100}}
            {if {>= $mp.prev_start 0.03}
               {push_back $keys_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $keys_note_tracker_2_size {size $keys_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   keys_overdrive_timer
   (track_name 'PART KEYS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $keys_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $keys_note_tracker {array $keys_note_tracker}}
   )
}
{new
   MidiParser
   keys_solo_timer
   (track_name 'PART KEYS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $keys_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $keys_note_tracker {array $keys_note_tracker}}
   )
}
{new
   MidiParser
   real_keys_timer
   (track_name 'PART REAL_KEYS_X')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 115 116)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_real_keys_gem_tracked
         {set $first_real_keys_gem_tracked TRUE}
         {set $tracked_break_num_real_keys 0}
         {set $first_real_keys_gem_beat {int $mp.start}}
         {if {> $first_real_keys_gem_beat 16}
            {push_back $real_keys_note_tracker ("delay_0" 0 $first_real_keys_gem_beat)}
            {set $real_keys_note_tracker {array $real_keys_note_tracker}}
            {set $tracked_break_num_real_keys 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $real_keys_tracked_start {int $mp.start}}
         {set $real_keys_tracked_prev_end {int {- $real_keys_tracked_start $mp.prev_end}}}
         {push_back $real_keys_note_tracker ({sprint "delay_" $tracked_break_num_real_keys} $real_keys_tracked_prev_end $real_keys_tracked_start)}
         {set $real_keys_note_tracker {array $real_keys_note_tracker}}
         {set $tracked_break_num_real_keys {+ $tracked_break_num_real_keys 1}}
         {dx_log_writer countdown {sprint "real_keys Tracker array: " $real_keys_note_tracker}}
      }
      {set $dx_final_note_real_keys {int $mp.end}}
      {if {> $dx_final_note_real_keys $dx_final_note} {set $dx_final_note $dx_final_note_real_keys}}
      {if $dx_perfects_indicator
         {if {&& {!= $mp.val 115} {!= $mp.val 116}}
            {if {>= $mp.prev_start 0.03}
               {push_back $real_keys_note_tracker_2 {* {beat_to_seconds $mp.start} 1000}}
               {set $real_keys_note_tracker_2_size {size $real_keys_note_tracker_2}}
            }
         }
      }
   )
}
{new
   MidiParser
   real_keys_overdrive_timer
   (track_name 'PART REAL_KEYS_X')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $real_keys_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_keys_note_tracker {array $real_keys_note_tracker}}
   )
}
{new
   MidiParser
   real_keys_solo_timer
   (track_name 'PART REAL_KEYS_X')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (115)
   )
   (midi
      {push_back $real_keys_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $real_keys_note_tracker {array $real_keys_note_tracker}}
   )
}
#ifdef RB3DX
{new
   MidiParser
   vocals_timer
   (track_name 'PART VOCALS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (105 106)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_vocals_gem_tracked
         {set $first_vocals_gem_tracked TRUE}
         {set $tracked_break_num_vocals 0}
         {set $first_vocals_gem_beat {int $mp.start}}
         {if {> $first_vocals_gem_beat 16}
            {push_back $vocals_note_tracker ("delay_0" 0 $first_vocals_gem_beat)}
            {set $vocals_note_tracker {array $vocals_note_tracker}}
            {set $tracked_break_num_vocals 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $vocals_tracked_start {int $mp.start}}
         {set $vocals_tracked_prev_end {int {- $vocals_tracked_start $mp.prev_end}}}
         {push_back $vocals_note_tracker ({sprint "delay_" $tracked_break_num_vocals} $vocals_tracked_prev_end $vocals_tracked_start)}
         {set $vocals_note_tracker {array $vocals_note_tracker}}
         {set $tracked_break_num_vocals {+ $tracked_break_num_vocals 1}}
         {dx_log_writer countdown {sprint "Vocal Tracker array: " $vocals_note_tracker}}
      }
      {set $dx_final_note_vocals {int $mp.end}}
      {if {> $dx_final_note_vocals $dx_final_note} {set $dx_final_note $dx_final_note_vocals}}
   )
}
{new
   MidiParser
   vocals_overdrive_timer
   (track_name 'PART VOCALS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $vocals_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $vocals_note_tracker {array $vocals_note_tracker}}
   )
}
{new
   MidiParser
   vocals_solo_timer
   (track_name 'PART VOCALS')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $vocals_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $vocals_note_tracker {array $vocals_note_tracker}}
   )
}
{new
   MidiParser
   harm_timer
   (track_name 'HARM1')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (105 106)
   )
   (midi
      {$this rt_compute_space}
      {unless $first_harm_gem_tracked
         {set $first_harm_gem_tracked TRUE}
         {set $tracked_break_num_harm 0}
         {set $first_harm_gem_beat {int $mp.start}}
         {if {> $first_harm_gem_beat 16}
            {push_back $harm_note_tracker ("delay_0" 0 $first_harm_gem_beat)}
            {set $harm_note_tracker {array $harm_note_tracker}}
            {set $tracked_break_num_harm 1}
         }
      }
      {if {&& {>= $mp.prev_end 16} {< $mp.prev_end 10000}}
         {set $harm_tracked_start {int $mp.start}}
         {set $harm_tracked_prev_end {int {- $harm_tracked_start $mp.prev_end}}}
         {push_back $harm_note_tracker ({sprint "delay_" $tracked_break_num_harm} $harm_tracked_prev_end $harm_tracked_start)}
         {set $harm_note_tracker {array $harm_note_tracker}}
         {set $tracked_break_num_harm {+ $tracked_break_num_harm 1}}
         {dx_log_writer countdown {sprint "Harmonies Tracker array: " $harm_note_tracker}}
      }
      {set $dx_final_note_harm {int $mp.end}}
      {if {> $dx_final_note_harm $dx_final_note} {set $dx_final_note $dx_final_note_harm}}
   )
}
{new
   MidiParser
   harm_overdrive_timer
   (track_name 'HARM1')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (116)
   )
   (midi
      {push_back $harm_note_tracker ({sprint "overdrive_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $harm_note_tracker {array $harm_note_tracker}}
   )
}
{new
   MidiParser
   harm_solo_timer
   (track_name 'PART harm')
   (inverted FALSE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   ;(message_type midi_parser)
   (mp.up FALSE)
   (idle)
   (allowed_notes
      (103)
   )
   (midi
      {push_back $harm_note_tracker ({sprint "solo_" {int $mp.start}} {int $mp.start} {int $mp.end})}
      {set $harm_note_tracker {array $harm_note_tracker}}
   )
}
#endif