#define DX_GEMCOLOR_SET
(green red yellow blue orange)
#define DX_DRUMCOLOR_SET
(red yellow blue green)
#define NORMALGEM_SET
(gem_green.wid gem_red.wid gem_yellow.wid gem_blue.wid gem_orange.wid star_gem.wid)
#define HOPOGEM_SET
(gem_green_hopo.wid gem_red_hopo.wid gem_yellow_hopo.wid gem_blue_hopo.wid gem_orange_hopo.wid star_hopo.wid)
#define DX_GTR_MASH_SET
(
   gem_mash0.wid
   gem_mash1.wid
   gem_mash2.wid
   gem_mash3.wid
   gem_mash4.wid
)
#define KICK_SET
(gem_kick.wid star_kick.wid)
#define DRUMGEM_SET
(drum_red.wid drum_yellow.wid drum_blue.wid drum_green.wid drum_star.wid)
#define CYM_SET
(cymbal_gem_red.wid cymbal_gem_yellow.wid cymbal_gem_blue.wid cymbal_gem_green.wid cymbal_gem_star.wid)
#define DX_DRUM_MASH_SET
(
   drum_roll1.wid
   drum_roll2.wid
   drum_roll3.wid
   drum_roll4.wid
)
#define DX_PROTAR_COLOR_SET
(red green orange blue yellow purple)
#define DX_PROTAR_MASH_SET
(
   real_guitar_gem_mash_red.wid
   real_guitar_gem_mash_green.wid
   real_guitar_gem_mash_orange.wid
   real_guitar_gem_mash_blue.wid
   real_guitar_gem_mash_yellow.wid
   real_guitar_gem_mash_purple.wid
)
#define DX_PROTAR_GEM_SET
(
   real_guitar_gem_red
   real_guitar_gem_green
   real_guitar_gem_orange
   real_guitar_gem_blue
   real_guitar_gem_yellow
   real_guitar_gem_purple
)

#define COLOR_SHUFFLE_SLOT_0
(
   ;{dx_log_writer {sprint "Setting Slot Colors"}} ;breaks the game, dont do this
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot0_color
   }
)
#define COLOR_SHUFFLE_SLOT_1
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot1_color
   }
)
#define COLOR_SHUFFLE_SLOT_2
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot2_color
   }
)
#define COLOR_SHUFFLE_SLOT_3
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot3_color
   }
)
#define COLOR_SHUFFLE_SLOT_4
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot4_color
   }
)
#define COLOR_SHUFFLE_SLOT_5
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 5}
      $slot5_color
   }
)

#define DRUMGEM_SLOT1
(
   ;{dx_log_writer {sprint "Setting Drum Colors"}} ;breaks the game, dont do this
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 4}
      $drum1_color
   }
)
#define DRUMGEM_SLOT2
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 4}
      $drum2_color
   }
)
#define DRUMGEM_SLOT3
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 4}
      $drum3_color
   }
)
#define DRUMGEM_SLOT4
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 4}
      $drum4_color
   }
)
#define CYMGEM_SLOT1
(
   ;{dx_log_writer {sprint "Setting Cymbal Colors"}} ;breaks the game, dont do this
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym1_color
      }
   }
)
#define CYMGEM_SLOT2
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym2_color
      }
   }
)
#define CYMGEM_SLOT3
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym3_color
      }
   }
)
#define CYMGEM_SLOT4
(
   {elem (CYM_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 4}
         $cym4_color
      }
   }
)
#define KICKGEM_SLOT
(
   ;{dx_log_writer {sprint "Setting Kick Color"}} ;breaks the game, dont do this ;breaks the game, dont do this
   {elem
      (KICK_SET)
      $kick_color
   }
)

#define DX_PROTAR_COLOR_1
(
   ;{dx_log_writer {sprint "Setting Protar Color"}} ;breaks the game, dont do this
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color1
   }
)
#define DX_PROTAR_COLOR_2
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color2
   }
)
#define DX_PROTAR_COLOR_3
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color3
   }
)
#define DX_PROTAR_COLOR_4
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color4
   }
)
#define DX_PROTAR_COLOR_5
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color5
   }
)
#define DX_PROTAR_COLOR_6
(
   {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
      {random_int 0 6}
      $dx_protar_color6
   }
)

#define DX_SLOT_COLORS
(
   ;{dx_log_writer {sprint "Setting Gem Colors"}} ;breaks the game, dont do this
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus1_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus2_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus3_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus4_color
      }
   }
   {elem (DX_GEMCOLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 5}
         $sus5_color
      }
   }
)
#define DX_PROTAR_SLOT_COLORS
(
   ;{dx_log_writer {sprint "Setting Protar Gem Colors"}} ;breaks the game, dont do this
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color1
      }
   }
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color2
      }
   }
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color3
      }
   }
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color4
      }
   }
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color5
      }
   }
   {elem (DX_PROTAR_COLOR_SET)
      {if_else {modifier_mgr is_modifier_active mod_mhx_color_shuffle}
         {random_int 0 6}
         $dx_protar_color6
      }
   }
)

#define DX_SMASHER_COLOR_SETTER
(
   {dx_log_writer {sprint "Setting Track Graphic Colors - Current Screen: " {ui current_screen} " - Gamemode: " $dx_gamemode}}
   {if_else [is_drum]
      {do
         {gem_smasher1 set_color
            {if_else [lefty]
               {elem (DX_DRUMCOLOR_SET) $dx_smasher4_color}
               {elem (DX_DRUMCOLOR_SET) $dx_smasher1_color}
            }
         }
         {gem_smasher2 set_color
            {if_else [lefty]
               {elem (DX_DRUMCOLOR_SET) $dx_smasher3_color}
               {elem (DX_DRUMCOLOR_SET) $dx_smasher2_color}
            }
         }
         {gem_smasher3 set_color
            {if_else [lefty]
               {elem (DX_DRUMCOLOR_SET) $dx_smasher2_color}
               {elem (DX_DRUMCOLOR_SET) $dx_smasher3_color}
            }
         }
         {gem_smasher4 set_color
            {if_else [lefty]
               {elem (DX_DRUMCOLOR_SET) $dx_smasher1_color}
               {elem (DX_DRUMCOLOR_SET) $dx_smasher4_color}
            }
         }
      }
      {if_else [real_guitar]
         {do
            {gem_smasher0 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color1}}
            {gem_smasher1 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color2}}
            {gem_smasher2 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color3}}
            {gem_smasher3 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color4}}
            {gem_smasher4 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color5}}
            {gem_smasher5 set_color {elem (DX_PROTAR_COLOR_SET) $dx_protar_color6}}
         }
         {do
            {gem_smasher0 set_color {elem (DX_GEMCOLOR_SET) $dx_fret1_color}}
            {gem_smasher1 set_color {elem (DX_GEMCOLOR_SET) $dx_fret2_color}}
            {gem_smasher2 set_color {elem (DX_GEMCOLOR_SET) $dx_fret3_color}}
            {gem_smasher3 set_color {elem (DX_GEMCOLOR_SET) $dx_fret4_color}}
            {gem_smasher4 set_color {elem (DX_GEMCOLOR_SET) $dx_fret5_color}}
         }
      }
   }
)