{func
   dx_mtv_formatter
   ($dx_mtv_addition)
   {if_else {== $dx_mtv_addition reset}
      {do 
         {set $dx_mtv_holder ()}
         {resize $dx_mtv_holder 0}
         {set $dx_mtv_elements 0}
      }
      {do
         {push_back $dx_mtv_holder $dx_mtv_addition}
         {set $dx_mtv_elements {+ $dx_mtv_elements 1}}
      }
   }
   ;{dx_log_writer FALSE $dx_mtv_addition}
}
{func
   dx_rank_var_finder
   ($instrument $var_rankvar $rank_threshold_0 $rank_threshold_1 $rank_threshold_2 $rank_threshold_3 $rank_threshold_4 $rank_threshold_5)
   {foreach $entry $var_rankvar
      {if {== {elem $entry 0} {basename rank}}
         {if {find $entry $instrument}
            {set $var_actual_rankvar
               {elem {find $entry $instrument} 1}
            }
         }
      }
      {cond
         ({< $var_actual_rankvar $rank_threshold_0}
            {set $var_instrument_rankvar 0})
         ({&& {>= $var_actual_rankvar $rank_threshold_0} {< $var_actual_rankvar $rank_threshold_1}}
            {set $var_instrument_rankvar 1})
         ({&& {>= $var_actual_rankvar $rank_threshold_1} {< $var_actual_rankvar $rank_threshold_2}}
            {set $var_instrument_rankvar 2})
         ({&& {>= $var_actual_rankvar $rank_threshold_2} {< $var_actual_rankvar $rank_threshold_3}}
            {set $var_instrument_rankvar 3})
         ({&& {>= $var_actual_rankvar $rank_threshold_3} {< $var_actual_rankvar $rank_threshold_4}}
            {set $var_instrument_rankvar 4})
         ({&& {>= $var_actual_rankvar $rank_threshold_4} {< $var_actual_rankvar $rank_threshold_5}}
            {set $var_instrument_rankvar 5})
         ({>= $var_actual_rankvar $rank_threshold_5}
            {set $var_instrument_rankvar 6})
      }
   }
   {switch $instrument
      (guitar {set $guitarrankvar $var_instrument_rankvar})
      (bass {set $bassrankvar $var_instrument_rankvar})
      (drum {set $drumrankvar $var_instrument_rankvar})
      (vocals {set $vocalsrankvar $var_instrument_rankvar})
      (band {set $bandrankvar $var_instrument_rankvar})
      (keys {set $keysrankvar $var_instrument_rankvar})
      (real_keys {set $real_keysrankvar $var_instrument_rankvar})
      (real_guitar {set $real_guitarrankvar $var_instrument_rankvar})
      (real_bass {set $real_bassrankvar $var_instrument_rankvar})
   }
}
{func dx_mtv_time_remaining_handler ;using length_ms from song_mgr
   {if $dx_mtvup
      {switch $dx_time_remaining
         (0 
            {do
               {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set showing FALSE} ;hide timer and do nothing else
               {script_task
                  kTaskUISeconds
                  (delay 0.1336) ;in approximately 8 frames, call this function again
                  (script {dx_mtv_time_remaining_handler})
               }
            }
         )
         (1
            {do
               {set $dx_current_progress_ms {beatmatch get_song_ms}} ;current time in ms
               {set $dx_current_progress {int {/ $dx_current_progress_ms 1000.0}}} ;convert to seconds for later
               {set $dx_time_total_ms {{song_mgr get_meta_data {meta_performer song}} length_ms}} ;grab current song length in ms
               {set $dx_time_total {int {/ $dx_time_total_ms 1000.0}}} ;convert to seconds for later
               {set $dx_time_remaining_counter {int {/ {- $dx_time_total_ms $dx_current_progress_ms} 1000.0}}} ;subtract current progress from song length and divide by 1000
               {if {> $dx_time_remaining_counter $dx_time_total} {set $dx_time_remaining_counter $dx_time_total}} ;failsafe, if counter ever becomes greater than total time, set it to total time
               {if {< $dx_time_remaining_counter 0} {set $dx_time_remaining_counter 0}} ;failsafe, if counter ever becomes negative, set it to 0
               {set $dx_timer_total_minutes {int {/ $dx_time_total 60}}} ;get length minutes
               {set $dx_timer_minutes {int {/ $dx_time_remaining_counter 60}}} ;get current minutes
               {set $dx_timer_total_seconds {int {- $dx_time_total {* $dx_timer_total_minutes 60}}}} ;get length seconds
               {set $dx_timer_seconds {int {- $dx_time_remaining_counter {* $dx_timer_minutes 60}}}} ;get current seconds
               {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set showing TRUE} ;show timer
               {if_else $dx_time_remain_dbg
                  {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d\nDBG: %.3f / %d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds {- $dx_time_total $dx_current_progress} $dx_time_total}} ;include debug line
                  {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds}} ;don't include debug line
               }
               {script_task
                  kTaskUISeconds
                  (delay 0.0668) ;in approximately 4 frames, call this function again
                  (script {dx_mtv_time_remaining_handler})
               }
            }
         )
         (2
            {do
               {set $dx_current_progress_ms {beatmatch get_song_ms}} ;current time in ms
               {set $dx_current_progress {int {/ $dx_current_progress_ms 1000.0}}} ;convert to seconds for later
               {set $dx_time_total_ms {{song_mgr get_meta_data {meta_performer song}} length_ms}} ;grab current song length in ms
               {set $dx_time_total {int {/ $dx_time_total_ms 1000.0}}} ;convert to seconds for later
               {set $dx_time_remaining_counter $dx_current_progress} ;put current time in "time remaining counter" so we don't have to change the var names
               {if {> $dx_time_remaining_counter $dx_time_total} {set $dx_time_remaining_counter $dx_time_total}} ;failsafe, if counter ever becomes greater than total time, set it to total time
               {if {< $dx_time_remaining_counter 0} {set $dx_time_remaining_counter 0}} ;failsafe, if counter ever becomes negative, set it to 0
               {set $dx_timer_total_minutes {int {/ $dx_time_total 60}}} ;get length minutes
               {set $dx_timer_minutes {int {/ $dx_time_remaining_counter 60}}} ;get current minutes
               {set $dx_timer_total_seconds {int {- $dx_time_total {* $dx_timer_total_minutes 60}}}} ;get length seconds
               {set $dx_timer_seconds {int {- $dx_time_remaining_counter {* $dx_timer_minutes 60}}}} ;get current seconds
               {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set showing TRUE} ;show timer
               {if_else $dx_time_remain_dbg
                  {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d\nDBG: %.3f / %d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds $dx_current_progress $dx_time_total}} ;include debug line
                  {{{{coop_track_panel find scoreboard} find tracker_band_display} find tg_main_text_top.lbl} set_token_fmt {sprintf "%d:%02d / %d:%02d" $dx_timer_minutes $dx_timer_seconds $dx_timer_total_minutes $dx_timer_total_seconds}} ;don't include debug line
               }
               {script_task
                  kTaskUISeconds
                  (delay 0.0668) ;in approximately 4 frames, call this function again
                  (script {dx_mtv_time_remaining_handler})
               }
            }
         )
      }
         ;{{{gamemode get track_panel} find mtv_overlay} mtv_formatter} ;refresh the mtv overlay
   }
}