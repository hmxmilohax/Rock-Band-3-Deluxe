{func dx_brutal_mode
   ($enabled)
   {if $enabled
      {dx_brutal_mode_rb4 $enabled}
   }
}
{dx_brutal_mode_init
   ($enabled)
   ;not only inits brutal mode, but restores bottom_y for track when disabled
   {beatmatch foreach_active_player $player
      {if {!= {$player instrument} vocals}
         {set_this {find_obj DX_GEMTRACKDIR player_feedback}}
         {$this set_showing TRUE}
         {if_else $enabled
            {dx_brutal_mode $enabled} ;call it now to reset the values, even if bottom_y doesn't stick, the beat handler will set it once the first time it runs
            {{find_obj DX_GEMTRACKDIR} set bottom_y -26}
         }
      }
   }
}
{func dx_cook_crowd ;cook crowd rating for other funcs
   ($crowd_rating)
   {* 1.25 {- $crowd_rating 0.2}} ;makes it 0.0-1.0
}

{func dx_get_brutal_number_dx ;pass this routine the *cooked* crowd
   ($cooked_crowd)
   {- {* $cooked_crowd 126} 26} ;to increase how much we hide at max, increase the 126
}

{func dx_get_brutal_number_rb4 ;pass this routine the *cooked* crowd
   ($cooked_crowd)
   {do
      ;($cooked_crowd_rating {dx_cook_crowd $crowd_rating}) ;cook the crowd
      ($brutal_no 0) ;placeholder for brutal number
      {cond
         ({== $cooked_crowd 1.00} {set $brutal_no 90})
         ({&& {< $cooked_crowd 1.00} {>= $cooked_crowd 0.833}} {set $brutal_no 80})
         ({&& {< $cooked_crowd 0.833} {>= $cooked_crowd 0.667}} {set $brutal_no 73.333})
         ({&& {< $cooked_crowd 0.667} {>= $cooked_crowd 0.500}} {set $brutal_no 56.667})
         ({&& {< $cooked_crowd 0.500} {>= $cooked_crowd 0.333}} {set $brutal_no 40})
         ({&& {< $cooked_crowd 0.333} {>= $cooked_crowd 0.167}} {set $brutal_no 15})
         ({&& {< $cooked_crowd 0.167} {>= $cooked_crowd 0}} {set $brutal_no -26})
         {set $brutal_no -26}
      }
   $brutal_no
   }
}
{func
   dx_brutal_set_crowd
   ($slot $rating)
   {switch $slot
      (0 {set $dx_crowd_0 {dx_cook_crowd $rating}})
      (1 {set $dx_crowd_1 {dx_cook_crowd $rating}})
      (2 {set $dx_crowd_2 {dx_cook_crowd $rating}})
      (3 {set $dx_crowd_3 {dx_cook_crowd $rating}})
   }
   {dx_cook_crowd $rating}
}
{func
   dx_brutal_set_number
   ($slot $rating)
   {switch $slot
      (0 {set $brutal_number_0 {dx_get_brutal_number_rb4 $rating}})
      (1 {set $brutal_number_1 {dx_get_brutal_number_rb4 $rating}})
      (2 {set $brutal_number_2 {dx_get_brutal_number_rb4 $rating}})
      (3 {set $brutal_number_3 {dx_get_brutal_number_rb4 $rating}})
   }
   {dx_get_brutal_number_rb4 $rating}
}
{func
   dx_brutal_get_init
   ($slot)
   {switch $slot
      (0 {set $this_init $dx_brutal0_init})
      (1 {set $this_init $dx_brutal1_init})
      (2 {set $this_init $dx_brutal2_init})
      (3 {set $this_init $dx_brutal3_init})
   }
   $this_init
}
{func
   dx_brutal_set_init
   ($slot $set)
   {switch $slot
      (0 {set $dx_brutal0_init $set})
      (1 {set $dx_brutal1_init $set})
      (2 {set $dx_brutal2_init $set})
      (3 {set $dx_brutal3_init $set})
   }
}
{func
   dx_brutal_mode_rb4 ;this one does each slot individually and thus takes a lot more repetition
   ($enabled)
   {if_else $enabled
      {beatmatch foreach_active_player $player
         {unless {== {$player instrument} vocals}
            {set $this_slot {{$player get_user} get_slot_num}}
            {set_this {find_obj DX_GEMTRACKDIR}}
            {set $this_crowd_rating {dx_brutal_set_crowd $this_slot {$player crowd_rating}}}
            {dx_brutal_set_number $this_slot $this_crowd_rating}
            {set $this_brutal_number {dx_get_brutal_number_rb4 $this_crowd_rating}}
            {$this set bottom_y $this_brutal_number}
            {set $this_brutal_label {sprint "brutal" $this_slot ".lbl"}}
            {set $this_brutal_color {sprint "brutal" $this_slot ".color"}}
            {if {! {dx_brutal_get_init $this_slot}}
               {dx_brutal_set_init $this_slot TRUE}
               {if {exists $this_brutal_label}
                  {delete $this_brutal_label}
               }
               {if {exists $this_brutal_color}
                  {delete $this_brutal_color}
               }
               {new BandLabel $this_brutal_label}
               {$this_brutal_label set resource_name "pentatonic"}
               {$this_brutal_label set_showing TRUE}
               {$this_brutal_label set_local_scale 1 1 1}
               {$this_brutal_label set_local_rot -80 0 0}
               {$this_brutal_label set text_size 5}
               {$this_brutal_label set alignment kMiddleCenter}
               {$this_brutal_label set width 5000}
               {$this_brutal_label set height 500}
               {$this_brutal_label set alpha 1}
               {$this_brutal_label set kerning -0.12}
               {new UIColor $this_brutal_color}
               {$this_brutal_color set color {pack_color 1 1 1}}
               {$this_brutal_label set color_override $this_brutal_color}
               {$this_brutal_label set_token_fmt {sprint "-----------------"}}
               {meters.grp add_object $this_brutal_label}
            }
            {$this_brutal_label set_local_pos -0.175 $this_brutal_number 0}
         }
      }
      {beatmatch foreach_active_player $player
         {unless {== {$player instrument} vocals}
            {set $this_slot {{$player get_user} get_slot_num}}
            {set_this {find_obj DX_GEMTRACKDIR}}
            {set $this_brutal_label {sprint "brutal" $this_slot ".lbl"}}
            {set $this_brutal_color {sprint "brutal" $this_slot ".color"}}
            {if {exists $this_brutal_label}
               {delete $this_brutal_label}
            }
            {if {exists $this_brutal_color}
               {delete $this_brutal_color}
            }
            {dx_brutal_set_init $this_slot TRUE}
         }
      }
   }
}