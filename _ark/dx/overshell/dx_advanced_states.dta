(dxState_Advanced
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_ingame_hud}
         {push_back $options os_menu_options}
         {push_back $options os_quick_chat}
         {push_back $options os_functional_options}
         ;only show the controller menu when not in-game and only on applicable instruments or when faking is active
         {if
            {&&
               {! {session is_in_game}} ;prevents soft-lock, swapping instrument type in-game would prevent player from rejoining
               {||
                  {||
                     {== {{$this get_user} get_controller_type} kControllerGuitar}
                     {== {{$this get_user} get_controller_type} kControllerKeys}
                     {== {{$this get_user} get_controller_type} kControllerVocals}
                  }
                  {||
                     {! {== $dx_joypad_type_guitar kControllerGuitar}}
                     {! {== $dx_joypad_type_keys kControllerKeys}}
                     {! {== $dx_joypad_type_vocals kControllerVocals}}
                  }
               }
            }
            {push_back $options os_controller}
         }
         {if $dx_debug
            {push_back $options os_debug}
         }
         ;-----func----------state name---------message
         {dx_state_setup dxState_Advanced TRUE}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_ingame_hud
            {$this show_state dxState_InGameHUD})
         (os_menu_options
            {$this show_state dxState_MenuOptions})
         (os_quick_chat
            {$this show_state dxState_ChatSettings})
         (os_functional_options
            {$this show_state dxState_FunctionalOptions})
         (os_controller
            {$this show_state dxState_ControllerMenu})
         (os_debug
            {if_else $dx_debug_first
               {$this show_state kState_DebugWarn}
               {$this show_state dxState_Debug}
            }
         )
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_MENU_OPTIONS_DATA
(
   {do
      ($options
         {array 0})
      {switch $dx_instrument_icons
         (rb3 {push_back $options os_icons_rb3})
         (rb4 {push_back $options os_icons_rb4})
      }
      {push_back $options os_menu_theme}
      {switch $dx_overshell_platform
         (ps3 {push_back $options os_menu_color_ps3})
         (xbox {push_back $options os_menu_color_xbox})
         (wii {push_back $options os_menu_color_wii})
      }
      ;{push_back $options os_rb3os}
      ;{push_back $options mod_rb4os}         
      ;{push_back $options mod_rivalsos}
      {dx_state_setup dxState_MenuOptions TRUE}
   }
)
(dxState_MenuOptions
   (view
      DX_MENU_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_menu_theme
            {$this show_state dxState_MenuTheme})
         (os_icons_rb3
            {set $dx_instrument_icons rb4}
            {set $dx_tracked_changed os_icons_rb4}
            {set $dx_icon_guitar "C"}
            {set $dx_icon_bass "T"}
            {set $dx_icon_drum "E"}
            {set $dx_icon_vocals "I"}
            {set $dx_icon_harmony_2 "c"}
            {set $dx_icon_harmony_3 "e"}
            {set $dx_icon_keys "t"}
            {set $dx_icon_real_keys "i"}
            {set $dx_icon_real_guitar "U"}
            {set $dx_icon_real_bass "A"}
            {set $dx_icon_drum_pro "R"}
            {dx_state_pos_tracker}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_icons_rb4
            {set $dx_instrument_icons rb3}
            {set $dx_tracked_changed os_icons_rb3}
            {set $dx_icon_guitar "G"}
            {set $dx_icon_bass "B"}
            {set $dx_icon_drum "D"}
            {set $dx_icon_vocals "V"}
            {set $dx_icon_harmony_2 "2"}
            {set $dx_icon_harmony_3 "3"}
            {set $dx_icon_keys "K"}
            {set $dx_icon_real_keys "k"}
            {set $dx_icon_real_guitar "g"}
            {set $dx_icon_real_bass "b"}
            {set $dx_icon_drum_pro "d"}
            {dx_state_pos_tracker}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_icons_rb3
            {set $dx_instrument_icons rb4}
            {set $dx_tracked_changed os_icons_rb4}
            {set $dx_icon_guitar "C"}
            {set $dx_icon_bass "T"}
            {set $dx_icon_drum "E"}
            {set $dx_icon_vocals "I"}
            {set $dx_icon_harmony_2 "c"}
            {set $dx_icon_harmony_3 "e"}
            {set $dx_icon_keys "t"}
            {set $dx_icon_real_keys "i"}
            {set $dx_icon_real_guitar "U"}
            {set $dx_icon_real_bass "A"}
            {set $dx_icon_drum_pro "R"}
            {dx_state_pos_tracker}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_menu_color_ps3
            #ifdef HX_PS3
            {set $dx_overshell_platform xbox}
            {set $dx_tracked_changed os_menu_color_xbox}
            #else
            {set $dx_overshell_platform wii}
            {set $dx_tracked_changed os_menu_color_wii}
            #endif
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_menu_color_xbox
            #ifdef HX_PS3
            {set $dx_overshell_platform wii}
            {set $dx_tracked_changed os_menu_color_wii}
            #else
            {set $dx_overshell_platform ps3}
            {set $dx_tracked_changed os_menu_color_ps3}
            #endif
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_menu_color_wii
            #ifdef HX_PS3
            {set $dx_overshell_platform ps3}
            {set $dx_tracked_changed os_menu_color_ps3}
            #else
            {set $dx_overshell_platform xbox}
            {set $dx_tracked_changed os_menu_color_xbox}
            #endif
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_rb3os
            {set $dx_overshell_theme none}
            OVERSHELL_RB3OS)
         (mod_rb4os
            {set $dx_overshell_theme rb4}
            OVERSHELL_RB4OS)
         (mod_rivalsos
            {set $dx_overshell_theme rivals}
            OVERSHELL_RIVALSOS)
      }
      {overshell update_all}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

(dxState_MenuTheme
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_rb3_menu_theme}
         {push_back $options os_rb4_menu_theme}         
         {push_back $options os_rivals_menu_theme}
         {dx_state_setup dxState_MenuTheme TRUE}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_rb3_menu_theme
            {set $dx_overshell_theme none}
            OVERSHELL_RB3OS)
         (os_rb4_menu_theme
            {set $dx_overshell_theme rb4}
            OVERSHELL_RB4OS)
         (os_rivals_menu_theme
            {set $dx_overshell_theme rivals}
            OVERSHELL_RIVALSOS)
      }
      {overshell update_all}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_MenuOptions}
   )
)

(dxState_ChatSettings
   (view
      {do
         ($options
            {array 0})
         {push_back $options {sprintf "1: %s" $dx_chat_preset_0}}
         {push_back $options {sprintf "2: %s" $dx_chat_preset_1}}
         {push_back $options {sprintf "3: %s" $dx_chat_preset_2}}
         {push_back $options {sprintf "4: %s" $dx_chat_preset_3}}
         {push_back $options {sprintf "5: %s" $dx_chat_preset_4}}
         {push_back $options {sprintf "6: %s" $dx_chat_preset_5}}
         {push_back $options {sprintf "7: %s" $dx_chat_preset_6}}
         {push_back $options {sprintf "8: %s" $dx_chat_preset_7}}
         {dx_state_setup dxState_ChatSettings FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch {$current_list selected_data}
         (0 {set $dx_selected_chat_index 0})
         (1 {set $dx_selected_chat_index 1})
         (2 {set $dx_selected_chat_index 2})
         (3 {set $dx_selected_chat_index 3})
         (4 {set $dx_selected_chat_index 4})
         (5 {set $dx_selected_chat_index 5})
         (6 {set $dx_selected_chat_index 6})
         (7 {set $dx_selected_chat_index 7})
      }
      {$this show_state dxState_SelectChatPreset}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

(dxState_SelectChatPreset
   (view
      {do
         ($options
            {array 0})
         {set $dx_quick_chat_phrases (DX_QUICK_CHAT_PHRASES)}
         {foreach $entry $dx_quick_chat_phrases {push_back $options $entry}}
         {dx_state_setup dxState_SelectChatPreset FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch $dx_selected_chat_index
         (0 {set $dx_chat_preset_0 {sprintf {$component selected_sym}}})
         (1 {set $dx_chat_preset_1 {sprintf {$component selected_sym}}})
         (2 {set $dx_chat_preset_2 {sprintf {$component selected_sym}}})
         (3 {set $dx_chat_preset_3 {sprintf {$component selected_sym}}})
         (4 {set $dx_chat_preset_4 {sprintf {$component selected_sym}}})
         (5 {set $dx_chat_preset_5 {sprintf {$component selected_sym}}})
         (6 {set $dx_chat_preset_6 {sprintf {$component selected_sym}}})
         (7 {set $dx_chat_preset_7 {sprintf {$component selected_sym}}})
      }
      {$this show_state dxState_ChatSettings}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_ChatSettings}
   )
)

#define DX_FUNCTIONAL_OPTIONS_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options {if_else $dx_prompt_save os_prompt_save_on os_prompt_save_off}}
      {switch $dx_mic_deploy_sens 
         (0.9 {push_back $options os_dx_mic_od_1})
         (0.7 {push_back $options os_dx_mic_od_2})
         (0.5 {push_back $options os_dx_mic_od_3})
         (0.3 {push_back $options os_dx_mic_od_4})
         (0.1 {push_back $options os_dx_mic_od_5})
      }
      {push_back $options {if_else $dx_additional_parts os_additional_parts_on os_additional_parts_off}}
      {push_back $options {if_else $dx_song_delay os_songdelay_on os_songdelay_off}}
      {switch $dx_current_intro_movie
         (deluxe {push_back $options os_intro_deluxe})
         (vanilla {push_back $options os_intro_vanilla})
         (off {push_back $options os_intro_off})
      }
      {push_back $options {if_else $dx_splash_screen os_splash_on os_splash_off}}
      {push_back $options {if_else $dx_confirm_song_count os_confirm_songcount_on os_confirm_songcount_off}}
      {if {== $dx_connected_server ashcentral}
         {push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;this one is backwards to account for vanilla
      }
      #ifdef RB3E
      ;{push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;put it here too because ashcentral doesnt send this var to xbox
      ;update: it does now
      {switch $dx_connected_server
         (none {push_back $options os_server_online})
         (live {push_back $options os_server_live})
         (liveless {push_back $options os_server_liveless})
      }
      #endif
      ;-----func----------state name------message
      {dx_state_setup dxState_FunctionalOptions TRUE}
   }
)
(dxState_FunctionalOptions
   (view
      DX_FUNCTIONAL_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (enter
      DX_OS_OPEN_MSG
      DX_MENU_DESC
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_prompt_save_on os_prompt_save_off)
            {set $dx_prompt_save {! $dx_prompt_save}}
            {if_else $dx_prompt_save
               {set $dx_tracked_changed os_prompt_save_on}
               {set $dx_tracked_changed os_prompt_save_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_dx_mic_od_1 os_dx_mic_od_2 os_dx_mic_od_3 os_dx_mic_od_4 os_dx_mic_od_5)
            {set $dx_mic_deploy_sens
               {switch $dx_mic_deploy_sens
                  (0.9 0.7)
                  (0.7 0.5)
                  (0.5 0.3)
                  (0.3 0.1)
                  (0.1 0.9)
               }
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_additional_parts_on os_additional_parts_off)
            {set $dx_additional_parts {! $dx_additional_parts}}
            {if_else $dx_additional_parts
               {set $dx_tracked_changed os_additional_parts_on}
               {set $dx_tracked_changed os_additional_parts_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_songdelay_on os_songdelay_off)
            {set $dx_song_delay {! $dx_song_delay}}
            {if_else $dx_song_delay
               {set $dx_tracked_changed os_songdelay_on}
               {set $dx_tracked_changed os_songdelay_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_deluxe
            {set $dx_current_intro_movie vanilla}
            {set $dx_tracked_changed os_intro_vanilla}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_vanilla
            {set $dx_current_intro_movie off}
            {set $dx_tracked_changed os_intro_off}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_off
            {set $dx_current_intro_movie deluxe}
            {set $dx_tracked_changed os_intro_deluxe}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_splash_on os_splash_off)
            {set $dx_splash_screen {! $dx_splash_screen}}
            {if_else $dx_splash_screen
               {set $dx_tracked_changed os_splash_on}
               {set $dx_tracked_changed os_splash_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_online
            {set $dx_connected_server live}
            {set $dx_tracked_changed os_server_live}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_live
            {set $dx_connected_server liveless}
            {set $dx_tracked_changed os_server_liveless}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_liveless
            {set $dx_connected_server none}
            {set $dx_tracked_changed os_server_online}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_confirm_songcount_on os_confirm_songcount_off)
            {set $dx_confirm_song_count {! $dx_confirm_song_count}}
            {if_else $dx_confirm_song_count
               {set $dx_tracked_changed os_confirm_songcount_on}
               {set $dx_tracked_changed os_confirm_songcount_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_ash_welcome_msg_on os_ash_welcome_msg_off)
            {set $dx_ash_welcome_msg {! $dx_ash_welcome_msg}}
            {if_else $dx_ash_welcome_msg
               {set $dx_tracked_changed os_ash_welcome_msg_off}
               {set $dx_tracked_changed os_ash_welcome_msg_on}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
      }
      {set $in_state FALSE}
      DX_FUNCTIONAL_OPTIONS_DATA
      {set $previous_state dxState_FunctionalOptions}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

#define DX_DEBUG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_debug_mode}
      {push_back $options os_logging}
      #ifdef HX_PS3
      {if $dx_write_hi_mem
         {set $dx_write_hi_mem FALSE}
         {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
            {array
               (
                  (dx_high_memory 190000000)
                  (dx_song_count 16000)
               )
            }
         }
      }
      {if_else {file_exists "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}
         {if_else {> {size {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}} 0}
            {if_else {== {elem {find {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"} dx_high_memory} 1} 190000000}
               {push_back $options os_dx_himem_on}
               {push_back $options os_dx_himem_off}
            }
            {push_back $options os_dx_himem_off}
         }
         {push_back $options os_dx_himem_off}
      }
      #endif
      {push_back $options do_script}
      {push_back $options os_uptime}
      {push_back $options generate_updates_dta}
      {push_back $options os_dumproot}
      {push_back $options os_dumproot2}
      
      {push_back $options print_hmx}
      {push_back $options print_objects}
      {push_back $options print_platform}
      {push_back $options {if_else $dx_time_remain_dbg os_time_remain_dbg_on os_time_remain_dbg_off}}
      
      {dx_state_setup dxState_Debug FALSE}
   }
)
#define DX_OBJECTS_FILE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/objects/" $focus_panel "_objects.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/" $focus_panel "_objects.dta"} #endif
)
#define DX_SONGS_UPDATES_FILE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/songs_updates.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/songs_updates.dta"} #endif
)
#define DX_ACE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/ace.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/ace.dta"} #endif
)
(dxState_Debug
   (view
      DX_DEBUG_DATA
      {overshell_view_chooser}
   )
   ;(virtual_keyboard_result_msg
   ;   ($ok $text)
   ;   {if $ok
   ;      {resize $evaltextarray 0}
   ;      {set $dx_text {symbol $text}}
   ;      {push_back $evaltextarray $dx_text}
   ;      {foreach $entry $evaltextarray
   ;         {search_replace $entry "'" "" $entry}
   ;      }
   ;      {dx_log_writer info {array $evaltextarray}}
   ;      {write_file "GAME:/file.dta" {array $evaltextarray}}
   ;      {run "GAME:/file.dta"}
   ;   }
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_debug_mode
            {set $dx_debug FALSE}
            {$this show_state dxState_Advanced}
         )
         (os_uptime
            {dx_uptime_onscreen}
         )
         (print_hmx
            {print_hmx_panel}
         )
         (os_dumproot
            #ifdef HX_PS3
               {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/rootarray.dta" $syscfg}
            #endif
            #ifdef HX_XBOX
               {write_file "GAME:/rootarray.dta" $syscfg}
            #endif
            {dx_passive_messenger rootarray_dumped}
         )
         (os_dumproot2
            {foreach $array $syscfg
               #ifdef HX_PS3
                  {write_file {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
               #ifdef HX_XBOX
                  {write_file {sprint "GAME:/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
            }
            {dx_passive_messenger rootarray_dumped2}
         )
         ((os_time_remain_dbg_on os_time_remain_dbg_off)
            {set $dx_time_remain_dbg {! $dx_time_remain_dbg}}
            {if_else $dx_time_remain_dbg
               {set $dx_tracked_changed os_time_remain_dbg_on}
               {set $dx_tracked_changed os_time_remain_dbg_off}
            }
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (generate_updates_dta
            {set $tempwrite {find_exists $syscfg missing_song_data}}
            {foreach $entry {read_file "dx/song_updates/songs_yarg.dta"}
               {push_back $tempwrite $entry}
            }
            {write_file DX_SONGS_UPDATES_FILE_PATH $tempwrite}
            {set $tempwrite FALSE}
            {dx_passive_messenger songs_updates_generated}
         )
         (print_platform
            {dx_passive_messenger_symbol {sprintf "%s" {localize $dx_detected_platform}}}
         )
         (do_script
            ;{virtual_keyboard
            ;   show_keyboard
            ;   $user
            ;   10000
            ;   {localize load_track_theme}
            ;   {localize load_track_theme_desc}
            ;   $dx_track_theme_name
            ;   $this
            ;}
            {run DX_ACE_PATH}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (print_objects
            {dx_print_objects}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (os_logging
            {$this show_state dxState_LogSettings}
         )
         (os_dx_himem_off
            {$this show_state dxState_HimemWarn}
         )
         (os_dx_himem_on
            {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
               {array
                  (
                     (dx_high_memory 131000000)
                     (dx_song_count 8000)
                  )
               }
            }
            {set $dx_tracked_changed os_dx_himem_off}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
      }
      {set $in_state FALSE}
      DX_DEBUG_DATA
      {set $previous_state dxState_Debug}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)
#define DX_LOG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_logging_disable_all}
      {push_back $options {if_else $dx_logging_essential os_logging_essential_on os_logging_essential_off}}
      {push_back $options {if_else $dx_logging_default os_logging_default_on os_logging_default_off}}
      {push_back $options {if_else $dx_logging_info os_logging_info_on os_logging_info_off}}
      {push_back $options {if_else $dx_logging_insane os_logging_insane_on os_logging_insane_off}}
      {push_back $options {if_else $dx_logging_beatmatch os_logging_beatmatch_on os_logging_beatmatch_off}}
      {push_back $options {if_else $dx_logging_countdown os_logging_countdown_on os_logging_countdown_off}}
      {dx_state_setup dxState_LogSettings FALSE}
   }
)

(dxState_LogSettings
   (view
      DX_LOG_DATA
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_logging_disable_all
            {set $dx_logging_essential FALSE}
            {set $dx_logging_default FALSE}
            {set $dx_logging_info FALSE}
            {set $dx_logging_insane FALSE}
            {set $dx_logging_beatmatch FALSE}
            {set $dx_logging_countdown FALSE}
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_essential_on os_logging_essential_off)
            {set $dx_logging_essential {! $dx_logging_essential}}
            {if_else $dx_logging_essential
               {set $dx_tracked_changed os_logging_essential_on}
               {set $dx_tracked_changed os_logging_essential_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_default_on os_logging_default_off)
            {set $dx_logging_default {! $dx_logging_default}}
            {if_else $dx_logging_default
               {set $dx_tracked_changed os_logging_default_on}
               {set $dx_tracked_changed os_logging_default_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_info_on os_logging_info_off)
            {set $dx_logging_info {! $dx_logging_info}}
            {if_else $dx_logging_info
               {set $dx_tracked_changed os_logging_info_on}
               {set $dx_tracked_changed os_logging_info_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_insane_on os_logging_insane_off)
            {set $dx_logging_insane {! $dx_logging_insane}}
            {if_else $dx_logging_insane
               {set $dx_tracked_changed os_logging_insane_on}
               {set $dx_tracked_changed os_logging_insane_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_beatmatch_on os_logging_beatmatch_off)
            {set $dx_logging_beatmatch {! $dx_logging_beatmatch}}
            {if_else $dx_logging_beatmatch
               {set $dx_tracked_changed os_logging_beatmatch_on}
               {set $dx_tracked_changed os_logging_beatmatch_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_countdown_on os_logging_countdown_off)
            {set $dx_logging_countdown {! $dx_logging_countdown}}
            {if_else $dx_logging_countdown
               {set $dx_tracked_changed os_logging_countdown_on}
               {set $dx_tracked_changed os_logging_countdown_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
      }
      {set $in_state FALSE}
      DX_LOG_DATA
      {set $previous_state dxState_LogSettings}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Debug}
   )
)

#define DX_BOT_SETTINGS_DATA
(
   os_dx_bot_skill
   {switch $dx_bot_overdrive 
      (dx_on os_dx_bot_overdrive_on)
      (dx_off os_dx_bot_overdrive_off)
      (dx_drain os_dx_bot_overdrive_drain)
   }
   {if_else $dx_auto_endgame os_dx_auto_endgame_on os_dx_auto_endgame_off}
   {if_else $dx_auto_endurance os_auto_endurance_on os_auto_endurance_off}
   {if_else $dx_bot_1 os_dx_bot_1_on os_dx_bot_1_off}
   {if_else $dx_bot_2 os_dx_bot_2_on os_dx_bot_2_off}
   {if_else $dx_bot_3 os_dx_bot_3_on os_dx_bot_3_off}
   {if_else $dx_bot_4 os_dx_bot_4_on os_dx_bot_4_off}
   {if_else $dx_bot_5 os_dx_bot_5_on os_dx_bot_5_off}
)

; XXX: refactoring this to the new system would break the slider
(dxState_BotSettings
   (view options_audio)
   (enter
      {set $dx_slider TRUE}
      {set $dx_slider_id dx_bot_skill}
      {instruments.sld set_num_steps 12}
      {instruments.sld set_current $dx_bot_skill}
      {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
      {options_audio.lst set scroll_time 0}
      {options_audio.lst set circular 0}
      {options_audio set_selected 0}
   )
   (update_view
      {handle ($this update_slider instruments.sld "")}
      {handle ($this update_slider bg_music.sld "")}
      {handle ($this update_slider crowd.sld "")}
      {handle ($this update_slider sfx.sld "")}
      {handle ($this update_slider voice_chat.sld "")}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_dx_bot_skill
            {instruments.sld store}
            {instruments.sld set_showing TRUE}
            {$this set_focus instruments.sld}
         )
         ((os_dx_bot_overdrive_on os_dx_bot_overdrive_off os_dx_bot_overdrive_drain)
            {set $dx_bot_overdrive {switch $dx_bot_overdrive
               (dx_on dx_drain)
               (dx_drain dx_off)
               (dx_off dx_on)
            }}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_dx_auto_endgame_on os_dx_auto_endgame_off)
            {set $dx_auto_endgame {! $dx_auto_endgame}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_auto_endurance_on os_auto_endurance_off)
            {set $dx_auto_endurance {! $dx_auto_endurance}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_1_on os_dx_bot_1_off)
            {set $dx_bot_1 {! $dx_bot_1}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_2_on os_dx_bot_2_off)
            {set $dx_bot_2 {! $dx_bot_2}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_3_on os_dx_bot_3_off)
            {set $dx_bot_3 {! $dx_bot_3}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_4_on os_dx_bot_4_off)
            {set $dx_bot_4 {! $dx_bot_4}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_5_on os_dx_bot_5_off)
            {set $dx_bot_5 {! $dx_bot_5}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         kDataUnhandled
      }
   )
   (BUTTON_DOWN_MSG
      {if_else {find_elem ("instruments.sld") {$this focus_name}}
         {switch $action
            ((kAction_Confirm kAction_Cancel)
               {{$this find {$this focus_name}} confirm}
               {{$this find {$this focus_name}} set_showing FALSE}
               {if_else $dx_slider
                  {do
                     {$this set_focus options_audio.lst}
                  }
                  {$this set_focus options_audio.lst}
               }
            )
            kDataUnhandled
         }
         kDataUnhandled
      }
   )
   (SCROLL_SELECT_MSG {$this on_slider_change $component $user})
   (SCROLL_MSG {$this on_slider_change $component $user})
   (exit 
      {set $dx_slider FALSE}
      {options_audio.lst set scroll_time 0.25}
   )
	(on_cancel {$this show_options})
)