(dxState_Advanced
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_ingame_hud}
         {push_back $options os_menu_options}
         {push_back $options os_quick_chat}
         {push_back $options os_functional_options}
         ;only show the controller menu when not in-game and only on applicable instruments or when faking is active
         {if
            {&&
               {! {session is_in_game}} ;prevents soft-lock, swapping instrument type in-game would prevent player from rejoining
               {||
                  {||
                     {== {{$this get_user} get_controller_type} kControllerGuitar}
                     {== {{$this get_user} get_controller_type} kControllerKeys}
                     {== {{$this get_user} get_controller_type} kControllerVocals}
                  }
                  {||
                     {! {== $dx_joypad_type_guitar kControllerGuitar}}
                     {! {== $dx_joypad_type_keys kControllerKeys}}
                     {! {== $dx_joypad_type_vocals kControllerVocals}}
                  }
               }
            }
            {push_back $options os_controller}
         }
         {if $dx_debug
            {push_back $options os_debug}
         }
         ;-----func----------state name---------message
         {dx_state_setup dxState_Advanced TRUE}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_ingame_hud
            {$this show_state dxState_InGameHUD})
         (os_menu_options
            {$this show_state dxState_MenuOptions})
         (os_quick_chat
            {$this show_state dxState_ChatSettings})
         (os_functional_options
            {$this show_state dxState_FunctionalOptions})
         (os_controller
            {$this show_state dxState_ControllerMenu})
         (os_debug
            {if_else $dx_debug_first
               {$this show_state dxState_DebugWarn}
               {$this show_state dxState_Debug}
            }
         )
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define SET_STRIP_COLOR
(
   {platform_color.mat set color {pack_color $dx_menu_color_r $dx_menu_color_g $dx_menu_color_b}}
)
#define DX_MENU_OPTIONS_DATA
(
   {do
      ($options
         {array 0})
      #ifndef HX_WII
      {switch $dx_instrument_icons
         (rb3 {push_back $options os_icons_rb3})
         (rb4 {push_back $options os_icons_rb4})
      }
      {push_back $options {if_else $dx_player_icons os_player_icons_on os_player_icons_off}}
      #endif
      {push_back $options os_menu_theme}
      {push_back $options os_menu_color}
      SET_STRIP_COLOR
      ;{switch $dx_overshell_platform
      ;   (ps3 {push_back $options os_menu_color_ps3})
      ;   (xbox {push_back $options os_menu_color_xbox})
      ;   (wii {push_back $options os_menu_color_wii})
      ;}
      ;{push_back $options os_rb3os}
      ;{push_back $options mod_rb4os}         
      ;{push_back $options mod_rivalsos}
      {dx_state_setup dxState_MenuOptions TRUE}
   }
)
(dxState_MenuOptions
   (view
      DX_MENU_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
      SET_STRIP_COLOR
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_menu_theme
            {$this show_state dxState_MenuTheme})
         (os_menu_color
            {$this show_state dxState_MenuColor})
         (os_icons_rb3
            {set $dx_instrument_icons rb4}
            {set $dx_tracked_changed os_icons_rb4}
            {set $dx_icon_guitar "C"}
            {set $dx_icon_bass "T"}
            {set $dx_icon_drum "E"}
            {set $dx_icon_vocals "I"}
            {set $dx_icon_harmony_2 "c"}
            {set $dx_icon_harmony_3 "e"}
            {set $dx_icon_keys "t"}
            {set $dx_icon_real_keys "i"}
            {set $dx_icon_real_guitar "U"}
            {set $dx_icon_real_bass "A"}
            {set $dx_icon_drum_pro "R"}
            {dx_state_pos_tracker}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_icons_rb4
            {set $dx_instrument_icons rb3}
            {set $dx_tracked_changed os_icons_rb3}
            {set $dx_icon_guitar "G"}
            {set $dx_icon_bass "B"}
            {set $dx_icon_drum "D"}
            {set $dx_icon_vocals "V"}
            {set $dx_icon_harmony_2 "2"}
            {set $dx_icon_harmony_3 "3"}
            {set $dx_icon_keys "K"}
            {set $dx_icon_real_keys "k"}
            {set $dx_icon_real_guitar "g"}
            {set $dx_icon_real_bass "b"}
            {set $dx_icon_drum_pro "d"}
            {dx_state_pos_tracker}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
         )
         (os_player_icons_on
            {set $dx_player_icons FALSE}
            {set $dx_tracked_changed os_player_icons_off}
            {set $dx_overshell_platform wii}
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
            SET_STRIP_COLOR
         )
         (os_player_icons_off
            {set $dx_player_icons TRUE}
            {set $dx_tracked_changed os_player_icons_on}
            #ifdef HX_PS3
            {set $dx_overshell_platform ps3}
            #endif
            #ifdef HX_XBOX
            {set $dx_overshell_platform xbox}
            #endif
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
            DX_MENU_OPTIONS_DATA
            {set $previous_state dxState_MenuOptions}
            SET_STRIP_COLOR
         )
      }
      {overshell update_all}
      SET_STRIP_COLOR
   )
   (exit 
      {dx_state_pos_tracker}
      SET_STRIP_COLOR
   )
   (on_cancel
      {$this show_state dxState_Advanced}
      SET_STRIP_COLOR
   )
)

(dxState_MenuTheme
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_rb3_menu_theme}
         {push_back $options os_rb4_menu_theme}         
         {push_back $options os_rivals_menu_theme}
         {dx_state_setup dxState_MenuTheme TRUE}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_rb3_menu_theme
            {set $dx_overshell_theme none}
            OVERSHELL_RB3OS)
         (os_rb4_menu_theme
            {set $dx_overshell_theme rb4}
            OVERSHELL_RB4OS)
         (os_rivals_menu_theme
            {set $dx_overshell_theme rivals}
            OVERSHELL_RIVALSOS)
      }
      {overshell update_all}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_MenuOptions}
   )
)

#define DX_PRINT_MENU_COLOR_R
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_menu_color_r} {int {+ 0.5 {* $dx_menu_color_r 100}}}}}
)
#define DX_PRINT_MENU_COLOR_G
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_menu_color_g} {int {+ 0.5 {* $dx_menu_color_g 100}}}}}
)
#define DX_PRINT_MENU_COLOR_B
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_menu_color_b} {int {+ 0.5 {* $dx_menu_color_b 100}}}}}
)
#define DX_MENU_COLOR_DATA
(
   {$current_list set_data
      (
         ;if we are inside our special menu item, we want to blank out the other lines so it looks nice
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk os_reset_color}
         DX_PRINT_MENU_COLOR_R
         DX_PRINT_MENU_COLOR_G
         DX_PRINT_MENU_COLOR_B
      )
   }
)
(dxState_MenuColor
   (view
      options
   )
   (enter
      ;setup/reset the list tracking info
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {set $current_list options.lst}
      {if_else {$this in_game}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }
      {$current_list restart_highlight_matanim}
      {$current_list refresh}
      DX_MENU_COLOR_DATA
   )
   ;(SCROLL_MSG
   ;   DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   ;these two options are selectable and act normal with a destination trail
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_reset_color
            #ifdef HX_WII
            ;{set $dx_menu_color_r 30} {set $dx_menu_color_g 190} {set $dx_menu_color_b 196}
            {set $dx_menu_color_r 0.10} {set $dx_menu_color_g 0.75} {set $dx_menu_color_b 0.75}
            #endif
            #ifdef HX_PS3
            ;{set $dx_menu_color_r 197} {set $dx_menu_color_g 8} {set $dx_menu_color_b 1}
            {set $dx_menu_color_r 0.75} {set $dx_menu_color_g 0.05} {set $dx_menu_color_b 0.00}
            #endif
            #ifdef HX_XBOX
            ;{set $dx_menu_color_r 92} {set $dx_menu_color_g 195} {set $dx_menu_color_b 5}
            {set $dx_menu_color_r 0.35} {set $dx_menu_color_g 0.75} {set $dx_menu_color_b 0.00}
            #endif
            SET_STRIP_COLOR
            DX_MENU_COLOR_DATA
         )
      }
   )
   ;this is handling the dynamic "slider" replacement
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         ;we selected an object so now only track up/down
         {switch
            $action
            ;if we confirm or back out of the internal selection shell, go back up to the normal level and refresh the list
            ((kAction_Confirm kAction_Cancel)
               {set $dx_list_item_selected FALSE}
               DX_MENU_COLOR_DATA
            )
            ;if we pressed Up or Down while inside a selected list item
            ((kAction_Down kAction_Up)
               {switch {$current_list selected_data}
                  (1
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $dx_menu_color_r 0}) ;minimum
                           (kAction_Up {< $dx_menu_color_r 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_r
                           {switch $action
                              (kAction_Down {- $dx_menu_color_r 0.05})
                              (kAction_Up {+ $dx_menu_color_r 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 1}
                  )
                  (2
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $dx_menu_color_g 0}) ;minimum
                           (kAction_Up {< $dx_menu_color_g 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_g
                           {switch $action
                              (kAction_Down {- $dx_menu_color_g 0.05})
                              (kAction_Up {+ $dx_menu_color_g 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 2}
                  )
                  (3
                     {if
                        ;set minimum and maximum for up and down presses for this variable
                        {switch $action
                           (kAction_Down {> $dx_menu_color_b 0}) ;minimum
                           (kAction_Up {< $dx_menu_color_b 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_b
                           {switch $action
                              (kAction_Down {- $dx_menu_color_b 0.05})
                              (kAction_Up {+ $dx_menu_color_b 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 3}
                  )
                  kDataUnhandled
               }
               ;refresh the list
               DX_MENU_COLOR_DATA
            )
            kDataUnhandled
         }
         ;we havent specifically selected anything, we are only hovering on a list item
         {switch
            $action
            ;check if we are selecting on the special item that drills down a level
            (kAction_Confirm
               {switch {$current_list selected_data}
                  (1
                     ;refresh the list but this time tell the game we are a level deeper to hide other options
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_MENU_COLOR_DATA
                  )
                  (2
                     ;refresh the list but this time tell the game we are a level deeper to hide other options
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_MENU_COLOR_DATA
                  )
                  (3
                     ;refresh the list but this time tell the game we are a level deeper to hide other options
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_MENU_COLOR_DATA
                  )
                  kDataUnhandled
               }
            )
            ;if we pressed left or right while hovering on a specific list item
            ((kAction_Left kAction_Right)
               {switch {$current_list selected_data}
                  (1
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $dx_menu_color_r 0}) ;minimum
                           (kAction_Right {< $dx_menu_color_r 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_r
                           {switch $action
                              (kAction_Left {- $dx_menu_color_r 0.05})
                              (kAction_Right {+ $dx_menu_color_r 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 1}
                  )
                  (2
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $dx_menu_color_g 0}) ;minimum
                           (kAction_Right {< $dx_menu_color_g 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_g
                           {switch $action
                              (kAction_Left {- $dx_menu_color_g 0.05})
                              (kAction_Right {+ $dx_menu_color_g 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 2}
                  )
                  (3
                     {if
                        ;set minimum and maximum for left and right presses for this variable
                        {switch $action
                           (kAction_Left {> $dx_menu_color_b 0}) ;minimum
                           (kAction_Right {< $dx_menu_color_b 1}) ;maximum
                        }
                        ;actually set our variable, based on the pressed action
                        {set $dx_menu_color_b
                           {switch $action
                              (kAction_Left {- $dx_menu_color_b 0.05})
                              (kAction_Right {+ $dx_menu_color_b 0.05})
                           }
                        }
                        SET_STRIP_COLOR
                     }
                     ;track our current list position for hiding other list elements while we have selected this one
                     {set $dx_list_pos 3}
                  )
                  kDataUnhandled
               }
               ;refresh the list
               DX_MENU_COLOR_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {$this show_state dxState_MenuOptions}
   )
)

(dxState_ChatSettings
   (view
      {do
         ($options
            {array 0})
         {push_back $options {sprintf "1: %s" $dx_chat_preset_0}}
         {push_back $options {sprintf "2: %s" $dx_chat_preset_1}}
         {push_back $options {sprintf "3: %s" $dx_chat_preset_2}}
         {push_back $options {sprintf "4: %s" $dx_chat_preset_3}}
         {push_back $options {sprintf "5: %s" $dx_chat_preset_4}}
         {push_back $options {sprintf "6: %s" $dx_chat_preset_5}}
         {push_back $options {sprintf "7: %s" $dx_chat_preset_6}}
         {push_back $options {sprintf "8: %s" $dx_chat_preset_7}}
         {dx_state_setup dxState_ChatSettings FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch {$current_list selected_data}
         (0 {set $dx_selected_chat_index 0})
         (1 {set $dx_selected_chat_index 1})
         (2 {set $dx_selected_chat_index 2})
         (3 {set $dx_selected_chat_index 3})
         (4 {set $dx_selected_chat_index 4})
         (5 {set $dx_selected_chat_index 5})
         (6 {set $dx_selected_chat_index 6})
         (7 {set $dx_selected_chat_index 7})
      }
      {$this show_state dxState_SelectChatPreset}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

(dxState_SelectChatPreset
   (view
      {do
         ($options
            {array 0})
         {set $dx_quick_chat_phrases (DX_QUICK_CHAT_PHRASES)}
         {foreach $entry $dx_quick_chat_phrases {push_back $options $entry}}
         {dx_state_setup dxState_SelectChatPreset FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch $dx_selected_chat_index
         (0 {set $dx_chat_preset_0 {sprintf {$component selected_sym}}})
         (1 {set $dx_chat_preset_1 {sprintf {$component selected_sym}}})
         (2 {set $dx_chat_preset_2 {sprintf {$component selected_sym}}})
         (3 {set $dx_chat_preset_3 {sprintf {$component selected_sym}}})
         (4 {set $dx_chat_preset_4 {sprintf {$component selected_sym}}})
         (5 {set $dx_chat_preset_5 {sprintf {$component selected_sym}}})
         (6 {set $dx_chat_preset_6 {sprintf {$component selected_sym}}})
         (7 {set $dx_chat_preset_7 {sprintf {$component selected_sym}}})
      }
      {$this show_state dxState_ChatSettings}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_ChatSettings}
   )
)

#define DX_FUNCTIONAL_OPTIONS_DATA
(
   {do
      ($options
         {array 0})
      #ifndef HX_WII
      {push_back $options {if_else $dx_prompt_save os_prompt_save_on os_prompt_save_off}}
      #endif
      {switch $dx_mic_deploy_sens 
         (0.9 {push_back $options os_dx_mic_od_1})
         (0.7 {push_back $options os_dx_mic_od_2})
         (0.5 {push_back $options os_dx_mic_od_3})
         (0.3 {push_back $options os_dx_mic_od_4})
         (0.1 {push_back $options os_dx_mic_od_5})
      }
      {push_back $options {if_else $dx_additional_parts os_additional_parts_on os_additional_parts_off}}
      {push_back $options {if_else $dx_song_delay os_songdelay_on os_songdelay_off}}
      #ifndef HX_WII
      {switch $dx_current_intro_movie
         (deluxe {push_back $options os_intro_deluxe})
         (vanilla {push_back $options os_intro_vanilla})
         (off {push_back $options os_intro_off})
      }
      {push_back $options {if_else $dx_splash_screen os_splash_on os_splash_off}}
      {push_back $options {if_else $dx_confirm_song_count os_confirm_songcount_on os_confirm_songcount_off}}
      {if {== $dx_connected_server ashcentral}
         {push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;this one is backwards to account for vanilla
      }
      #ifdef RB3E
      ;{push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;put it here too because ashcentral doesnt send this var to xbox
      ;update: it does now
      {switch $dx_connected_server
         (none {push_back $options os_server_online})
         (live {push_back $options os_server_live})
         (liveless {push_back $options os_server_liveless})
      }
      #endif
      #endif
      ;-----func----------state name------message
      {dx_state_setup dxState_FunctionalOptions TRUE}
   }
)
(dxState_FunctionalOptions
   (view
      DX_FUNCTIONAL_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (enter
      DX_OS_OPEN_MSG
      DX_MENU_DESC
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_prompt_save_on os_prompt_save_off)
            {set $dx_prompt_save {! $dx_prompt_save}}
            {if_else $dx_prompt_save
               {set $dx_tracked_changed os_prompt_save_on}
               {set $dx_tracked_changed os_prompt_save_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_dx_mic_od_1 os_dx_mic_od_2 os_dx_mic_od_3 os_dx_mic_od_4 os_dx_mic_od_5)
            {set $dx_mic_deploy_sens
               {switch $dx_mic_deploy_sens
                  (0.9 0.7)
                  (0.7 0.5)
                  (0.5 0.3)
                  (0.3 0.1)
                  (0.1 0.9)
               }
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_additional_parts_on os_additional_parts_off)
            {set $dx_additional_parts {! $dx_additional_parts}}
            {if_else $dx_additional_parts
               {set $dx_tracked_changed os_additional_parts_on}
               {set $dx_tracked_changed os_additional_parts_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_songdelay_on os_songdelay_off)
            {set $dx_song_delay {! $dx_song_delay}}
            {if_else $dx_song_delay
               {set $dx_tracked_changed os_songdelay_on}
               {set $dx_tracked_changed os_songdelay_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_deluxe
            {set $dx_current_intro_movie vanilla}
            {set $dx_tracked_changed os_intro_vanilla}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_vanilla
            {set $dx_current_intro_movie off}
            {set $dx_tracked_changed os_intro_off}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_intro_off
            {set $dx_current_intro_movie deluxe}
            {set $dx_tracked_changed os_intro_deluxe}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_splash_on os_splash_off)
            {set $dx_splash_screen {! $dx_splash_screen}}
            {if_else $dx_splash_screen
               {set $dx_tracked_changed os_splash_on}
               {set $dx_tracked_changed os_splash_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_online
            {set $dx_connected_server live}
            {set $dx_tracked_changed os_server_live}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_live
            {set $dx_connected_server liveless}
            {set $dx_tracked_changed os_server_liveless}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_liveless
            {set $dx_connected_server none}
            {set $dx_tracked_changed os_server_online}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_confirm_songcount_on os_confirm_songcount_off)
            {set $dx_confirm_song_count {! $dx_confirm_song_count}}
            {if_else $dx_confirm_song_count
               {set $dx_tracked_changed os_confirm_songcount_on}
               {set $dx_tracked_changed os_confirm_songcount_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_ash_welcome_msg_on os_ash_welcome_msg_off)
            {set $dx_ash_welcome_msg {! $dx_ash_welcome_msg}}
            {if_else $dx_ash_welcome_msg
               {set $dx_tracked_changed os_ash_welcome_msg_off}
               {set $dx_tracked_changed os_ash_welcome_msg_on}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
      }
      {set $in_state FALSE}
      DX_FUNCTIONAL_OPTIONS_DATA
      {set $previous_state dxState_FunctionalOptions}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

#define DX_DEBUG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_debug_mode}
      {push_back $options os_milo}
      {push_back $options os_logging}
      #ifdef HX_PS3
      {if $dx_write_hi_mem
         {set $dx_write_hi_mem FALSE}
         {write_file DX_HI_MEM_PATH
            {array
               (
                  (dx_high_memory 190000000)
                  (dx_song_count 16000)
               )
            }
         }
      }
      {if_else {file_exists DX_HI_MEM_PATH}
         {if_else {> {size {read_file DX_HI_MEM_PATH}} 0}
            {if_else {== {elem {find {read_file DX_HI_MEM_PATH} dx_high_memory} 1} 190000000}
               {push_back $options os_dx_himem_on}
               {push_back $options os_dx_himem_off}
            }
            {push_back $options os_dx_himem_off}
         }
         {push_back $options os_dx_himem_off}
      }
      #endif
      {push_back $options do_script}
      {push_back $options os_uptime}
      {push_back $options generate_updates_dta}
      {push_back $options os_dumproot}
      {push_back $options os_dumproot2}
      
      {push_back $options print_hmx}
      {push_back $options print_objects}
      {push_back $options print_platform}
      {push_back $options {if_else $dx_time_remain_dbg os_time_remain_dbg_on os_time_remain_dbg_off}}
      {push_back $options os_cycleaspect} 

      {dx_state_setup dxState_Debug FALSE}
   }
)
#define DX_SONGS_UPDATES_FILE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/songs_updates.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/songs_updates.dta"} #endif
)
#define DX_ACE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/ace.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/ace.dta"} #endif
)
(dxState_Debug
   (view
      DX_DEBUG_DATA
      {overshell_view_chooser}
   )
   ;(virtual_keyboard_result_msg
   ;   ($ok $text)
   ;   {if $ok
   ;      {resize $evaltextarray 0}
   ;      {set $dx_text {symbol $text}}
   ;      {push_back $evaltextarray $dx_text}
   ;      {foreach $entry $evaltextarray
   ;         {search_replace $entry "'" "" $entry}
   ;      }
   ;      {dx_log_writer info {array $evaltextarray}}
   ;      {write_file "GAME:/file.dta" {array $evaltextarray}}
   ;      {run "GAME:/file.dta"}
   ;   }
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_debug_mode
            {set $dx_debug FALSE}
            {$this show_state dxState_Advanced}
         )
         (os_milo
            {$this show_state dxState_MiloPanels})
         (os_uptime
            {dx_uptime_onscreen}
         )
         (print_hmx
            {print_hmx_panel}
         )
         (os_dumproot
            #ifdef HX_PS3
               {write_file {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/rootarray.dta"} $syscfg}
            #endif
            #ifdef HX_XBOX
               {write_file "GAME:/rootarray.dta" $syscfg}
            #endif
            {dx_passive_messenger rootarray_dumped}
         )
         (os_dumproot2
            {foreach $array $syscfg
               #ifdef HX_PS3
                  {write_file {sprint "GD:/dev_hdd0/game/" DX_TITLE_ID "/USRDIR/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
               #ifdef HX_XBOX
                  {write_file {sprint "GAME:/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
            }
            {dx_passive_messenger rootarray_dumped2}
         )
         ((os_time_remain_dbg_on os_time_remain_dbg_off)
            {set $dx_time_remain_dbg {! $dx_time_remain_dbg}}
            {if_else $dx_time_remain_dbg
               {set $dx_tracked_changed os_time_remain_dbg_on}
               {set $dx_tracked_changed os_time_remain_dbg_off}
            }
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (generate_updates_dta
            {set $tempwrite {find_exists $syscfg missing_song_data}}
            {foreach $entry {read_file "dx/song_updates/songs_yarg.dta"}
               {push_back $tempwrite $entry}
            }
            {write_file DX_SONGS_UPDATES_FILE_PATH $tempwrite}
            {set $tempwrite FALSE}
            {dx_passive_messenger songs_updates_generated}
         )
         (print_platform
            {dx_passive_messenger_symbol {sprintf "%s" {localize $dx_detected_platform}}}
         )
         (do_script
            ;{virtual_keyboard
            ;   show_keyboard
            ;   $user
            ;   10000
            ;   {localize load_track_theme}
            ;   {localize load_track_theme_desc}
            ;   $dx_track_theme_name
            ;   $this
            ;}
            {run DX_ACE_PATH}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (print_objects
            {dx_print_objects}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (os_logging
            {$this show_state dxState_LogSettings}
         )
         (os_dx_himem_off
            {$this show_state dxState_HimemWarn}
         )
         (os_dx_himem_on
            {write_file 
               {array
                  (
                     (dx_high_memory 131000000)
                     (dx_song_count 8000)
                  )
               }
            }
            {set $dx_tracked_changed os_dx_himem_off}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (os_cycleaspect
            {dx_cycle_aspect}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
      }
      {set $in_state FALSE}
      DX_DEBUG_DATA
      {set $previous_state dxState_Debug}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)
#define DX_LOG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_logging_disable_all}
      {push_back $options {if_else $dx_logging_essential os_logging_essential_on os_logging_essential_off}}
      {push_back $options {if_else $dx_logging_default os_logging_default_on os_logging_default_off}}
      {push_back $options {if_else $dx_logging_info os_logging_info_on os_logging_info_off}}
      {push_back $options {if_else $dx_logging_insane os_logging_insane_on os_logging_insane_off}}
      {push_back $options {if_else $dx_logging_beatmatch os_logging_beatmatch_on os_logging_beatmatch_off}}
      {push_back $options {if_else $dx_logging_countdown os_logging_countdown_on os_logging_countdown_off}}
      {dx_state_setup dxState_LogSettings FALSE}
   }
)

(dxState_LogSettings
   (view
      DX_LOG_DATA
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_logging_disable_all
            {set $dx_logging_essential FALSE}
            {set $dx_logging_default FALSE}
            {set $dx_logging_info FALSE}
            {set $dx_logging_insane FALSE}
            {set $dx_logging_beatmatch FALSE}
            {set $dx_logging_countdown FALSE}
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_essential_on os_logging_essential_off)
            {set $dx_logging_essential {! $dx_logging_essential}}
            {if_else $dx_logging_essential
               {set $dx_tracked_changed os_logging_essential_on}
               {set $dx_tracked_changed os_logging_essential_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_default_on os_logging_default_off)
            {set $dx_logging_default {! $dx_logging_default}}
            {if_else $dx_logging_default
               {set $dx_tracked_changed os_logging_default_on}
               {set $dx_tracked_changed os_logging_default_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_info_on os_logging_info_off)
            {set $dx_logging_info {! $dx_logging_info}}
            {if_else $dx_logging_info
               {set $dx_tracked_changed os_logging_info_on}
               {set $dx_tracked_changed os_logging_info_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_insane_on os_logging_insane_off)
            {set $dx_logging_insane {! $dx_logging_insane}}
            {if_else $dx_logging_insane
               {set $dx_tracked_changed os_logging_insane_on}
               {set $dx_tracked_changed os_logging_insane_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_beatmatch_on os_logging_beatmatch_off)
            {set $dx_logging_beatmatch {! $dx_logging_beatmatch}}
            {if_else $dx_logging_beatmatch
               {set $dx_tracked_changed os_logging_beatmatch_on}
               {set $dx_tracked_changed os_logging_beatmatch_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_countdown_on os_logging_countdown_off)
            {set $dx_logging_countdown {! $dx_logging_countdown}}
            {if_else $dx_logging_countdown
               {set $dx_tracked_changed os_logging_countdown_on}
               {set $dx_tracked_changed os_logging_countdown_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
      }
      {set $in_state FALSE}
      DX_LOG_DATA
      {set $previous_state dxState_LogSettings}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Debug}
   )
)

#define DX_BOT_SETTINGS_DATA
(
   os_dx_bot_skill
   {switch $dx_bot_overdrive 
      (dx_on os_dx_bot_overdrive_on)
      (dx_off os_dx_bot_overdrive_off)
      (dx_drain os_dx_bot_overdrive_drain)
   }
   {if_else $dx_auto_endgame os_dx_auto_endgame_on os_dx_auto_endgame_off}
   {if_else $dx_auto_endurance os_auto_endurance_on os_auto_endurance_off}
   {if_else $dx_bot_1 os_dx_bot_1_on os_dx_bot_1_off}
   {if_else $dx_bot_2 os_dx_bot_2_on os_dx_bot_2_off}
   {if_else $dx_bot_3 os_dx_bot_3_on os_dx_bot_3_off}
   {if_else $dx_bot_4 os_dx_bot_4_on os_dx_bot_4_off}
   {if_else $dx_bot_5 os_dx_bot_5_on os_dx_bot_5_off}
)

; XXX: refactoring this to the new system would break the slider
(dxState_BotSettings
   (view options_audio)
   (enter
      {set $dx_slider TRUE}
      {set $dx_slider_id dx_bot_skill}
      {instruments.sld set_num_steps 12}
      {instruments.sld set_current $dx_bot_skill}
      {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
      {options_audio.lst set scroll_time 0}
      {options_audio.lst set circular 0}
      {options_audio set_selected 0}
   )
   (update_view
      {handle ($this update_slider instruments.sld "")}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_dx_bot_skill
            {instruments.sld store}
            {instruments.sld set_showing TRUE}
            {$this set_focus instruments.sld}
         )
         ((os_dx_bot_overdrive_on os_dx_bot_overdrive_off os_dx_bot_overdrive_drain)
            {set $dx_bot_overdrive {switch $dx_bot_overdrive
               (dx_on dx_drain)
               (dx_drain dx_off)
               (dx_off dx_on)
            }}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_dx_auto_endgame_on os_dx_auto_endgame_off)
            {set $dx_auto_endgame {! $dx_auto_endgame}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_auto_endurance_on os_auto_endurance_off)
            {set $dx_auto_endurance {! $dx_auto_endurance}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_1_on os_dx_bot_1_off)
            {set $dx_bot_1 {! $dx_bot_1}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_2_on os_dx_bot_2_off)
            {set $dx_bot_2 {! $dx_bot_2}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_3_on os_dx_bot_3_off)
            {set $dx_bot_3 {! $dx_bot_3}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_4_on os_dx_bot_4_off)
            {set $dx_bot_4 {! $dx_bot_4}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_5_on os_dx_bot_5_off)
            {set $dx_bot_5 {! $dx_bot_5}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         kDataUnhandled
      }
   )
   (BUTTON_DOWN_MSG
      {if_else {find_elem ("instruments.sld") {$this focus_name}}
         {switch $action
            ((kAction_Confirm kAction_Cancel)
               {{$this find {$this focus_name}} confirm}
               {{$this find {$this focus_name}} set_showing FALSE}
               {if_else $dx_slider
                  {do
                     {$this set_focus options_audio.lst}
                  }
                  {$this set_focus options_audio.lst}
               }
            )
            kDataUnhandled
         }
         kDataUnhandled
      }
   )
   (SCROLL_SELECT_MSG {$this on_slider_change $component $user})
   (SCROLL_MSG {$this on_slider_change $component $user})
   (exit 
      {set $dx_slider FALSE}
      {options_audio.lst set scroll_time 0.25}
   )
	(on_cancel {$this show_options})
)
#define DX_TRANSLATE_POS_VARIABLES_TO_LOCAL
(
   {switch $dx_set_ui_pos_tracked_ui
      (mtv
         {set $dx_set_ui_pos_0 $mtvpos_0}
         {set $dx_set_ui_pos_1 $mtvpos_1}
         {set $dx_set_ui_pos_2 $mtvpos_2}
      )
      (speed_control
         {set $dx_set_ui_pos_0 $speed_controlpos_0}
         {set $dx_set_ui_pos_1 $speed_controlpos_1}
         {set $dx_set_ui_pos_2 $speed_controlpos_2}
      )
      (all_item
         {set $dx_set_ui_pos_0 $all_itempos_0}
         {set $dx_set_ui_pos_1 $all_itempos_1}
         {set $dx_set_ui_pos_2 $all_itempos_2}
      )
      (score
         {set $dx_set_ui_pos_0 $scorepos_0}
         {set $dx_set_ui_pos_1 $scorepos_1}
         {set $dx_set_ui_pos_2 $scorepos_2}
      )
      (section
         {set $dx_set_ui_pos_0 $sectionpos_0}
         {set $dx_set_ui_pos_1 $sectionpos_1}
         {set $dx_set_ui_pos_2 $sectionpos_2}
      )
      (crowd_meter
         {set $dx_set_ui_pos_0 $crowd_meterpos_0}
         {set $dx_set_ui_pos_1 $crowd_meterpos_1}
         {set $dx_set_ui_pos_2 $crowd_meterpos_2}
      )
      (scoreboard
         {set $dx_set_ui_pos_0 $scoreboardpos_0}
         {set $dx_set_ui_pos_1 $scoreboardpos_1}
         {set $dx_set_ui_pos_2 $scoreboardpos_2}
      )
      (star_display
         {set $dx_set_ui_pos_0 $star_displaypos_0}
         {set $dx_set_ui_pos_1 $star_displaypos_1}
         {set $dx_set_ui_pos_2 $star_displaypos_2}
      )
      (solo_box
         {set $dx_set_ui_pos_0 $solo_boxpos_0}
         {set $dx_set_ui_pos_1 $solo_boxpos_1}
         {set $dx_set_ui_pos_2 $solo_boxpos_2}
      )
      kDataUnhandled
   }
   {if $findme
      {set $dx_set_ui_pos_0 {$findme get_local_pos_index 0}}
      {set $dx_set_ui_pos_1 {$findme get_local_pos_index 1}}
      {set $dx_set_ui_pos_2 {$findme get_local_pos_index 2}}
   }
)
#define DX_RESET_HUD_AXIS_POS
(
   {switch $dx_set_ui_pos_tracked_ui
      (mtv {set $dx_set_ui_pos_0 0})
      (speed_control {set $dx_set_ui_pos_0 46})
      (all_item {set $dx_set_ui_pos_0 0})
      (score {set $dx_set_ui_pos_0 191})
      (section {set $dx_set_ui_pos_0 0})
      (scoreboard {set $dx_set_ui_pos_0 8})
      (star_display {set $dx_set_ui_pos_0 0})
      (solo_box {set $dx_set_ui_pos_0 0})
   }
   {switch $dx_set_ui_pos_tracked_ui
      (mtv {set $dx_set_ui_pos_1 0})
      (speed_control {set $dx_set_ui_pos_1 0})
      (all_item {set $dx_set_ui_pos_1 0})
      (score {set $dx_set_ui_pos_1 0})
      (section {set $dx_set_ui_pos_1 0})
      (scoreboard {set $dx_set_ui_pos_1 0})
      (star_display {set $dx_set_ui_pos_1 0})
      (solo_box {set $dx_set_ui_pos_1 0})
   }
   {switch $dx_set_ui_pos_tracked_ui
      (mtv {set $dx_set_ui_pos_2 0})
      (speed_control {set $dx_set_ui_pos_2 -5})
      (all_item {set $dx_set_ui_pos_2 0})
      (score {set $dx_set_ui_pos_2 175})
      (section {set $dx_set_ui_pos_2 185})
      (scoreboard {set $dx_set_ui_pos_2 -16})
      (star_display {set $dx_set_ui_pos_2 0})
      (solo_box {set $dx_set_ui_pos_2 0})
   }
)

#define DX_APPLY_POSITION_HUD
(
   {switch $dx_set_ui_pos_tracked_ui
      (mtv
         {set $mtvpos_0 $dx_set_ui_pos_0}
         {set $mtvpos_1 $dx_set_ui_pos_1}
         {set $mtvpos_2 $dx_set_ui_pos_2}
         {if $dx_mtvup
            {{{gamemode get track_panel} find mtv_overlay} dx_set_mtv_pos}
         }
      )
      (speed_control
         {set $speed_controlpos_0 $dx_set_ui_pos_0}
         {set $speed_controlpos_1 $dx_set_ui_pos_1}
         {set $speed_controlpos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {|| {gamemode in_mode practice} {gamemode in_mode qp_practice}}
               {exists beatmatch}
            }
            {practice_panel dx_speed_control_set_pos}
         }
      )
      (all_item
         {set $all_itempos_0 $dx_set_ui_pos_0}
         {set $all_itempos_1 $dx_set_ui_pos_1}
         {set $all_itempos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {|| {gamemode in_mode practice} {gamemode in_mode qp_practice}}
               {exists beatmatch}
            }
            {practice_panel dx_all_item_set_pos}
         }
      )
      (score
         {set $scorepos_0 $dx_set_ui_pos_0}
         {set $scorepos_1 $dx_set_ui_pos_1}
         {set $scorepos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {|| {gamemode in_mode practice} {gamemode in_mode qp_practice}}
               {exists beatmatch}
            }
            {practice_panel dx_score_set_pos}
         }
      )
      (section
         {set $sectionpos_0 $dx_set_ui_pos_0}
         {set $sectionpos_1 $dx_set_ui_pos_1}
         {set $sectionpos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {|| {gamemode in_mode practice} {gamemode in_mode qp_practice}}
               {exists beatmatch}
            }
            {practice_panel dx_section_set_pos}
         }
      )
      (crowd_meter
         {set $crowd_meterpos_0 $dx_set_ui_pos_0}
         {set $crowd_meterpos_1 $dx_set_ui_pos_1}
         {set $crowd_meterpos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {|| {gamemode in_mode practice} {gamemode in_mode qp_practice}}
               {exists beatmatch}
            }
            {coop_track_panel dx_set_crowd_meter_pos}
         }
      )
      (scoreboard
         {set $scoreboardpos_0 $dx_set_ui_pos_0}
         {set $scoreboardpos_1 $dx_set_ui_pos_1}
         {set $scoreboardpos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {! {gamemode in_mode practice}}
               {! {gamemode in_mode trainer}}
               {exists beatmatch}
            }
            {coop_track_panel dx_set_scoreboard_pos}
         }
      )
      (star_display
         {set $star_displaypos_0 $dx_set_ui_pos_0}
         {set $star_displaypos_1 $dx_set_ui_pos_1}
         {set $star_displaypos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {! {gamemode in_mode practice}}
               {! {gamemode in_mode trainer}}
               {exists beatmatch}
            }
            {coop_track_panel dx_set_star_display_pos}
         }
      )
      (solo_box
         {set $solo_boxpos_0 $dx_set_ui_pos_0}
         {set $solo_boxpos_1 $dx_set_ui_pos_1}
         {set $solo_boxpos_2 $dx_set_ui_pos_2}
         {if
            {&&
               {! {gamemode in_mode practice}}
               {! {gamemode in_mode trainer}}
               {exists beatmatch}
            }
            {coop_track_panel dx_set_solo_box_pos}
         }
      )
      kDataUnhandled
   }
   {if $findme
      {$findme set_local_pos $dx_set_ui_pos_0 $dx_set_ui_pos_1 $dx_set_ui_pos_2}
   }
)

#define DX_POSITION_REMAP_DATA
(
   {options_audio.lst set_data
      (
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk os_reset}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1}} os_blnk {sprint "pos_interval_" $dx_pos_remapper_array_number}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 2}} os_blnk {sprint {localize os_horizontal} ": " $dx_set_ui_pos_0}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 3}} os_blnk {sprint {localize os_vertical}  ": " $dx_set_ui_pos_2}}
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 4}} os_blnk {sprint {localize os_zspace}  ": " $dx_set_ui_pos_1}}
      )
   }
)
(dxState_PositionRemapper
   (view
      options_audio
   )
   (enter
      {set $dx_pos_interval_list (0.01 0.1 0.5 1 5 10 50 100)}
      {set $dx_pos_remapper_array_number 3}
      {set $dx_pos_current_interval {elem $dx_pos_interval_list $dx_pos_remapper_array_number}} ;1 unit
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {if_else {$this in_game}
         {options_audio.lst set_type overshell_menu_ingame}
         {options_audio.lst set_type overshell_menu}
      }
      {options_audio.lst restart_highlight_matanim}
      {options_audio.lst refresh}
      DX_TRANSLATE_POS_VARIABLES_TO_LOCAL
      DX_POSITION_REMAP_DATA
   )
   ;(SCROLL_MSG
   ;   DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {if {!= {options_audio.lst selected_data} 0}
                  {set $dx_list_item_selected FALSE}
                  DX_POSITION_REMAP_DATA
               }
            )
            ((kAction_Down kAction_Up)
               {switch {options_audio.lst selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Down {> $dx_pos_remapper_array_number 0})
                           (kAction_Up {< $dx_pos_remapper_array_number 7})
                        }
                        {set $dx_pos_remapper_array_number
                           {switch $action
                              (kAction_Down {- $dx_pos_remapper_array_number 1})
                              (kAction_Up {+ $dx_pos_remapper_array_number 1})
                           }
                        }
                        {set $dx_pos_current_interval {elem $dx_pos_interval_list $dx_pos_remapper_array_number}}
                     }
                     {set $dx_list_pos 1}
                  )
                  (2
                     {set $dx_set_ui_pos_0
                        {switch $action
                           (kAction_Down {- $dx_set_ui_pos_0 $dx_pos_current_interval})
                           (kAction_Up {+ $dx_set_ui_pos_0 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 2}
                  )
                  (3
                     {set $dx_set_ui_pos_2
                        {switch $action
                           (kAction_Down {- $dx_set_ui_pos_2 $dx_pos_current_interval})
                           (kAction_Up {+ $dx_set_ui_pos_2 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 3}
                  )
                  (4
                     {set $dx_set_ui_pos_1
                        {switch $action
                           (kAction_Down {- $dx_set_ui_pos_1 $dx_pos_current_interval})
                           (kAction_Up {+ $dx_set_ui_pos_1 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 4}
                  )
                  kDataUnhandled
               }
               DX_APPLY_POSITION_HUD
               DX_POSITION_REMAP_DATA
            )
            kDataUnhandled
         }
         {switch
            $action
            (kAction_Confirm
               {if {== {options_audio.lst selected_data} 0} ;if we click reset
                  {do
                     DX_RESET_HUD_AXIS_POS
                     DX_APPLY_POSITION_HUD
                     DX_POSITION_REMAP_DATA
                  }
               }
               {if {!= {options_audio.lst selected_data} 0}
                  {set $dx_list_item_selected TRUE}
                  {set $dx_list_pos {options_audio.lst selected_data}}
                  DX_POSITION_REMAP_DATA
               }
            )
            ((kAction_Left kAction_Right)
               {switch {options_audio.lst selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Left {> $dx_pos_remapper_array_number 0})
                           (kAction_Right {< $dx_pos_remapper_array_number 7})
                        }
                        {set $dx_pos_remapper_array_number
                           {switch $action
                              (kAction_Left {- $dx_pos_remapper_array_number 1})
                              (kAction_Right {+ $dx_pos_remapper_array_number 1})
                           }
                        }
                        {set $dx_pos_current_interval {elem $dx_pos_interval_list $dx_pos_remapper_array_number}}
                     }
                     {set $dx_list_pos 1}
                  )
                  (2
                     {set $dx_set_ui_pos_0
                        {switch $action
                           (kAction_Left {- $dx_set_ui_pos_0 $dx_pos_current_interval})
                           (kAction_Right {+ $dx_set_ui_pos_0 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 2}
                  )
                  (3
                     {set $dx_set_ui_pos_2
                        {switch $action
                           (kAction_Left {- $dx_set_ui_pos_2 $dx_pos_current_interval})
                           (kAction_Right {+ $dx_set_ui_pos_2 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 3}
                  )
                  (4
                     {set $dx_set_ui_pos_1
                        {switch $action
                           (kAction_Left {- $dx_set_ui_pos_1 $dx_pos_current_interval})
                           (kAction_Right {+ $dx_set_ui_pos_1 $dx_pos_current_interval})
                        }
                     }
                     {set $dx_list_pos 4}
                  )
                  kDataUnhandled
               }
               DX_APPLY_POSITION_HUD
               DX_POSITION_REMAP_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {$this show_state
         {switch $dx_set_ui_pos_tracked_ui
            (mtv dxState_MTVElements)
            (speed_control dxState_ScreenElements_Practice)
            (all_item dxState_ScreenElements_Practice)
            (score dxState_ScreenElements_Practice)
            (section dxState_ScreenElements_Practice)
            ;(crowd_meter dxState_CrowdMeterElements)
            (scoreboard dxState_ScoreElements)
            (star_display dxState_ScoreElements)
            (solo_box dxState_InGameHUD)
            dxState_MiloFind
         }
      }
   )
)