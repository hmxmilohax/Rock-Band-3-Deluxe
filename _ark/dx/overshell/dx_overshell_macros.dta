#define DX_OS_OPEN_MSG
(
   ;opens player message panel on current player
   {if {! {session is_in_game}}
      {if {$this is_message_hiding} {$this show_message}}
      {set $dx_no_message_sound TRUE}} ;prevents message sound from playing in menus
)
#define DX_OS_CLOSE_MSG
(
   ;closes player message panel on current player
   {if {! {session is_in_game}}
      {unless {$this is_message_hiding} {$this hide_message}}
      {set $dx_menu_message ""}
      {set $dx_no_message_sound FALSE}} ;re-allows message sound to play after closing
)
#define DX_MENU_SCROLL_DESC ;used to show a description for each item on a list
(
   {if {! {session is_in_game}}
      {$this setup_message_text
         {sprint {$component selected_sym} "_desc"} FALSE}} ;appends _desc to selected item for locale descriptions
)
#define DX_MENU_DESC ;used to show one static message over an entire menu ( paired with {set $dx_menu_message ...} )
(
   {if {! {session is_in_game}}
      {$this setup_message_text $dx_menu_message FALSE}}
)
#define DX_WARNING_HANDLER
(
   {if_else $ingameset
      {handle ($this set_confirm_message ingame_warning)}
      {if_else $author
         {do
            {set $author FALSE}
            {handle ($this set_confirm_message author_warning)}
         }
         {if_else $autoplay
            {do
               {set $autoplay FALSE}
               {handle ($this set_confirm_message autoplay_warning)}
            }
            {if_else $breakneck
               {do
                  {set $breakneck FALSE}
                  {handle ($this set_confirm_message breakneck_warning)}
               }
               {handle
                  ($this set_confirm_message disable_drum_surface_navigation_warning)}
            }
         }
      }
   }
)
#define OVERSHELL_RB3OS
(
   {background.tex set_bitmap "dx/custom_textures/overshell/original/background.png"}
   {connect_controller.tex set_bitmap "dx/custom_textures/overshell/original/connect_controller.png"}
   {connect_controller_normal2.tex set_bitmap "dx/custom_textures/overshell/original/connect_controller_normal2.png"}
   {connect_controller_spec.tex set_bitmap "dx/custom_textures/overshell/original/connect_controller_spec.png"}
   {pause_container.tex set_bitmap "dx/custom_textures/overshell/original/pause_container.png"}
   {top_bg.tex set_bitmap "dx/custom_textures/overshell/original/top_bg.png"}
   {help_bar.tex set_bitmap "dx/custom_textures/overshell/original/help_bar.png"}
   {top_help_bg.tex set_bitmap "dx/custom_textures/overshell/original/top_help_bg.png"}
   {top_help_bg02.tex set_bitmap "dx/custom_textures/overshell/original/top_help_bg02.png"}
   {online_bg.tex set_bitmap "dx/custom_textures/overshell/original/online_bg.png"}
   {bottom_bg.tex set_bitmap "dx/custom_textures/overshell/original/bottom_bg.png"}
   {top_help_lowered.tex set_bitmap "dx/custom_textures/overshell/original/top_help_lowered.png"}
   {top_help_lowered02.tex set_bitmap "dx/custom_textures/overshell/original/top_help_lowered02.png"}
   {side_piece.tex set_bitmap "dx/custom_textures/overshell/original/side_piece.png"}
   ;{top_bg.mesh set_local_scale .51 .4 .6} ; not used, here for reference
   ;{top_bg.mesh set_local_pos_index 2 55} ; not used, here for reference
   ;{background.mesh set_local_scale_index 0 .675} ; not used, here for reference
   ;{background.mesh set_local_pos_index 0 1} ; not used, here for reference
   ;{background.mesh set_local_pos_index 2 -810} ; not used, here for reference
   ;{ingame_pause_bg.mat set color {pack_color 1.0 1.0 1.0}} ; not used, here for reference
   ;{ingame_pausebg.mat set color {pack_color 1.0 1.0 1.0}} ; not used, here for reference
)
#define OVERSHELL_RB4OS
(
   {background.tex set_bitmap "dx/custom_textures/overshell/rb4_early/background.png"}
   {connect_controller.tex set_bitmap "dx/custom_textures/overshell/rb4_early/connect_controller.png"}
   {connect_controller_normal2.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {connect_controller_spec.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {pause_container.tex set_bitmap "dx/custom_textures/overshell/rb4_early/pause_container.png"}
   {top_bg.tex set_bitmap "dx/custom_textures/overshell/rb4_early/top_bg.png"}
   {help_bar.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_bg.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_bg02.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {online_bg.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {bottom_bg.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   ;{bottom_bg.tex iterate_refs $ref {$ref set color {pack_color 1.0 1.0 1.0}}} ; not used, here for reference
   {top_help_lowered.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_lowered02.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {side_piece.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_bg.mesh set_local_scale .51 .25 .6}
   ;{top_bg.mesh set_local_pos_index 2 55} ; not used, here for reference
   {background.mesh set_local_scale_index 0 .675}
   {background.mesh set_local_pos_index 0 1}
   {background.mesh set_local_pos_index 2 -810}
   {ingame_pause_bg.mat set color {pack_color 1.0 1.0 1.0}}
   {ingame_pausebg.mat set color {pack_color 1.0 1.0 1.0}}
)
#define OVERSHELL_RIVALSOS
(
   {background.tex set_bitmap "dx/custom_textures/overshell/rb4_rivals/background.png"}
   {connect_controller.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {connect_controller_normal2.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {connect_controller_spec.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {pause_container.tex set_bitmap "dx/custom_textures/overshell/rb4_rivals/pause_container.png"}
   {top_bg.tex set_bitmap "dx/custom_textures/overshell/rb4_rivals/top_bg.png"}
   {help_bar.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_bg.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_bg02.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {online_bg.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {bottom_bg.tex set_bitmap "dx/custom_textures/overshell/rb4_rivals/bottom_bg.png"}
   ;{bottom_bg.tex iterate_refs $ref {$ref set color {pack_color 1.0 1.0 1.0}}} ; previously used
   {top_help_lowered.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {top_help_lowered02.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   {side_piece.tex set_bitmap dx/custom_textures/_additional_textures/_no_highway.png}
   ;{top_bg.mesh set_local_scale .51 .4 .6} ; previously used
   ;{top_bg.mesh set_local_pos_index 2 55} ; previously used
   ;{background.mesh set_local_scale_index 0 .675} ; not used, here for reference
   ;{background.mesh set_local_pos_index 0 1} ; not used, here for reference
   ;{background.mesh set_local_pos_index 2 -810} ; not used, here for reference
   {ingame_pause_bg.mat set color {pack_color 1.0 1.0 1.0}}
   {ingame_pausebg.mat set color {pack_color 1.0 1.0 1.0}}
)
#define DX_AUTO_VOCAL_PLAYER_DROPPER_HANDLER ; forcefully drops any player on a non-standard slot when turning off AIM
(
   {if {> $dx_os_slot_counter 4}
      {set $dx_os_slot_counter 0}
   }
   {if 
      {&&
         {user_mgr get_user_from_slot $dx_os_slot_counter}
         {||
            {switch $dx_os_slot_counter
               (0
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerVocals}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerDrum}
               )
               (1
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerGuitar}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerRealGuitar}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerKeys}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerVocals}
               )
               (2
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerGuitar}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerRealGuitar}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerKeys}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerDrum}
               )
               (3
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerVocals}
                  {== {{user_mgr get_user_from_slot $dx_os_slot_counter} get_controller_type} kControllerDrum}
               )
            }
         }
      }
      {{overshell get_slot {user_mgr get_user_from_slot $dx_os_slot_counter}} remove_user}
   }
   {set $dx_os_slot_counter {+ $dx_os_slot_counter 1}}
)
#define DX_AUTO_VOCALS_HANDLER
(
   {if_else {modifier_mgr is_modifier_active mod_auto_vocals}
      {do
         {$this attempt_toggle_auto_vocals} ;vanilla function to turn off AIM
         ;if AIM successfully turns off, proceed to remove any players on a non-standard slot
         {if {! {modifier_mgr is_modifier_active mod_auto_vocals}}
            DX_AUTO_VOCAL_PLAYER_DROPPER_HANDLER
            DX_AUTO_VOCAL_PLAYER_DROPPER_HANDLER
            DX_AUTO_VOCAL_PLAYER_DROPPER_HANDLER
            DX_AUTO_VOCAL_PLAYER_DROPPER_HANDLER
            {overshell update_all}
         }
      }
      {if_else
         ;Forces AIM to turn on, even if only a vocalist exists and requirements are met
         ;Otherwise, the vanilla function will be used to turn on AIM
         {&&
            {== {user_mgr get_num_local_participants} 1}
            {== {{$this get_user} get_controller_type} kControllerVocals}
            {! {$this in_game}}
            {session_mgr is_local}
         }
         {do
            {modifier_mgr toggle_modifier_enabled mod_auto_vocals}
            {overshell update_all}
         }
         {$this attempt_toggle_auto_vocals}
      }
   }
)
#define DX_IS_VOX_LANED
(
   {if_else
      {&&
         {user_mgr get_user_from_slot 2} ;check if user on slot 2 exists
         {== {{user_mgr get_user_from_slot 2} get_track_type} kTrackVocals}} ;check if slot 2 user is on solo/harm vocals
      1 ;Moves vox pause menu to vocal highway
      2 ;Moves vox pause menu to laned instrument
   }
)
#define DX_MODIFIER_HANDLERS
(
   (mod_nohud
      {if {modifier_mgr is_modifier_active mod_nohud}
         {if {modifier_mgr is_modifier_active mod_fakejuke}
            {modifier_mgr toggle_modifier_enabled mod_fakejuke}
            {modifier_mgr toggle_modifier_enabled mod_auto_play}
            {modifier_mgr toggle_modifier_enabled mod_nopause}
         }
      }
      {modifier_mgr toggle_modifier_enabled mod_nohud}
      {overshell update_all}
   )
   (mod_nolanes
      {if {modifier_mgr is_modifier_active mod_rb4lanes}
         {modifier_mgr toggle_modifier_enabled mod_rb4lanes}
      }
      {modifier_mgr toggle_modifier_enabled mod_nolanes}
      {set $nolanes {! $nolanes}}
      {overshell update_all}
   )
   (mod_brutalmode
      {unless {modifier_mgr is_modifier_active mod_brutalmode}
         {$this show_state dxState_BrutalWarn}
      }
      {if {modifier_mgr is_modifier_active mod_brutalmode}
         {do
            {modifier_mgr toggle_modifier_enabled $modifier}
            {set $dx_stars_needs_reset TRUE}
            {set $dx_multiplier_ring_needs_reset TRUE}
            {overshell update_all}
            {ui goto_screen meta_loading_main_screen}
         }
      }
   )
   (mod_rb4lanes
      {if {modifier_mgr is_modifier_active mod_nolanes}
         {modifier_mgr toggle_modifier_enabled mod_nolanes}
      }
      {modifier_mgr toggle_modifier_enabled mod_rb4lanes}
      {overshell update_all}
   )
   (mod_practiceoverdrive
      {modifier_mgr toggle_modifier_enabled mod_practiceoverdrive}
      {set $practiceoverdrive {! $practiceoverdrive}}
      {overshell update_all}
   )
   (mod_nobre
      {modifier_mgr toggle_modifier_enabled mod_nobre}
      {overshell update_all}
   )
   (mod_doublespeed
      {modifier_mgr toggle_modifier_enabled mod_doublespeed}
      {overshell update_all}
   )
   (mod_fakejuke
      {do
         {session disconnect}
         {session_mgr disconnect}
      }
      {unless {{$this get_session_mgr} is_online_enabled}
         {unless {modifier_mgr is_modifier_active mod_fakejuke}
            {$this show_state dxState_FakeJukeWarn}
         }
         {if {modifier_mgr is_modifier_active mod_fakejuke}
            {do
               {modifier_mgr toggle_modifier_enabled $modifier}
               {if {modifier_mgr is_modifier_active mod_auto_play}
                  {modifier_mgr toggle_modifier_enabled mod_auto_play}
               }
               {if {modifier_mgr is_modifier_active mod_nohud}
                  {modifier_mgr toggle_modifier_enabled mod_nohud}
               }
               {if {modifier_mgr is_modifier_active mod_nopause}
                  {modifier_mgr toggle_modifier_enabled mod_nopause}
               }
               {if {modifier_mgr is_modifier_active mod_dx_no_overdrive}
                  {modifier_mgr toggle_modifier_enabled mod_dx_no_overdrive}
               }
               {overshell update_all}
               {ui goto_screen meta_loading_main_screen}
            }
         }
      }
   )
   (mod_auto_play
      {do
         {session disconnect}
         {session_mgr disconnect}
      }
      {unless {{$this get_session_mgr} is_online_enabled}
         {unless {modifier_mgr is_modifier_active mod_auto_play}
            {$this show_state dxState_AutoPlayWarn}
         }
         {if {modifier_mgr is_modifier_active mod_auto_play}
            {do
               {set $dx_multiplier_ring_needs_reset TRUE}
               {modifier_mgr toggle_modifier_enabled $modifier}
               {if {modifier_mgr is_modifier_active mod_fakejuke}
                  {modifier_mgr toggle_modifier_enabled mod_fakejuke}
                  {modifier_mgr toggle_modifier_enabled mod_nohud}
                  {modifier_mgr toggle_modifier_enabled mod_nopause}
               }
               {overshell update_all}
               {ui goto_screen meta_loading_main_screen}
            }
         }
      }
   )
   (mod_auto_kick
      {do
         {session disconnect}
         {session_mgr disconnect}
         {modifier_mgr toggle_modifier_enabled $modifier}
         {if {$this in_game}
            {$this show_state dxState_ModifierSongLoad}
         }
         {overshell update_all}
      }
   )
   (mod_chmode
      {unless {modifier_mgr is_modifier_active mod_chmode}
         {$this show_state dxState_CHModeWarn}
      }
      {if {modifier_mgr is_modifier_active mod_chmode}
         {do
            {modifier_mgr toggle_modifier_enabled $modifier}
            {set $dx_rails_needs_reset TRUE}
            {set $dx_multiplier_ring_needs_reset TRUE}
            {if {== $dx_rails none}
               {set $dx_rails "rock band 3"}
            }
            {overshell update_all}
            {ui goto_screen meta_loading_main_screen}
         }
      }
   )
   (mod_calibration
      {unless
         {modifier_mgr is_modifier_active mod_calibration}
         {$this show_state dxState_CalibrationWarn}
      }
      {if
         {modifier_mgr is_modifier_active mod_calibration}
         {do
            {modifier_mgr toggle_modifier_enabled $modifier}
            {set $dx_multiplier_ring_needs_reset TRUE}
            {overshell update_all}
            {ui goto_screen meta_loading_main_screen}
         }
      }
   )
   (mod_precision
      {unless
         {modifier_mgr is_modifier_active mod_precision}
         {$this show_state dxState_PrecisionWarn}
      }
      {if
         {modifier_mgr is_modifier_active mod_precision}
         {do
            {set $dx_multiplier_ring_needs_reset TRUE}
            {set $dx_rails_needs_reset TRUE}
            {if {== $dx_rails none}
               {set $dx_rails "rock band 3"}
            }
            {modifier_mgr toggle_modifier_enabled $modifier}
            {overshell update_all}
            {ui goto_screen meta_loading_main_screen}
         }
      }
   )
   (mod_perfection
   {modifier_mgr toggle_modifier_enabled $modifier}
   ;TODO: Enable/Disable $dx_no_venue_intro when activating perfection 
   {overshell update_all}
   )
)

#define DX_SET_QUICK_CHAT_OPTIONS
(
   {do
      ($options
         {array 0})
      {switch
         $dx_is_in_chat
         (all ;populates menu with every quick chat phrase
            {do
               {set $dx_quick_chat_phrases (DX_QUICK_CHAT_PHRASES)}
               {foreach $entry $dx_quick_chat_phrases {push_back $options $entry}}
            }
         )
         (quick ;only shows the 8 quick chat presets
            {do
               {push_back $options {sprintf "1: %s" $dx_chat_preset_0}}
               {push_back $options {sprintf "2: %s" $dx_chat_preset_1}}
               {push_back $options {sprintf "3: %s" $dx_chat_preset_2}}
               {push_back $options {sprintf "4: %s" $dx_chat_preset_3}}
               {push_back $options {sprintf "5: %s" $dx_chat_preset_4}}
               {push_back $options {sprintf "6: %s" $dx_chat_preset_5}}
               {push_back $options {sprintf "7: %s" $dx_chat_preset_6}}
               {push_back $options {sprintf "8: %s" $dx_chat_preset_7}}
            }
         )
         (FALSE ;restores vanilla online options when not in chat menu
            #ifdef HX_WII
            {do
               {if
                  {wii_invitations_provider is_invitation_pending}
                  {push_back $options wii_friends_view_invite}}
               {if
                  {==
                     {ui current_screen}
                     main_hub_screen}
                  {if_else
                     {!
                        {profile_mgr get_using_wii_friends}}
                     {if
                        {session_mgr is_local}
                        {push_back $options overshell_import_wii_friends}}
                     {push_back $options overshell_invite}}}
            }
            #else
            {push_back $options overshell_invite}
            #endif
            #ifdef HX_XBOX
            {push_back $options overshell_invite_xbox_party}
            #endif
            #ifdef HX_PS3
            {push_back $options overshell_check_invites}
            {push_back $options overshell_kick}
            #endif
            #ifdef HX_XBOX
            {push_back $options overshell_gamercard}
            #endif
            #ifdef HX_PS3
            {push_back $options overshell_mute}
            #endif
            {push_back $options overshell_disconnect}
         )
      }
      {online_options.lst set_data $options}
   }
)

;part selection, adds non-standard selections on a certain instrument if faking is active
#define DX_PART_SELECT_GUITAR
(
   {do
      ($options
         {array 0})
      {push_back $options overshell_guitar}
      {push_back $options overshell_bass}
      {push_back $options overshell_keys}
      {if {|| $dx_additional_parts {! {session_mgr is_local}}}
         {if {== $dx_joypad_type_vocals kControllerGuitar}
            {push_back $options overshell_drums}
         }
         {unless {== {ui current_screen} game_screen}
            {push_back $options overshell_vocal_solo}
            {push_back $options overshell_vocal_harmony}
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_DRUMS
(
   {do
      ($options
         {array 0})
      {push_back $options overshell_drums}
      {push_back $options overshell_drums_pro}
      {if {|| $dx_additional_parts {! {session_mgr is_local}}}
         {if 
            {||
               {== $dx_joypad_type_guitar kControllerDrum}
               {== $dx_joypad_type_keys kControllerDrum}
               {== $dx_joypad_type_vocals kControllerDrum}
            }
            {do
               {push_back $options overshell_guitar}
               {push_back $options overshell_bass}
               {push_back $options overshell_keys}
            }
         }
         {if {== $dx_joypad_type_keys kControllerDrum}
            {push_back $options overshell_real_keys}
         }
         {unless {== {ui current_screen} game_screen}
            {push_back $options overshell_vocal_solo}
            {push_back $options overshell_vocal_harmony}
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_VOCALS
(
   {do
      ($options
         {array 0})
      {push_back $options overshell_vocal_solo}
      {push_back $options overshell_vocal_harmony}
      {if {|| $dx_additional_parts {! {session_mgr is_local}}}
         {unless {== {ui current_screen} game_screen}
            {do
               {push_back $options overshell_guitar}
               {push_back $options overshell_bass}
               {push_back $options overshell_keys}
               {if {== $dx_joypad_type_keys kControllerVocals}
                  {push_back $options overshell_real_keys}}
               {push_back $options overshell_drums}
            }
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_KEYS
(
   {do
      ($options
         {array 0})
      {push_back $options overshell_keys}
      {push_back $options overshell_real_keys}
      {push_back $options overshell_guitar}
      {push_back $options overshell_bass}
      {if {|| $dx_additional_parts {! {session_mgr is_local}}}
         {push_back $options overshell_drums}
         {unless {== {ui current_screen} game_screen}
            {push_back $options overshell_vocal_solo}
            {push_back $options overshell_vocal_harmony}
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_REAL_GUITAR
(
   {do
      ($options
         {array 0})
      {push_back $options overshell_real_guitar}
      {push_back $options overshell_real_bass}
      {push_back $options overshell_guitar}
      {push_back $options overshell_bass}
      {if {|| $dx_additional_parts {! {session_mgr is_local}}}
         {unless {== {ui current_screen} game_screen}
            {push_back $options overshell_vocal_solo}
            {push_back $options overshell_vocal_harmony}
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_AUTOPLAY
(
   {do
      ($options
         {array 0})
      {unless 
         {&& 
            {== {ui current_screen} game_screen}
            {||
               {== {{$this get_user} get_controller_type} kControllerGuitar}
               {== {{$this get_user} get_controller_type} kControllerDrum}
               {== {{$this get_user} get_controller_type} kControllerKeys}
               {== {{$this get_user} get_controller_type} kControllerRealGuitar}
            }
         }
         {do
            {push_back $options overshell_vocal_solo} {push_back $options overshell_vocal_harmony}
         }
      }
      {unless {&& {== {ui current_screen} game_screen} {== {{$this get_user} get_controller_type} kControllerVocals}}
         {do
            {push_back $options overshell_guitar} {push_back $options overshell_bass}
            {push_back $options overshell_drums} {push_back $options overshell_drums_pro}
            {push_back $options overshell_keys} {push_back $options overshell_real_keys}
            {push_back $options overshell_real_guitar} {push_back $options overshell_real_bass}
            {push_back $options overshell_real_guitar_22} {push_back $options overshell_real_bass_22}
         }
      }
      {choose_part.lst set_data $options}
   }
)
#define DX_PART_SELECT_HANDLERS
(
   {if_else {modifier_mgr is_modifier_active mod_auto_play}
      ;makes every instrument selectable when autoplay is on
      DX_PART_SELECT_AUTOPLAY
      ;otherwise set instrument selection normally
      {do
         {switch {{$this get_user} get_controller_type}
            (kControllerGuitar DX_PART_SELECT_GUITAR)
            (kControllerDrum DX_PART_SELECT_DRUMS)
            (kControllerVocals DX_PART_SELECT_VOCALS)
            (kControllerKeys DX_PART_SELECT_KEYS)
            (kControllerRealGuitar DX_PART_SELECT_REAL_GUITAR)
            {fail "No choose part view for this controller type"}
         }
      }
   }
   ;Selects default instrument by slot number
   {switch
      {$this get_slot_num}
      (0 {choose_part.lst set_selected $default_slot0})
      (1 {choose_part.lst set_selected $default_slot1})
      (2 {choose_part.lst set_selected $default_slot2})
      (3 {choose_part.lst set_selected $default_slot3})
      {fail {choose_part.lst set_selected $default_slot0}}
   }
)
#define DX_REMAP_PAD
(
   ;Selects current mapping configuration from pads and removes them from array
   {remove_elem {find $syscfg joypad controller_mapping digital} {elem {find $syscfg joypad controller_mapping digital} 1}}
   {remove_elem {find $syscfg joypad controller_mapping analog} {elem {find $syscfg joypad controller_mapping analog} 1}}
   {remove_elem {find $syscfg joypad controller_mapping dualshock} {elem {find $syscfg joypad controller_mapping dualshock} 1}}
   {remove_elem {find $syscfg joypad controller_mapping stagekit_xbox} {elem {find $syscfg joypad controller_mapping stagekit_xbox} 1}}
   
   ;Appends newly selected map configuration to pad controller arrays
   {push_back {find $syscfg joypad controller_mapping digital} $dx_joypad_pad_mapping}
   {push_back {find $syscfg joypad controller_mapping analog} $dx_joypad_pad_mapping}
   {push_back {find $syscfg joypad controller_mapping dualshock} $dx_joypad_pad_mapping}
   {push_back {find $syscfg joypad controller_mapping stagekit_xbox} $dx_joypad_pad_mapping}
   #ifdef HX_WII
   {remove_elem {find $syscfg joypad controller_mapping wii_remote} {elem {find $syscfg joypad controller_mapping wii_remote} 1}}
   {remove_elem {find $syscfg joypad controller_mapping wii_classic} {elem {find $syscfg joypad controller_mapping wii_classic} 1}}
   {remove_elem {find $syscfg joypad controller_mapping gamecube} {elem {find $syscfg joypad controller_mapping gamecube} 1}}
   {push_back {find $syscfg joypad controller_mapping wii_remote} {if_else {== $dx_joypad_pad_mapping joypad} wii_remote $dx_joypad_pad_mapping}}
   {push_back {find $syscfg joypad controller_mapping wii_classic} {if_else {== $dx_joypad_pad_mapping joypad} wii_classic $dx_joypad_pad_mapping}}
   {push_back {find $syscfg joypad controller_mapping gamecube} {if_else {== $dx_joypad_pad_mapping joypad} gamecube $dx_joypad_pad_mapping}}
   #endif
   {dx_log_writer info {sprint "Pad mapping has been changed to: " {find $syscfg joypad controller_mapping analog}}}
   {overshell update_all}
)
#define DX_SWAP_INSTRUMENT_TYPE_GUITAR
(
   ;Selects current instrument configuration from guitars and removes them from array
   {remove_elem {find $syscfg joypad instrument_mapping ro_guitar} {elem {find $syscfg joypad instrument_mapping ro_guitar} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping ro_guitar_xbox} {elem {find $syscfg joypad instrument_mapping ro_guitar_xbox} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping strat_xbox} {elem {find $syscfg joypad instrument_mapping strat_xbox} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping strat_xbox_rb2} {elem {find $syscfg joypad instrument_mapping strat_xbox_rb2} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping hx_guitar_ps3} {elem {find $syscfg joypad instrument_mapping hx_guitar_ps3} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping ps3_rb2_guitar} {elem {find $syscfg joypad instrument_mapping ps3_rb2_guitar} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping ro_guitar_ps3} {elem {find $syscfg joypad instrument_mapping ro_guitar_ps3} 1}}
   #ifdef HX_WII
   {remove_elem {find $syscfg joypad instrument_mapping wii_guitar} {elem {find $syscfg joypad instrument_mapping wii_guitar} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping wii_guitar_rb2} {elem {find $syscfg joypad instrument_mapping wii_guitar_rb2} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping wii_roguitar} {elem {find $syscfg joypad instrument_mapping wii_roguitar} 1}}
   #endif
   
   ;Appends newly selected instrument configuration to guitar instrument arrays
   {push_back {find $syscfg joypad instrument_mapping ro_guitar} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping ro_guitar_xbox} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping strat_xbox} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping strat_xbox_rb2} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping hx_guitar_ps3} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping ps3_rb2_guitar} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping ro_guitar_ps3} $dx_joypad_type_guitar}
   #ifdef HX_WII
   {push_back {find $syscfg joypad instrument_mapping wii_guitar} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping wii_guitar_rb2} $dx_joypad_type_guitar}
   {push_back {find $syscfg joypad instrument_mapping wii_roguitar} $dx_joypad_type_guitar}
   #endif
   {overshell update_all}
)
#define DX_SWAP_INSTRUMENT_TYPE_KEYS
(
   ;Selects current instrument configuration from keys and removes them from array
   {remove_elem {find $syscfg joypad instrument_mapping hx_midi_keys_xbox} {elem {find $syscfg joypad instrument_mapping hx_midi_keys_xbox} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping hx_midi_keys_ps3} {elem {find $syscfg joypad instrument_mapping hx_midi_keys_ps3} 1}}
   #ifdef HX_WII
   {remove_elem {find $syscfg joypad instrument_mapping hx_midi_keys_wii} {elem {find $syscfg joypad instrument_mapping hx_midi_keys_wii} 1}}
   #endif
   
   ;Appends newly selected instrument configuration to keys instrument arrays
   {push_back {find $syscfg joypad instrument_mapping hx_midi_keys_xbox} $dx_joypad_type_keys}
   {push_back {find $syscfg joypad instrument_mapping hx_midi_keys_ps3} $dx_joypad_type_keys}
   #ifdef HX_WII
   {push_back {find $syscfg joypad instrument_mapping hx_midi_keys_wii} $dx_joypad_type_keys}
   #endif
   {overshell update_all}
)
#define DX_SWAP_INSTRUMENT_TYPE_VOCALS
(
   ;Selects current instrument configuration from vocals and removes them from array
   {remove_elem {find $syscfg joypad instrument_mapping hx_xbox} {elem {find $syscfg joypad instrument_mapping hx_xbox} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping digital} {elem {find $syscfg joypad instrument_mapping digital} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping analog} {elem {find $syscfg joypad instrument_mapping analog} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping dualshock} {elem {find $syscfg joypad instrument_mapping dualshock} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping stagekit_xbox} {elem {find $syscfg joypad instrument_mapping stagekit_xbox} 1}}
   #ifdef HX_WII
   {remove_elem {find $syscfg joypad instrument_mapping wii_remote} {elem {find $syscfg joypad instrument_mapping wii_remote} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping wii_classic} {elem {find $syscfg joypad instrument_mapping wii_classic} 1}}
   {remove_elem {find $syscfg joypad instrument_mapping gamecube} {elem {find $syscfg joypad instrument_mapping gamecube} 1}}
   #endif
   
   ;Appends newly selected instrument configuration to vocals instrument arrays
   {push_back {find $syscfg joypad instrument_mapping hx_xbox} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping digital} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping analog} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping dualshock} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping stagekit_xbox} $dx_joypad_type_vocals}
   #ifdef HX_WII
   {push_back {find $syscfg joypad instrument_mapping wii_remote} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping wii_classic} $dx_joypad_type_vocals}
   {push_back {find $syscfg joypad instrument_mapping gamecube} $dx_joypad_type_vocals}
   #endif
   {overshell update_all}
)
#define DX_RESET_INST_TYPES ;sets all controllers back to their default instrument
(
   {set $dx_joypad_type_guitar kControllerGuitar}
   {set $dx_joypad_type_keys kControllerKeys}
   {set $dx_joypad_type_vocals kControllerVocals}
   DX_SWAP_INSTRUMENT_TYPE_GUITAR
   DX_SWAP_INSTRUMENT_TYPE_KEYS
   DX_SWAP_INSTRUMENT_TYPE_VOCALS
)