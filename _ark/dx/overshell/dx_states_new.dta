(dxState_DeluxeSettings
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_set_speeds}
         {push_back $options os_venue_options}
         {push_back $options os_track_theme}
         {push_back $options os_graphics}
         {push_back $options os_audio_sfx}
         {push_back $options os_advanced}
         #ifdef HX_XBOX
         #ifdef RB3E
         #ifndef RB3E_EMULATOR
         {push_back $options os_reboot}
         #endif
         #endif
         #endif
         ;-----func----------state name---------message
         {dx_state_setup dxState_DeluxeSettings os_welcome_msg}
      }
      {overshell_view_chooser}
   )
   (enter
      ;reapplies the user's own theme when entering dx settings to prevent remote textures from overriding their own theme
      {dx_resync_local_textures all}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_set_speeds
            {$this show_state dxState_SetSpeeds})
         (os_venue_options
            {$this show_state dxState_VenueOptions})
         (os_track_theme
            {$this show_state dxState_TrackThemeLoader})
         (os_graphics
            {$this show_state dxState_Graphics})
         (os_audio_sfx
            {$this show_state dxState_AudioSFX})
         (os_advanced
            {$this show_state dxState_Advanced})
         (os_reboot
            {$this show_state dxState_Reboot})
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {do
         ($options {array 0})
         {push_back $options overshell_invite}
         #ifdef HX_XBOX {push_back $options overshell_invite_xbox_party} #endif
         #ifdef HX_PS3 {push_back $options overshell_check_invites} #endif
         {push_back $options overshell_kick}
         {push_back $options #ifdef HX_XBOX overshell_gamercard #else overshell_mute #endif}
         {push_back $options overshell_disconnect}
         {online_options.lst set_data $options}
      }
      {if_else $dx_prompt_save
         {$this show_state dxState_SaveWarn}
         {if_else $dx_settings_error
            {$this show_state dxState_SaveWarnError}
            {do {dx_settings_dta_writer} {$this show_game_options}}
         }
      }
   )
)

#define DX_PRINT_SONG_SPEED
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_song_speed} {int {+ 0.5 {* $speedmod 100}}}}}
)
#define DX_SET_SPEEDS_DATA
(
   {$current_list set_data
      (
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk os_track_speeds}
         DX_PRINT_SONG_SPEED
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 2}} os_blnk os_acceleration_mode}
      )
   }
)
(dxState_SetSpeeds
   (view
      options_extras
   )
   (enter
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {set $current_list options_extras.lst}
      {if_else {$this in_game}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }
      {$current_list restart_highlight_matanim}
      {$current_list refresh}
      DX_SET_SPEEDS_DATA
   )
   ;(SCROLL_MSG
   ;   DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_track_speeds
            {$this show_state dxState_TrackSpeeds})
         (os_acceleration_mode
            {$this show_state dxState_AccelerationMode})
      }
   )
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {set $dx_list_item_selected FALSE}
               DX_SET_SPEEDS_DATA
            )
            ((kAction_Down kAction_Up)
               {switch {$current_list selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Down {> $speedmod 1})
                           (kAction_Up {< $speedmod 2.45})
                        }
                        {set $speedmod
                           {switch $action
                              (kAction_Down {- $speedmod 0.05})
                              (kAction_Up {+ $speedmod 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  kDataUnhandled
               }
               DX_SET_SPEEDS_DATA
            )
            kDataUnhandled
         }
         {switch
            $action
            (kAction_Confirm
               {switch {$current_list selected_data}
                  (1
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_SET_SPEEDS_DATA
                  )
                  kDataUnhandled
               }
            )
            ((kAction_Left kAction_Right)
               {switch {$current_list selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Left {> $speedmod 1})
                           (kAction_Right {< $speedmod 2.45})
                        }
                        {set $speedmod
                           {switch $action
                              (kAction_Left {- $speedmod 0.05})
                              (kAction_Right {+ $speedmod 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  kDataUnhandled
               }
               DX_SET_SPEEDS_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_PRINT_TRACK_SPEED_GUITAR
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_guitar} {int {+ 0.5 {* $trackspeed_guitar 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_BASS
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 2} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_bass} {int {+ 0.5 {* $trackspeed_bass 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_DRUM
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 3} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_drum} {int {+ 0.5 {* $trackspeed_drum 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_KEYS
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 4} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_keys} {int {+ 0.5 {* $trackspeed_keys 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_REAL_GUITAR
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 5} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_real_guitar} {int {+ 0.5 {* $trackspeed_real_guitar 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_REAL_BASS
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 6} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_real_bass} {int {+ 0.5 {* $trackspeed_real_bass 100}}}}}
)
#define DX_PRINT_TRACK_SPEED_REAL_KEYS
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 7} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_trkspd_real_keys} {int {+ 0.5 {* $trackspeed_real_keys 100}}}}}
)
#define DX_TRACK_SPEED_DATA
(
   {$current_list set_data
      (
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk all_instruments}
         DX_PRINT_TRACK_SPEED_GUITAR
         DX_PRINT_TRACK_SPEED_BASS
         DX_PRINT_TRACK_SPEED_DRUM
         DX_PRINT_TRACK_SPEED_KEYS
         DX_PRINT_TRACK_SPEED_REAL_GUITAR
         DX_PRINT_TRACK_SPEED_REAL_BASS
         DX_PRINT_TRACK_SPEED_REAL_KEYS
      )
   }
)
(dxState_TrackSpeeds
   (view
      options_audio
   )
   (enter
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {set $current_list options_audio.lst}
      {if_else {$this in_game}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }
      {$current_list restart_highlight_matanim}
      {$current_list refresh}
      DX_TRACK_SPEED_DATA
   )
   ;(SCROLL_MSG
   ;   DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {set $dx_list_item_selected FALSE}
               DX_TRACK_SPEED_DATA
            )
            ((kAction_Down kAction_Up)
               {switch {$current_list selected_data}
                  (0
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_guitar 0.55})
                           (kAction_Up {< $trackspeed_guitar 2.55})
                        }
                        {set $trackspeed_guitar
                           {switch $action
                              (kAction_Down {- $trackspeed_guitar 0.05})
                              (kAction_Up {+ $trackspeed_guitar 0.05})
                           }
                        }
                        {set $trackspeed_bass
                           $trackspeed_guitar
                        }
                        {set $trackspeed_drum
                           $trackspeed_guitar
                        }
                        {set $trackspeed_keys
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_keys
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_guitar
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_bass
                           $trackspeed_guitar
                        }
                     }
                     {set $dx_list_pos 0}
                  )
                  (1
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_guitar 0.55})
                           (kAction_Up {< $trackspeed_guitar 2.55})
                        }
                        {set $trackspeed_guitar
                           {switch $action
                              (kAction_Down {- $trackspeed_guitar 0.05})
                              (kAction_Up {+ $trackspeed_guitar 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  (2
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_bass 0.55})
                           (kAction_Up {< $trackspeed_bass 2.55})
                        }
                        {set $trackspeed_bass
                           {switch $action
                              (kAction_Down {- $trackspeed_bass 0.05})
                              (kAction_Up {+ $trackspeed_bass 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 2}
                  )
                  (3
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_drum 0.55})
                           (kAction_Up {< $trackspeed_drum 2.55})
                        }
                        {set $trackspeed_drum
                           {switch $action
                              (kAction_Down {- $trackspeed_drum 0.05})
                              (kAction_Up {+ $trackspeed_drum 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 3}
                  )
                  (4
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_keys 0.55})
                           (kAction_Up {< $trackspeed_keys 2.55})
                        }
                        {set $trackspeed_keys
                           {switch $action
                              (kAction_Down {- $trackspeed_keys 0.05})
                              (kAction_Up {+ $trackspeed_keys 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 4}
                  )
                  (5
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_real_guitar 0.55})
                           (kAction_Up {< $trackspeed_real_guitar 2.55})
                        }
                        {set $trackspeed_real_guitar
                           {switch $action
                              (kAction_Down {- $trackspeed_real_guitar 0.05})
                              (kAction_Up {+ $trackspeed_real_guitar 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 5}
                  )
                  (6
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_real_bass 0.55})
                           (kAction_Up {< $trackspeed_real_bass 2.55})
                        }
                        {set $trackspeed_real_bass
                           {switch $action
                              (kAction_Down {- $trackspeed_real_bass 0.05})
                              (kAction_Up {+ $trackspeed_real_bass 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 6}
                  )
                  (7
                     {if
                        {switch $action
                           (kAction_Down {> $trackspeed_real_keys 0.55})
                           (kAction_Up {< $trackspeed_real_keys 2.55})
                        }
                        {set $trackspeed_real_keys
                           {switch $action
                              (kAction_Down {- $trackspeed_real_keys 0.05})
                              (kAction_Up {+ $trackspeed_real_keys 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 7}
                  )
                  kDataUnhandled
               }
               DX_TRACK_SPEED_DATA
            )
            kDataUnhandled
         }
         {switch
            $action
            (kAction_Confirm
               {set $dx_list_item_selected TRUE}
               {set $dx_list_pos {$current_list selected_data}}
               DX_TRACK_SPEED_DATA
            )
            ((kAction_Left kAction_Right)
               {switch {$current_list selected_data}
                  (0
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_guitar 0.55})
                           (kAction_Right {< $trackspeed_guitar 2.55})
                        }
                        {set $trackspeed_guitar
                           {switch $action
                              (kAction_Left {- $trackspeed_guitar 0.05})
                              (kAction_Right {+ $trackspeed_guitar 0.05})
                           }
                        }
                        {set $trackspeed_bass
                           $trackspeed_guitar
                        }
                        {set $trackspeed_drum
                           $trackspeed_guitar
                        }
                        {set $trackspeed_keys
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_keys
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_guitar
                           $trackspeed_guitar
                        }
                        {set $trackspeed_real_bass
                           $trackspeed_guitar
                        }
                     }
                     {set $dx_list_pos 0}
                  )
                  (1
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_guitar 0.55})
                           (kAction_Right {< $trackspeed_guitar 2.55})
                        }
                        {set $trackspeed_guitar
                           {switch $action
                              (kAction_Left {- $trackspeed_guitar 0.05})
                              (kAction_Right {+ $trackspeed_guitar 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  (2
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_bass 0.55})
                           (kAction_Right {< $trackspeed_bass 2.55})
                        }
                        {set $trackspeed_bass
                           {switch $action
                              (kAction_Left {- $trackspeed_bass 0.05})
                              (kAction_Right {+ $trackspeed_bass 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 2}
                  )
                  (3
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_drum 0.55})
                           (kAction_Right {< $trackspeed_drum 2.55})
                        }
                        {set $trackspeed_drum
                           {switch $action
                              (kAction_Left {- $trackspeed_drum 0.05})
                              (kAction_Right {+ $trackspeed_drum 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 3}
                  )
                  (4
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_keys 0.55})
                           (kAction_Right {< $trackspeed_keys 2.55})
                        }
                        {set $trackspeed_keys
                           {switch $action
                              (kAction_Left {- $trackspeed_keys 0.05})
                              (kAction_Right {+ $trackspeed_keys 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 4}
                  )
                  (5
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_real_guitar 0.55})
                           (kAction_Right {< $trackspeed_real_guitar 2.55})
                        }
                        {set $trackspeed_real_guitar
                           {switch $action
                              (kAction_Left {- $trackspeed_real_guitar 0.05})
                              (kAction_Right {+ $trackspeed_real_guitar 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 5}
                  )
                  (6
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_real_bass 0.55})
                           (kAction_Right {< $trackspeed_real_bass 2.55})
                        }
                        {set $trackspeed_real_bass
                           {switch $action
                              (kAction_Left {- $trackspeed_real_bass 0.05})
                              (kAction_Right {+ $trackspeed_real_bass 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 6}
                  )
                  (7
                     {if
                        {switch $action
                           (kAction_Left {> $trackspeed_real_keys 0.55})
                           (kAction_Right {< $trackspeed_real_keys 2.55})
                        }
                        {set $trackspeed_real_keys
                           {switch $action
                              (kAction_Left {- $trackspeed_real_keys 0.05})
                              (kAction_Right {+ $trackspeed_real_keys 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 7}
                  )
                  kDataUnhandled
               }
               DX_TRACK_SPEED_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {$this show_state dxState_SetSpeeds}
   )
)

#define DX_PRINT_MAX_SPEED
(
   {if_else {&& $dx_list_item_selected {!= $dx_list_pos 1} {!= $dx_list_pos 0}} os_blnk {sprintf {localize os_max_speed} {int {+ 0.5 {* $speedmod_cap 100}}}}}
)
#define DX_ACCELERATION_MODE_DATA
(
   {$current_list set_data
      (
         {if_else {&& $dx_list_item_selected {!= $dx_list_pos 0}} os_blnk {if_else {modifier_mgr is_modifier_active mod_fastermode} os_fastermode_on os_fastermode_off}}
         DX_PRINT_MAX_SPEED
      )
   }
)
(dxState_AccelerationMode
   (view
      options_end_game
   )
   (enter
      {set $dx_list_item_selected FALSE}
      {set $dx_list_pos 0}
      {set $current_list options_end_game.lst}
      {if_else {$this in_game}
         {$current_list set_type overshell_menu_ingame}
         {$current_list set_type overshell_menu}
      }
      {$current_list restart_highlight_matanim}
      {$current_list refresh}
      DX_ACCELERATION_MODE_DATA
   )
   ;(SCROLL_MSG
   ;   DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_fastermode_off
            {unless {modifier_mgr is_modifier_active mod_fastermode}
               {modifier_mgr toggle_modifier_enabled mod_fastermode}
            }
            DX_ACCELERATION_MODE_DATA
         )
         (os_fastermode_on
            {if {modifier_mgr is_modifier_active mod_fastermode}
               {modifier_mgr toggle_modifier_enabled mod_fastermode}
            }
            DX_ACCELERATION_MODE_DATA
         )
      }
   )
   (BUTTON_DOWN_MSG
      {if_else
         $dx_list_item_selected
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {set $dx_list_item_selected FALSE}
               DX_ACCELERATION_MODE_DATA
            )
            ((kAction_Down kAction_Up)
               {switch {$current_list selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Down {> $speedmod_cap 1.05})
                           (kAction_Up {< $speedmod_cap 2.45})
                        }
                        {set $speedmod_cap
                           {switch $action
                              (kAction_Down {- $speedmod_cap 0.05})
                              (kAction_Up {+ $speedmod_cap 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  kDataUnhandled
               }
               DX_ACCELERATION_MODE_DATA
            )
            kDataUnhandled
         }
         {switch
            $action
            (kAction_Confirm
               {switch {$current_list selected_data}
                  (1
                     {set $dx_list_item_selected TRUE}
                     {set $dx_list_pos {$current_list selected_data}}
                     DX_ACCELERATION_MODE_DATA
                  )
                  kDataUnhandled
               }
            )
            ((kAction_Left kAction_Right)
               {switch {$current_list selected_data}
                  (1
                     {if
                        {switch $action
                           (kAction_Left {> $speedmod_cap 1.05})
                           (kAction_Right {< $speedmod_cap 2.45})
                        }
                        {set $speedmod_cap
                           {switch $action
                              (kAction_Left {- $speedmod_cap 0.05})
                              (kAction_Right {+ $speedmod_cap 0.05})
                           }
                        }
                     }
                     {set $dx_list_pos 1}
                  )
                  kDataUnhandled
               }
               DX_ACCELERATION_MODE_DATA
            )
            kDataUnhandled
         }
      }
   )
   (on_cancel
      {$this show_state dxState_SetSpeeds}
   )
)

#define DX_VENUE_OPTIONS_DATA
(  
   {do
      ($options
         {array 0})
      {push_back $options os_menu_backgrounds}
      {push_back $options os_venue}
      {unless {== $dx_venue BLACK_VENUE}
         {push_back $options {if_else $dx_venue_intro os_venue_intro_on os_venue_intro_off}}
         {push_back $options {if_else $dx_enable_mv_venues os_enablemv_on os_enablemv_off}}
         {push_back $options {if_else $dx_venue_swap os_venue_swap_on os_venue_swap_off}}
         {push_back $options {if_else $dx_character_swap os_char_swap_on os_char_swap_off}}
      }
      ;-----func----------state name---------message
      {dx_state_setup dxState_VenueOptions TRUE}
   }
)
(dxState_VenueOptions
   (view
      DX_VENUE_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_menu_backgrounds
            {$this show_state dxState_MenuBG})
         (os_venue
            {$this show_state dxState_SelectVenue})
         ((os_venue_intro_on os_venue_intro_off)
            {set $dx_venue_intro {! $dx_venue_intro}}
            {if_else $dx_venue_intro
               {set $dx_tracked_changed dx_venue_intro_on}
               {set $dx_tracked_changed dx_venue_intro_off}
            }
            {dx_state_pos_tracker}
            DX_VENUE_OPTIONS_DATA
            {set $previous_state dxState_VenueOptions}
         )
         ((os_enablemv_on os_enablemv_off)
            {set $dx_enable_mv_venues {! $dx_enable_mv_venues}}
            {if_else $dx_enable_mv_venues
               {set $dx_tracked_changed os_enablemv_on}
               {set $dx_tracked_changed os_enablemv_off}
            }
            {dx_state_pos_tracker}
            DX_VENUE_OPTIONS_DATA
            {set $previous_state dxState_VenueOptions}
         )
         ((os_venue_swap_on os_venue_swap_off)
            {set $dx_venue_swap {! $dx_venue_swap}}
            {if_else $dx_venue_swap
               {set $dx_tracked_changed os_venue_swap_on}
               {set $dx_tracked_changed os_venue_swap_off}
            }
            {dx_state_pos_tracker}
            DX_VENUE_OPTIONS_DATA
            {set $previous_state dxState_VenueOptions}
         )
         ((os_char_swap_on os_char_swap_off)
            {set $dx_character_swap {! $dx_character_swap}}
            {if_else $dx_character_swap
               {set $dx_tracked_changed os_char_swap_on}
               {set $dx_tracked_changed os_char_swap_off}
            }
            {dx_state_pos_tracker}
            DX_VENUE_OPTIONS_DATA
            {set $previous_state dxState_VenueOptions}
         )
      }
      {set $in_state FALSE}
      DX_VENUE_OPTIONS_DATA
      {set $previous_state dxState_VenueOptions}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_MENUBG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options {if_else $dx_black_menu os_nobg_off os_nobg_on}}
      {unless $dx_black_menu
         {push_back $options os_main_menu}
         {push_back $options os_song_select}
         {push_back $options os_load_song}
      }
      {dx_state_setup dxState_MenuBG TRUE}
   }
)
(dxState_MenuBG
   (view
      DX_MENUBG_DATA
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_nobg_on os_nobg_off)
            {set $dx_black_menu {! $dx_black_menu}}
            {unless {$this in_game} {ui goto_screen meta_loading_main_screen}}
            {if_else $dx_black_menu
               {do
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 1 {quote (TRUE ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 2 {quote (TRUE ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 3 {quote (TRUE ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 4 {quote (TRUE ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 5 {quote (TRUE ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 6 {quote (TRUE ())}}
               }
               {do
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 1 {quote ({'||' {meta_performer festival_reward} {!= {gamemode get game_screen} game_screen}} ())}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 2 {quote ({== {meta_performer get_venue_class} video} ("tv3_b"))}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 3 {quote ({== {meta_performer get_venue_class} festival} ("tv3_f"))}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 4 {quote ({== {meta_performer get_venue_class} arena} ("tv3_e"))}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 5 {quote ({== {meta_performer get_venue_class} big_club} ("tv3_b" "tv3_d"))}}
                  {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 6 {quote ({== {meta_performer get_venue_class} small_club} ("tv3_a" "tv3_b" "tv3_c"))}}
               }
            }
            {if_else $dx_black_menu
               {set $dx_tracked_changed os_nobg_off}
               {set $dx_tracked_changed os_nobg_on}
            }
            {dx_state_pos_tracker}
            DX_MENUBG_DATA
            {set $previous_state dxState_MenuBG}
         )
         (os_main_menu
            {$this show_state dxState_MainMenuBG}
         )
         (os_song_select
            {$this show_state dxState_SongSelectMenuBG}
         )
         (os_load_song
            {$this show_state dxState_SongLoadBG}
         )
      }
      {set $in_state FALSE}
      DX_MENUBG_DATA
      {set $previous_state dxState_MenuBG}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_VenueOptions}
   )
)
;sv2_a - record player
;sv3_a - street walk
;sv3_b - desert
;sv4_a - van
;sv4_b - bus
;sv4_c - jet
;sv4_d - subway
;sv4_e - limo
;sv5_a - practice background
;sv7_a - train tracks
;sv7_b - rooftops (NO)
;sv7_c - stoop
;sv8_a - splash screen
(dxState_SongSelectMenuBG
   (view
      {do
         ($options
            {array 0})
         {push_back $options default}
         {push_back $options shuffle_all}
         {push_back $options sv4_array}
         {push_back $options sv7_array}
         {push_back $options sv2_a}
         {push_back $options sv3_a}
         {push_back $options sv3_b}
         {push_back $options sv4_a}
         {push_back $options sv4_b}
         {push_back $options sv4_c}
         {push_back $options sv4_d}
         {push_back $options sv4_e}
         {push_back $options sv5_a}
         {push_back $options sv7_a}
         {push_back $options sv7_b}
         {push_back $options sv7_c}
         ;{push_back $options sv8_a} ;these look like shit and transition out causing desycs
         ;{push_back $options sv8_a_dx}
         {dx_state_setup dxState_SongSelectMenuBG FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (default
            {set $dx_forced_song_select_bg FALSE}
            {set_elem {find $syscfg vignettes backdrops sv4} 1
               {quote
                  {cond
                     ({campaign has_reached_campaign_level campaignlevel_jet} ("sv4_c" "sv4_e"))
                     ({campaign has_reached_campaign_level campaignlevel_bus} ("sv4_b"))
                     ({campaign has_reached_campaign_level campaignlevel_van} ("sv4_a"))
                     (TRUE ("sv4_d"))
                  }
               }
            }
         )
         (shuffle_all
            {set $dx_forced_song_select_bg ("sv2_a" "sv3_a" "sv3_b" "sv4_a" "sv4_b" "sv4_c" "sv4_d" "sv4_e" "sv5_a" "sv7_a" "sv7_b" "sv7_c")}
         )
         (sv4_array
            {set $dx_forced_song_select_bg ("sv4_a" "sv4_b" "sv4_c" "sv4_d" "sv4_e")}
         )
         (sv7_array
            {set $dx_forced_song_select_bg ("sv7_a" "sv7_b" "sv7_c" "sv3_a" "sv3_b")}
         )
         (sv2_a
            {set $dx_forced_song_select_bg ("sv2_a")}
         )
         (sv3_a
            {set $dx_forced_song_select_bg ("sv3_a")}
         )
         (sv3_b
            {set $dx_forced_song_select_bg ("sv3_b")}
         )
         (sv4_a
            {set $dx_forced_song_select_bg ("sv4_a")}
         )
         (sv4_b
            {set $dx_forced_song_select_bg ("sv4_b")}
         )
         (sv4_c
            {set $dx_forced_song_select_bg ("sv4_c")}
         )
         (sv4_d
            {set $dx_forced_song_select_bg ("sv4_d")}
         )
         (sv4_e
            {set $dx_forced_song_select_bg ("sv4_e")}
         )
         (sv5_a
            {set $dx_forced_song_select_bg ("sv5_a")}
         )
         (sv7_a
            {set $dx_forced_song_select_bg ("sv7_a")}
         )
         (sv7_b
            {set $dx_forced_song_select_bg ("sv7_b")}
         )
         (sv7_c
            {set $dx_forced_song_select_bg ("sv7_c")}
         )
         ;(sv8_a
         ;   {set $dx_forced_song_select_bg ("sv8_a")}
         ;)
         ;(sv8_a_dx
         ;   {set $dx_sv8_dx_vers TRUE}
         ;   {set $dx_forced_song_select_bg ("sv8_a")}
         ;)
      }
      {unless {== {$component selected_sym} sv8_a_dx}
         {set $dx_sv8_dx_vers FALSE}
      }
      {unless {== {$component selected_sym} default}
         {set_elem {find $syscfg vignettes backdrops sv4} 1 $dx_forced_song_select_bg}
      }
      {unless {$this in_game} {ui goto_screen meta_loading_main_screen}}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_MenuBG}
   )
)

(dxState_MainMenuBG
   (view
      {do
         ($options
            {array 0})
         {push_back $options default}
         {push_back $options shuffle_all}
         {push_back $options sv4_array}
         {push_back $options sv7_array}
         {push_back $options sv2_a}
         {push_back $options sv3_a}
         {push_back $options sv3_b}
         {push_back $options sv4_a}
         {push_back $options sv4_b}
         {push_back $options sv4_c}
         {push_back $options sv4_d}
         {push_back $options sv4_e}
         {push_back $options sv5_a}
         {push_back $options sv7_a}
         {push_back $options sv7_b}
         {push_back $options sv7_c}
         {push_back $options sv8_a}
         {push_back $options sv8_a_dx}
         {dx_state_setup dxState_MainMenuBG FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (default
            {set $dx_forced_main_menu_bg FALSE}
            {set_elem {find $syscfg vignettes backdrops sv3} 1
               {quote
                  {cond
                     ({campaign has_reached_campaign_level campaignlevel_advancedtitles}
                        (
                           "sv3_b"
                           "sv3_b"
                           "sv3_a"
                           "sv7_a"
                           "sv7_b"
                           "sv7_c"
                        )
                     )
                     ({campaign has_reached_campaign_level campaignlevel_jet}
                        (
                           "sv3_a"
                           "sv7_a"
                           "sv7_b"
                           "sv7_c"
                        )
                     )
                     ({campaign has_reached_campaign_level campaignlevel_bus}
                        (
                           "sv3_a"
                           "sv7_a"
                           "sv7_b"
                        )
                     )
                     ({campaign has_reached_campaign_level campaignlevel_van}
                        (
                           "sv3_a"
                           "sv7_a"
                        )
                     )
                     (TRUE
                        ("sv3_a")
                     )
                  }
               }
            }
         )
         (shuffle_all
            {set $dx_forced_main_menu_bg ("sv2_a" "sv3_a" "sv3_b" "sv4_a" "sv4_b" "sv4_c" "sv4_d" "sv4_e" "sv5_a" "sv7_a" "sv7_b" "sv7_c")}
         )
         (sv4_array
            {set $dx_forced_main_menu_bg ("sv4_a" "sv4_b" "sv4_c" "sv4_d" "sv4_e")}
         )
         (sv7_array
            {set $dx_forced_main_menu_bg ("sv7_a" "sv7_b" "sv7_c" "sv3_a" "sv3_b")}
         )
         (sv2_a
            {set $dx_forced_main_menu_bg ("sv2_a")}
         )
         (sv3_a
            {set $dx_forced_main_menu_bg ("sv3_a")}
         )
         (sv3_b
            {set $dx_forced_main_menu_bg ("sv3_b")}
         )
         (sv4_a
            {set $dx_forced_main_menu_bg ("sv4_a")}
         )
         (sv4_b
            {set $dx_forced_main_menu_bg ("sv4_b")}
         )
         (sv4_c
            {set $dx_forced_main_menu_bg ("sv4_c")}
         )
         (sv4_d
            {set $dx_forced_main_menu_bg ("sv4_d")}
         )
         (sv4_e
            {set $dx_forced_main_menu_bg ("sv4_e")}
         )
         (sv5_a
            {set $dx_forced_main_menu_bg ("sv5_a")}
         )
         (sv7_a
            {set $dx_forced_main_menu_bg ("sv7_a")}
         )
         (sv7_b
            {set $dx_forced_main_menu_bg ("sv7_b")}
         )
         (sv7_c
            {set $dx_forced_main_menu_bg ("sv7_c")}
         )
         (sv8_a
            {set $dx_sv8_dx_vers FALSE}
            {set $dx_forced_main_menu_bg ("sv8_a")}
         )
         (sv8_a_dx
            {set $dx_sv8_dx_vers TRUE}
            {set $dx_forced_main_menu_bg ("sv8_a")}
         )
      }
      {unless {== {$component selected_sym} sv8_a_dx}
         {set $dx_sv8_dx_vers FALSE}
      }
      {unless {== {$component selected_sym} default}
         {set_elem {find $syscfg vignettes backdrops sv3} 1 $dx_forced_main_menu_bg}
      }
      {unless {$this in_game} {ui goto_screen meta_loading_main_screen}}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_MenuBG}
   )
)

{set $dx_current_song_interstitial (TRUE ())}

;tv1_a - music to record
;tv3_a - to song, "Show tonight" hanging fliers
;tv3_b - to song, plug into amp
;tv3_c - to song, singer chokes on milk, cement blocks in front of kick drum
;tv3_d - to song, outside of big club with line and bouncer
;tv3_e - to song, roadies building arena stage
;tv3_f - to song, roadies building fest stage
;tv4_a - entering subway
;tv4_b - van, clock to leaving bar
;tv4_c - bus, autograph to board bus
;tv4_d - jet, low rider drive thru
;tv4_e - jet, backstage walk out to limo
;tv5_a - packing bags
;tv6_a - back alley keep out
;tv11_a - taxi cab

(dxState_SongLoadBG
   (view
      {do
         ($options
            {array 0})
         {push_back $options default}
         {push_back $options none}
         {push_back $options shuffle_all}
         {push_back $options song_transitions}
         {push_back $options career_transitions}
         {push_back $options other_transitions}
         {push_back $options tv1_a}
         {push_back $options tv3_a}
         {push_back $options tv3_b}
         {push_back $options tv3_c}
         {push_back $options tv3_d}
         {push_back $options tv3_e}
         {push_back $options tv3_f}
         {push_back $options tv4_a}
         {push_back $options tv4_b}
         {push_back $options tv4_c}
         {push_back $options tv4_d}
         {push_back $options tv4_e}
         {push_back $options tv5_a}
         {push_back $options tv6_a}
         {push_back $options tv11_a}
         {dx_state_setup dxState_SongLoadBG FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (default
            {set $dx_forced_song_load_bg FALSE}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 1 {quote ({'||' {meta_performer festival_reward} {!= {gamemode get game_screen} game_screen}} ())}}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 2 {quote ({== {meta_performer get_venue_class} video} ("tv3_b"))}}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 3 {quote ({== {meta_performer get_venue_class} festival} ("tv3_f"))}}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 4 {quote ({== {meta_performer get_venue_class} arena} ("tv3_e"))}}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 5 {quote ({== {meta_performer get_venue_class} big_club} ("tv3_b" "tv3_d"))}}
            {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 6 {quote ({== {meta_performer get_venue_class} small_club} ("tv3_a" "tv3_b" "tv3_c"))}}
            ;{set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 1 ({== {meta_performer get_venue_class} festival} ("tv4_c"))}
            ;{set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 2 ({campaign has_reached_campaign_level campaignlevel_jet} ("tv4_d" "tv4_e"))}
            ;{set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 3 ({campaign has_reached_campaign_level campaignlevel_bus} ("tv4_c"))}
            ;{set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 4 ({campaign has_reached_campaign_level campaignlevel_van} ("tv4_b"))}
            ;{set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 5 (TRUE ("tv4_a"))}
         )
         (shuffle_all
            {set $dx_forced_song_load_bg (TRUE ("tv1_a" "tv3_a" "tv3_b" "tv3_c" "tv3_d" "tv3_e" "tv3_f" "tv4_a" "tv4_b" "tv4_c" "tv4_d" "tv4_e" "tv5_a" "tv6_a" "tv11_a"))}
         )
         (song_transitions
            {set $dx_forced_song_load_bg (TRUE ("tv3_a" "tv3_b" "tv3_c" "tv3_d" "tv3_e" "tv3_f"))}
         )
         (career_transitions
            {set $dx_forced_song_load_bg (TRUE ("tv4_a" "tv4_b" "tv4_c" "tv4_d" "tv4_e"))}
         )
         (other_transitions
            {set $dx_forced_song_load_bg (TRUE ("tv1_a" "tv5_a" "tv6_a" "tv11_a"))}
         )
         (none
            {set $dx_no_song_transition TRUE}
            {set $dx_forced_song_load_bg (TRUE ())}
         )
         (tv1_a
            {set $dx_forced_song_load_bg (TRUE ("tv1_a"))}
         )
         (tv3_a
            {set $dx_forced_song_load_bg (TRUE ("tv3_a"))}
         )
         (tv3_b
            {set $dx_forced_song_load_bg (TRUE ("tv3_b"))}
         )
         (tv3_c
            {set $dx_forced_song_load_bg (TRUE ("tv3_c"))}
         )
         (tv3_d
            {set $dx_forced_song_load_bg (TRUE ("tv3_d"))}
         )
         (tv3_e
            {set $dx_forced_song_load_bg (TRUE ("tv3_e"))}
         )
         (tv3_f
            {set $dx_forced_song_load_bg (TRUE ("tv3_f"))}
         )
         (tv4_a
            {set $dx_forced_song_load_bg (TRUE ("tv4_a"))}
         )
         (tv4_b
            {set $dx_forced_song_load_bg (TRUE ("tv4_b"))}
         )
         (tv4_c
            {set $dx_forced_song_load_bg (TRUE ("tv4_c"))}
         )
         (tv4_d
            {set $dx_forced_song_load_bg (TRUE ("tv4_d"))}
         )
         (tv4_e
            {set $dx_forced_song_load_bg (TRUE ("tv4_e"))}
         )
         (tv5_a
            {set $dx_forced_song_load_bg (TRUE ("tv5_a"))}
         )
         (tv6_a
            {set $dx_forced_song_load_bg (TRUE ("tv6_a"))}
         )
         (tv11_a
            {set $dx_forced_song_load_bg (TRUE ("tv11_a"))}
         )
      }
      {unless {== {$component selected_sym} none}
         {set $dx_no_song_transition FALSE}
      }
      {unless {== {$component selected_sym} default}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 1 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 2 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 3 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 4 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 5 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials preloading_screen game_screen} 6 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 1 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 2 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 3 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 4 $dx_forced_song_load_bg}
         {set_elem {find $syscfg vignettes interstitials meta_loading_outro song_select_screen} 5 $dx_forced_song_load_bg}
      }
      {if {== {ui current_screen} song_select_screen} {ui goto_screen meta_loading_main_screen}}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_MenuBG}
   )
)

(dxState_SelectVenue
   (view
      {do
         ($options
            {array 0}
         )
         {push_back $options none}
         {push_back $options random}
         {push_back $options small_venues}
         {push_back $options big_venues}
         {push_back $options arena_venues}
         {push_back $options festival_venues}
         {push_back $options venues_video}
         ;these need to be listed individually for position tracker
         {push_back $options small_club_01}
         {push_back $options small_club_02}
         {push_back $options small_club_03}
         {push_back $options small_club_04}
         {push_back $options small_club_05}
         {push_back $options small_club_06}
         {push_back $options small_club_10}
         {push_back $options small_club_11}
         {push_back $options small_club_13}
         {push_back $options small_club_14}
         {push_back $options small_club_15}
         {push_back $options big_club_01}
         {push_back $options big_club_02}
         {push_back $options big_club_04}
         {push_back $options big_club_05}
         {push_back $options big_club_06}
         {push_back $options big_club_07}
         {push_back $options big_club_08}
         {push_back $options big_club_09}
         {push_back $options big_club_10}
         {push_back $options big_club_11}
         {push_back $options big_club_12}
         {push_back $options big_club_13}
         {push_back $options big_club_14}
         {push_back $options big_club_15}
         {push_back $options big_club_17}
         {push_back $options arena_01}
         {push_back $options arena_02}
         {push_back $options arena_03}
         {push_back $options arena_04}
         {push_back $options arena_06}
         {push_back $options arena_07}
         {push_back $options arena_10}
         {push_back $options arena_11}
         {push_back $options arena_12}
         {push_back $options festival_01}
         {push_back $options festival_02}
         {push_back $options video_01}
         {push_back $options video_02}
         {push_back $options video_03}
         {push_back $options video_04}
         {push_back $options video_05}
         {push_back $options video_06}
         {push_back $options video_07}
         ;-----func----------state name---------message
         {dx_state_setup dxState_SelectVenue FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {set $force TRUE}
      {set $dx_venue {$component selected_sym}}
      {switch
         {$component selected_sym}
         (random
            {set $force FALSE} {set $dx_venue VENUES})
         (small_venues
            {set $force TRUE} {set $dx_venue small_venues})
         (big_venues
            {set $force TRUE} {set $dx_venue big_venues})
         (arena_venues
            {set $force TRUE} {set $dx_venue arena_venues})
         (festival_venues
            {set $force TRUE} {set $dx_venue festival_venues})
         (venues_video
            {set $force TRUE} {set $dx_venue venues_video})
         (none
            {set $force TRUE} {set $dx_venue BLACK_VENUE})
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_VenueOptions}
   )
)

#define DX_GRAPHICS_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options {if_else $dx_60fps os_venuefps_60 os_venuefps_30}}
      {push_back $options {if_else $dx_force_lod os_force_high_lod_on os_force_high_lod_off}}
      {push_back $options {if_else $dx_postfx os_postfx_on os_postfx_off}}
      {if $dx_postfx
         {push_back $options {if_else $dx_motion_blur os_blur_on os_blur_off}}
         {push_back $options {if_else $dx_camera_shake os_camera_shake_on os_camera_shake_off}}
         {push_back $options {if_else $dx_camera_blur os_camera_blur_on os_camera_blur_off}}
         {push_back $options {if_else $dx_noise os_noise_on os_noise_off}}
      }
      {dx_state_setup dxState_Graphics TRUE}
   }
)
(dxState_Graphics
   (view
      DX_GRAPHICS_DATA
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_venuefps_60 os_venuefps_30)
            {set $dx_60fps {! $dx_60fps}}
            {if $dx_60fps
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_60fps
               {do
                  {set $dx_tracked_changed os_venuefps_60}
                  {set $emulatefps 60}
               }
               {do
                  {set $dx_tracked_changed os_venuefps_30}
                  {set $emulatefps 30}
               }
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {if_else {== $dx_detected_platform platform_rpcs3}
               {do
                  {$this show_state kState_GraphicsWarn}
               }
               {do
                  {if_else $dx_60fps
                     {$this show_state kState_60FPSWarn}
                     {$this show_state kState_GraphicsWarn}
                  }
               }
            }
         )
         ((os_force_high_lod_on os_force_high_lod_off)
            {set $dx_force_lod {! $dx_force_lod}}
            {if $dx_force_lod
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_force_lod
               {set $dx_tracked_changed os_force_high_lod_on}
               {set $dx_tracked_changed os_force_high_lod_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state kState_Graphics}
            {if_else {== $dx_detected_platform platform_rpcs3}
               {do
                  {$this show_state kState_GraphicsWarn}
               }
               {do
                  {if_else $dx_force_lod
                     {$this show_state kState_HighLODWarn}
                     {$this show_state kState_GraphicsWarn}
                  }
               }
            }
         )
         ((os_postfx_on os_postfx_off)
            {dx_set_postfx {! $dx_postfx}}
            {dx_postfx_setter}
            {if_else $dx_postfx
               {set $dx_tracked_changed os_postfx_on}
               {set $dx_tracked_changed os_postfx_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {$this show_state kState_GraphicsWarn}
         )
         ((os_camera_shake_on os_camera_shake_off)
            {set $dx_camera_shake {! $dx_camera_shake}}
            {if $dx_camera_shake
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_camera_shake
               {set $dx_tracked_changed os_camera_shake_on}
               {set $dx_tracked_changed os_camera_shake_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {$this show_state kState_GraphicsWarn}
         )
         ((os_camera_blur_on os_camera_blur_off)
            {set $dx_camera_blur {! $dx_camera_blur}}
            {if $dx_camera_blur
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_camera_blur
               {set $dx_tracked_changed os_camera_blur_on}
               {set $dx_tracked_changed os_camera_blur_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {$this show_state kState_GraphicsWarn}
         )
         ((os_blur_off os_blur_on)
            {set $dx_motion_blur {! $dx_motion_blur}}
            {if $dx_motion_blur
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_motion_blur
               {set $dx_tracked_changed os_blur_on}
               {set $dx_tracked_changed os_blur_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {$this show_state kState_GraphicsWarn}
         )
         ((os_noise_off os_noise_on)
            {set $dx_noise {! $dx_noise}}
            {if $dx_noise
               {set $post_proc_needs_reset TRUE}
            }
            {dx_postfx_setter}
            {if_else $dx_noise
               {set $dx_tracked_changed os_noise_on}
               {set $dx_tracked_changed os_noise_off}
            }
            {dx_state_pos_tracker}
            DX_GRAPHICS_DATA
            {set $previous_state dxState_Graphics}
            {$this show_state kState_GraphicsWarn}
         )
      }
      {set $in_state FALSE}
      DX_GRAPHICS_DATA
      {set $previous_state dxState_Graphics}
   )
   (exit 
      DX_OS_CLOSE_MSG
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_AUDIO_SFX_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_fcaudio}
      {push_back $options {if_else $dx_song_select_noise os_audio_ambience_on os_audio_ambience_off}}
      {push_back $options {if_else $dx_whammy_fx os_whammy_fx_on os_whammy_fx_off}}
      {push_back $options {if_else $dx_instrument_fx os_audio_instsfx_on os_audio_instsfx_off}}
      {push_back $options {if_else $dx_jurgen_sound os_jurgen_sound_on os_jurgen_sound_off}}
      {push_back $options os_cyclefx}
      {push_back $options os_toggle_synth}
      ;{push_back $options {if_else $dx_nice_sound os_nice_sound_on os_nice_sound_off}}
      ;-----func----------state name------message
      {dx_state_setup dxState_AudioSFX TRUE}
   }
)
(dxState_AudioSFX
   (view
      DX_AUDIO_SFX_DATA
      {overshell_view_chooser}
   )
   (enter
      DX_OS_OPEN_MSG
      DX_MENU_DESC
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_jurgen_sound_on os_jurgen_sound_off)
            {set $dx_jurgen_sound {! $dx_jurgen_sound}}
            {if_else $dx_jurgen_sound
               {set $dx_tracked_changed os_jurgen_sound_on}
               {set $dx_tracked_changed os_jurgen_sound_off}
            }
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         ((os_audio_ambience_on os_audio_ambience_off)
            {set $dx_song_select_noise {! $dx_song_select_noise}}
            {if_else $dx_song_select_noise
               {set $dx_tracked_changed os_audio_ambience_on}
               {set $dx_tracked_changed os_audio_ambience_off}
            }
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         ((os_whammy_fx_on os_whammy_fx_off)
            {set $dx_whammy_fx {! $dx_whammy_fx}}
            {if_else $dx_whammy_fx
               {set $dx_tracked_changed os_whammy_fx_on}
               {set $dx_tracked_changed os_whammy_fx_off}
            }
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         ((os_audio_instsfx_on os_audio_instsfx_off)
            {set $dx_instrument_fx {! $dx_instrument_fx}}
            {if_else $dx_instrument_fx
               {set $dx_tracked_changed os_audio_instsfx_on}
               {set $dx_tracked_changed os_audio_instsfx_off}
            }
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         ((os_nice_sound_on os_nice_sound_off)
            {set $dx_nice_sound {! $dx_nice_sound}}
            {if_else $dx_nice_sound
               {set $dx_tracked_changed os_nice_sound_on}
               {set $dx_tracked_changed os_nice_sound_off}
            }
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         (os_cyclefx
            {cycle_guitar_fx}
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         (os_toggle_synth
            {toggle_instrument_synth}
            {change_instrument_synth_volume 127}
            {dx_state_pos_tracker}
            DX_AUDIO_SFX_DATA
            {set $previous_state dxState_AudioSFX}
         )
         (os_fcaudio
            {$this show_state dxState_FullComboSFX}
         )
      }
      {set $in_state FALSE}
      DX_AUDIO_SFX_DATA
      {set $previous_state dxState_AudioSFX}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

(dxState_FullComboSFX
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_none}
         {foreach $entry {file_list "sfx/streams/fc/*.mogg"} {if {!= $entry ""} {push_back $options $entry}}}
         {dx_state_setup dxState_FullComboSFX FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {unless {== {$component selected_sym} os_none}
         {set $dx_fullcombo_sound {$component selected_sym}}
         {if_else {exists fc_preview_clip}
            {do
               {delete fc_preview_clip}
               {new MoggClip fc_preview_clip}
            }
            {new MoggClip fc_preview_clip}
         }
         {fc_preview_clip set file {sprint "sfx/streams/fc/" $dx_fullcombo_sound ".mogg"}}
         {fc_preview_clip set loop FALSE}
         {fc_preview_clip set volume -8}
         {fc_preview_clip play}
      }
      {if {== {$component selected_sym} os_none}
         {set $dx_fullcombo_sound dx_none}
      }
   )
   (on_cancel
      {$this show_state dxState_AudioSFX}
   )
)

(dxState_Advanced
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_ingame_hud}
         {push_back $options os_menu_theme}
         {push_back $options os_quick_chat}
         {push_back $options os_functional_options}
         ;only show the controller menu when not in-game and only on applicable instruments or when faking is active
         {if
            {&&
               {! {session is_in_game}} ;prevents soft-lock, swapping instrument type in-game would prevent player from rejoining
               {||
                  {||
                     {== {{$this get_user} get_controller_type} kControllerGuitar}
                     {== {{$this get_user} get_controller_type} kControllerKeys}
                     {== {{$this get_user} get_controller_type} kControllerVocals}
                  }
                  {||
                     {! {== $dx_joypad_type_guitar kControllerGuitar}}
                     {! {== $dx_joypad_type_keys kControllerKeys}}
                     {! {== $dx_joypad_type_vocals kControllerVocals}}
                  }
               }
            }
            {push_back $options os_controller}
         }
         {if $dx_debug
            {push_back $options os_debug}
         }
         ;-----func----------state name---------message
         {dx_state_setup dxState_Advanced TRUE}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_ingame_hud
            {$this show_state dxState_InGameHUD})
         (os_menu_theme
            {$this show_state dxState_MenuTheme})
         (os_quick_chat
            {$this show_state dxState_ChatSettings})
         (os_functional_options
            {$this show_state dxState_FunctionalOptions})
         (os_controller
            {$this show_state dxState_ControllerMenu})
         (os_debug
            {if_else $dx_debug_first
               {$this show_state kState_DebugWarn}
               {$this show_state dxState_Debug}
            }
         )
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_ANGLE_DATA
(
   os_noang
   os_angmult
   {if_else $dx_allow_lower_angle
      os_allow_lower_ang_on
      os_allow_lower_ang_off
   }
)
(dxState_AngleMenu
   (view options_extras)
   (enter
      {set $dx_slider TRUE}
      {set $dx_slider_id dx_trackangle}
      {instruments.sld set_num_steps 16} ;number of steps for track angle slider
      {instruments.sld set_current {int {/ {- $dx_multiangle 1} {/ 3 15}}}}
      {options_extras.lst set_data (DX_ANGLE_DATA)}
      {options_extras.lst set scroll_time 0}
      {options_extras.lst set circular 0}
      {options_extras set_selected 0}
   )
   (update_view
      {handle
         ($this
            update_slider
            instruments.sld
            ""
         )
      }
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_noang
            {set $dx_use_multiangle FALSE}
            {set $dx_multiangle 1}
            {instruments.sld set_current {int {/ {- $dx_multiangle 1} {/ 3 15}}}}
         )
         (os_angmult
            {set $dx_use_multiangle TRUE}
            {instruments.sld store}
            {instruments.sld set_showing TRUE}
            {$this set_focus instruments.sld}
         )
         ((os_allow_lower_ang_off os_allow_lower_ang_on)
            {set $dx_allow_lower_angle {! $dx_allow_lower_angle}}
            {options_extras.lst set_data (DX_ANGLE_DATA)}
         )
      }
   )
   (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld")
            {$this focus_name}
         }
         {switch $action
            ((kAction_Confirm kAction_Cancel)
               {{$this find {$this focus_name}} confirm}
               {{$this find {$this focus_name}} set_showing FALSE}
               {do {$this show_state kState_TrackAngleSliderMsg} {$this set_focus confirm_action.lst}}
            )
            kDataUnhandled
         }
         kDataUnhandled
      }
   )
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
   (exit
      {set $dx_slider FALSE}
   )
   (on_cancel
      {dx_track_angle_var_reset}
      {$this show_state dxState_TextureMenu}
   )
)

(kState_TrackAngleSliderMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message
            {switch $dx_multiangle 
               (1 {sprintf {localize os_angleset1} {int {+ {* -16.66 $dx_multiangle} 116.66}}})
               (2 {sprintf {localize os_angleset2} {int {+ {* -16.66 $dx_multiangle} 116.66}}})
               (3 {sprintf {localize os_angleset3} {int {+ {* -16.66 $dx_multiangle} 116.66}}})
               (4 {sprintf {localize os_angleset4} {int {+ {* -16.66 $dx_multiangle} 116.66}}})
               {sprintf {localize os_angleset} {int {+ {* -16.66 $dx_multiangle} 116.66}}}
            }
         )
      }
   )
   (SELECT_MSG
      {$this show_state dxState_AngleMenu}
   )
)

(dxState_MenuTheme
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_rb3os}
         {push_back $options mod_rb4os}         
         {push_back $options mod_rivalsos}
         {push_back $options mod_ps3os}
         {push_back $options mod_xboxos}
         {push_back $options mod_wiios}
         {dx_state_setup dxState_MenuTheme FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_rb3os
            {set $dx_overshell_theme none}
            OVERSHELL_RB3OS)
         (mod_rb4os
            {set $dx_overshell_theme rb4}
            OVERSHELL_RB4OS)
         (mod_rivalsos
            {set $dx_overshell_theme rivals}
            OVERSHELL_RIVALSOS)
         (mod_xboxos
            {set $dx_overshell_platform xbox}
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter})
         (mod_ps3os
            {set $dx_overshell_platform ps3}
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter})
         (mod_wiios
            {set $dx_overshell_platform wii}
            {dx_state_pos_tracker}
            {overshell exit}
            {overshell enter}
         )
      }
      {overshell update_all}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

(dxState_ChatSettings
   (view
      {do
         ($options
            {array 0})
         {push_back $options {sprintf "1: %s" $dx_chat_preset_0}}
         {push_back $options {sprintf "2: %s" $dx_chat_preset_1}}
         {push_back $options {sprintf "3: %s" $dx_chat_preset_2}}
         {push_back $options {sprintf "4: %s" $dx_chat_preset_3}}
         {push_back $options {sprintf "5: %s" $dx_chat_preset_4}}
         {push_back $options {sprintf "6: %s" $dx_chat_preset_5}}
         {push_back $options {sprintf "7: %s" $dx_chat_preset_6}}
         {push_back $options {sprintf "8: %s" $dx_chat_preset_7}}
         {dx_state_setup dxState_ChatSettings FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch {$current_list selected_data}
         (0 {set $dx_selected_chat_index 0})
         (1 {set $dx_selected_chat_index 1})
         (2 {set $dx_selected_chat_index 2})
         (3 {set $dx_selected_chat_index 3})
         (4 {set $dx_selected_chat_index 4})
         (5 {set $dx_selected_chat_index 5})
         (6 {set $dx_selected_chat_index 6})
         (7 {set $dx_selected_chat_index 7})
      }
      {$this show_state dxState_SelectChatPreset}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

(dxState_SelectChatPreset
   (view
      {do
         ($options
            {array 0})
         {set $dx_quick_chat_phrases (DX_QUICK_CHAT_PHRASES)}
         {foreach $entry $dx_quick_chat_phrases {push_back $options $entry}}
         {dx_state_setup dxState_SelectChatPreset FALSE}
      }
      {overshell_view_chooser}
   )
   (enter
      {dx_overshell_msg os_selectchatpreset_desc}
   )
   (SELECT_MSG
      {switch $dx_selected_chat_index
         (0 {set $dx_chat_preset_0 {sprintf {$component selected_sym}}})
         (1 {set $dx_chat_preset_1 {sprintf {$component selected_sym}}})
         (2 {set $dx_chat_preset_2 {sprintf {$component selected_sym}}})
         (3 {set $dx_chat_preset_3 {sprintf {$component selected_sym}}})
         (4 {set $dx_chat_preset_4 {sprintf {$component selected_sym}}})
         (5 {set $dx_chat_preset_5 {sprintf {$component selected_sym}}})
         (6 {set $dx_chat_preset_6 {sprintf {$component selected_sym}}})
         (7 {set $dx_chat_preset_7 {sprintf {$component selected_sym}}})
      }
      {$this show_state dxState_ChatSettings}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_ChatSettings}
   )
)

#define DX_FUNCTIONAL_OPTIONS_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options {if_else $dx_prompt_save os_prompt_save_on os_prompt_save_off}}
      {switch $dx_mic_deploy_sens 
         (0.9 {push_back $options os_dx_mic_od_1})
         (0.7 {push_back $options os_dx_mic_od_2})
         (0.5 {push_back $options os_dx_mic_od_3})
         (0.3 {push_back $options os_dx_mic_od_4})
         (0.1 {push_back $options os_dx_mic_od_5})
      }
      {push_back $options {if_else $dx_additional_parts os_additional_parts_on os_additional_parts_off}}
      {push_back $options {if_else $dx_song_delay os_songdelay_on os_songdelay_off}}
      {push_back $options {if_else $dx_intro_movie os_intro_on os_intro_off}}
      {push_back $options {if_else $dx_splash_screen os_splash_on os_splash_off}}
      {push_back $options {if_else $dx_confirm_song_count os_confirm_songcount_on os_confirm_songcount_off}}
      {if {== $dx_connected_server ashcentral}
         {push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;this one is backwards to account for vanilla
      }
      #ifdef RB3E
      {push_back $options {if_else $dx_ash_welcome_msg os_ash_welcome_msg_off os_ash_welcome_msg_on}} ;put it here too because ashcentral doesnt send this var to xbox
      {switch $dx_connected_server
         (none {push_back $options os_server_online})
         (live {push_back $options os_server_live})
         (liveless {push_back $options os_server_liveless})
      }
      #endif
      ;-----func----------state name------message
      {dx_state_setup dxState_FunctionalOptions TRUE}
   }
)
(dxState_FunctionalOptions
   (view
      DX_FUNCTIONAL_OPTIONS_DATA
      {overshell_view_chooser}
   )
   (enter
      DX_OS_OPEN_MSG
      DX_MENU_DESC
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         ((os_prompt_save_on os_prompt_save_off)
            {set $dx_prompt_save {! $dx_prompt_save}}
            {if_else $dx_prompt_save
               {set $dx_tracked_changed os_prompt_save_on}
               {set $dx_tracked_changed os_prompt_save_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_dx_mic_od_1 os_dx_mic_od_2 os_dx_mic_od_3 os_dx_mic_od_4 os_dx_mic_od_5)
            {set $dx_mic_deploy_sens
               {switch $dx_mic_deploy_sens
                  (0.9 0.7)
                  (0.7 0.5)
                  (0.5 0.3)
                  (0.3 0.1)
                  (0.1 0.9)
               }
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_additional_parts_on os_additional_parts_off)
            {set $dx_additional_parts {! $dx_additional_parts}}
            {if_else $dx_additional_parts
               {set $dx_tracked_changed os_additional_parts_on}
               {set $dx_tracked_changed os_additional_parts_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_songdelay_on os_songdelay_off)
            {set $dx_song_delay {! $dx_song_delay}}
            {if_else $dx_song_delay
               {set $dx_tracked_changed os_songdelay_on}
               {set $dx_tracked_changed os_songdelay_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_intro_on os_intro_off)
            {set $dx_intro_movie {! $dx_intro_movie}}
            {if_else $dx_intro_movie
               {set $dx_tracked_changed os_intro_on}
               {set $dx_tracked_changed os_intro_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_splash_on os_splash_off)
            {set $dx_splash_screen {! $dx_splash_screen}}
            {if_else $dx_splash_screen
               {set $dx_tracked_changed os_splash_on}
               {set $dx_tracked_changed os_splash_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_online
            {set $dx_connected_server live}
            {set $dx_tracked_changed os_server_live}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_live
            {set $dx_connected_server liveless}
            {set $dx_tracked_changed os_server_liveless}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         (os_server_liveless
            {set $dx_connected_server none}
            {set $dx_tracked_changed os_server_online}
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_confirm_songcount_on os_confirm_songcount_off)
            {set $dx_confirm_song_count {! $dx_confirm_song_count}}
            {if_else $dx_confirm_song_count
               {set $dx_tracked_changed os_confirm_songcount_on}
               {set $dx_tracked_changed os_confirm_songcount_off}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
         ((os_ash_welcome_msg_on os_ash_welcome_msg_off)
            {set $dx_ash_welcome_msg {! $dx_ash_welcome_msg}}
            {if_else $dx_ash_welcome_msg
               {set $dx_tracked_changed os_ash_welcome_msg_off}
               {set $dx_tracked_changed os_ash_welcome_msg_on}
            }
            {dx_state_pos_tracker}
            DX_FUNCTIONAL_OPTIONS_DATA
            {set $previous_state dxState_FunctionalOptions}
         )
      }
      {set $in_state FALSE}
      DX_FUNCTIONAL_OPTIONS_DATA
      {set $previous_state dxState_FunctionalOptions}
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)

#define DX_DEBUG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_debug_mode}
      {push_back $options os_logging}
      #ifdef HX_PS3
      {if $dx_write_hi_mem
         {set $dx_write_hi_mem FALSE}
         {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
            {array
               (
                  (dx_high_memory 190000000)
                  (dx_song_count 16000)
               )
            }
         }
      }
      {if_else {file_exists "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}
         {if_else {> {size {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}} 0}
            {if_else {== {elem {find {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"} dx_high_memory} 1} 190000000}
               {push_back $options os_dx_himem_on}
               {push_back $options os_dx_himem_off}
            }
            {push_back $options os_dx_himem_off}
         }
         {push_back $options os_dx_himem_off}
      }
      #endif
      {push_back $options do_script}
      {push_back $options os_uptime}
      {push_back $options generate_updates_dta}
      {push_back $options os_dumproot}
      {push_back $options os_dumproot2}
      
      {push_back $options print_hmx}
      {push_back $options print_objects}
      {push_back $options print_platform}
      {push_back $options {if_else $dx_time_remain_dbg os_time_remain_dbg_on os_time_remain_dbg_off}}
      
      {dx_state_setup dxState_Debug FALSE}
   }
)
#define DX_OBJECTS_FILE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/objects/" $focus_panel "_objects.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/objects/" $focus_panel "_objects.dta"} #endif
)
#define DX_SONGS_UPDATES_FILE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/songs_updates.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/songs_updates.dta"} #endif
)
#define DX_ACE_PATH
(
   #ifdef HX_XBOX {sprint "GAME:/ace.dta"} #endif
   #ifdef HX_PS3 {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/ace.dta"} #endif
)
(dxState_Debug
   (view
      DX_DEBUG_DATA
      {overshell_view_chooser}
   )
   ;(virtual_keyboard_result_msg
   ;   ($ok $text)
   ;   {if $ok
   ;      {resize $evaltextarray 0}
   ;      {set $dx_text {symbol $text}}
   ;      {push_back $evaltextarray $dx_text}
   ;      {foreach $entry $evaltextarray
   ;         {search_replace $entry "'" "" $entry}
   ;      }
   ;      {dx_log_writer info {array $evaltextarray}}
   ;      {write_file "GAME:/file.dta" {array $evaltextarray}}
   ;      {run "GAME:/file.dta"}
   ;   }
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_debug_mode
            {set $dx_debug FALSE}
            {$this show_state dxState_Advanced}
         )
         (os_uptime
            {dx_uptime_onscreen}
         )
         (print_hmx
            {print_hmx_panel}
         )
         (os_dumproot
            #ifdef HX_PS3
               {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/rootarray.dta" $syscfg}
            #endif
            #ifdef HX_XBOX
               {write_file "GAME:/rootarray.dta" $syscfg}
            #endif
            {dx_passive_messenger rootarray_dumped}
         )
         (os_dumproot2
            {foreach $array $syscfg
               #ifdef HX_PS3
                  {write_file {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
               #ifdef HX_XBOX
                  {write_file {sprint "GAME:/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
            }
            {dx_passive_messenger rootarray_dumped2}
         )
         ((os_time_remain_dbg_on os_time_remain_dbg_off)
            {set $dx_time_remain_dbg {! $dx_time_remain_dbg}}
            {if_else $dx_time_remain_dbg
               {set $dx_tracked_changed os_time_remain_dbg_on}
               {set $dx_tracked_changed os_time_remain_dbg_off}
            }
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (generate_updates_dta
            {set $tempwrite {find_exists $syscfg missing_song_data}}
            {foreach $entry {read_file "dx/song_updates/songs_yarg.dta"}
               {push_back $tempwrite $entry}
            }
            {write_file DX_SONGS_UPDATES_FILE_PATH $tempwrite}
            {set $tempwrite FALSE}
            {dx_passive_messenger songs_updates_generated}
         )
         (print_platform
            {dx_passive_messenger_symbol {sprintf "%s" {localize $dx_detected_platform}}}
         )
         (do_script
            ;{virtual_keyboard
            ;   show_keyboard
            ;   $user
            ;   10000
            ;   {localize load_track_theme}
            ;   {localize load_track_theme_desc}
            ;   $dx_track_theme_name
            ;   $this
            ;}
            {run DX_ACE_PATH}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (print_objects
            {dx_print_objects}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
         (os_logging
            {$this show_state dxState_LogSettings}
         )
         (os_dx_himem_off
            {$this show_state dxState_HimemWarn}
         )
         (os_dx_himem_on
            {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
               {array
                  (
                     (dx_high_memory 131000000)
                     (dx_song_count 8000)
                  )
               }
            }
            {set $dx_tracked_changed os_dx_himem_off}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_Debug}
         )
      }
      {set $in_state FALSE}
      DX_DEBUG_DATA
      {set $previous_state dxState_Debug}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Advanced}
   )
)
#define DX_LOG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_logging_disable_all}
      {push_back $options {if_else $dx_logging_essential os_logging_essential_on os_logging_essential_off}}
      {push_back $options {if_else $dx_logging_default os_logging_default_on os_logging_default_off}}
      {push_back $options {if_else $dx_logging_info os_logging_info_on os_logging_info_off}}
      {push_back $options {if_else $dx_logging_insane os_logging_insane_on os_logging_insane_off}}
      {push_back $options {if_else $dx_logging_beatmatch os_logging_beatmatch_on os_logging_beatmatch_off}}
      {push_back $options {if_else $dx_logging_countdown os_logging_countdown_on os_logging_countdown_off}}
      {dx_state_setup dxState_LogSettings FALSE}
   }
)

(dxState_LogSettings
   (view
      DX_LOG_DATA
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_logging_disable_all
            {set $dx_logging_essential FALSE}
            {set $dx_logging_default FALSE}
            {set $dx_logging_info FALSE}
            {set $dx_logging_insane FALSE}
            {set $dx_logging_beatmatch FALSE}
            {set $dx_logging_countdown FALSE}
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_essential_on os_logging_essential_off)
            {set $dx_logging_essential {! $dx_logging_essential}}
            {if_else $dx_logging_essential
               {set $dx_tracked_changed os_logging_essential_on}
               {set $dx_tracked_changed os_logging_essential_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_default_on os_logging_default_off)
            {set $dx_logging_default {! $dx_logging_default}}
            {if_else $dx_logging_default
               {set $dx_tracked_changed os_logging_default_on}
               {set $dx_tracked_changed os_logging_default_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_info_on os_logging_info_off)
            {set $dx_logging_info {! $dx_logging_info}}
            {if_else $dx_logging_info
               {set $dx_tracked_changed os_logging_info_on}
               {set $dx_tracked_changed os_logging_info_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_insane_on os_logging_insane_off)
            {set $dx_logging_insane {! $dx_logging_insane}}
            {if_else $dx_logging_insane
               {set $dx_tracked_changed os_logging_insane_on}
               {set $dx_tracked_changed os_logging_insane_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_beatmatch_on os_logging_beatmatch_off)
            {set $dx_logging_beatmatch {! $dx_logging_beatmatch}}
            {if_else $dx_logging_beatmatch
               {set $dx_tracked_changed os_logging_beatmatch_on}
               {set $dx_tracked_changed os_logging_beatmatch_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
         ((os_logging_countdown_on os_logging_countdown_off)
            {set $dx_logging_countdown {! $dx_logging_countdown}}
            {if_else $dx_logging_countdown
               {set $dx_tracked_changed os_logging_countdown_on}
               {set $dx_tracked_changed os_logging_countdown_off}
            }
            {dx_state_pos_tracker}
            DX_LOG_DATA
            {set $previous_state dxState_LogSettings}
         )
      }
      {set $in_state FALSE}
      DX_LOG_DATA
      {set $previous_state dxState_LogSettings}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_Debug}
   )
)