(dxState_DeluxeSettings
   (view
      {do
         ($options
            {array 0})
         {push_back $options os_spds}
         {push_back $options os_venuesel}
         {push_back $options os_thm}
         {push_back $options os_cam}
         {push_back $options os_audiomenu}
         #ifdef HX_XBOX
         #ifdef RB3E
         #ifndef RB3E_EMULATOR
         {push_back $options os_reboot}
         #endif
         #endif
         #endif
         ;only show the controller menu when not in-game and only on applicable instruments or when faking is active
         {if
            {&&
               {! {session is_in_game}} ;prevents soft-lock, swapping instrument type in-game would prevent player from rejoining
               {||
                  {||
                     {== {{$this get_user} get_controller_type} kControllerGuitar}
                     {== {{$this get_user} get_controller_type} kControllerKeys}
                     {== {{$this get_user} get_controller_type} kControllerVocals}
                  }
                  {||
                     {! {== $dx_joypad_type_guitar kControllerGuitar}}
                     {! {== $dx_joypad_type_keys kControllerKeys}}
                     {! {== $dx_joypad_type_vocals kControllerVocals}}
                  }
               }
               {push_back $options os_ctrlmenu}
            }
         }
         {if $dx_debug
         	{push_back $options os_debug}
      	}
         ;-----func----------state name---------message
         {dx_state_setup dxState_DeluxeSettings os_welcome_msg}
      }
      {overshell_view_chooser}
   )
   (SCROLL_MSG
      DX_MENU_SCROLL_DESC ;updates description with currently selected modifier
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_spds
            {$this show_state dxState_SpeedMenu})
         (os_thm
            {$this show_state dxState_AppearanceMenu})
         (os_venuesel
            {$this show_state dxState_VenueSelector})
         (os_cam
            {$this show_state dxState_CameraMenu})
         (os_audiomenu
            {$this show_state dxState_AudioSFX})
         (os_ctrlmenu
            {$this show_state dxState_ControllerMenu})
         (os_reboot
            {$this show_state kState_RebootWarn})
         (os_debug
         	{if_else $dx_debug_first
         		{$this show_state kState_DebugWarn}
            	{$this show_state dxState_DebugSettings}
            }
         )
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
	(on_cancel
	   {do
         ($options {array 0})
         {push_back $options overshell_invite}
         #ifdef HX_XBOX {push_back $options overshell_invite_xbox_party} #endif
         #ifdef HX_PS3 {push_back $options overshell_check_invites} #endif
         {push_back $options overshell_kick}
         {push_back $options #ifdef HX_XBOX overshell_gamercard #else overshell_mute #endif}
         {push_back $options overshell_disconnect}
         {online_options.lst set_data $options}
      }
      {if_else {modifier_mgr is_modifier_active mod_skipsavemsg}
         {if_else $dx_settings_error ;check if the user has relative writes enabled
            {$this show_state dxState_SaveWarnError} ;deny saving if they don't
            {do DX_SETTINGS_DTA_WRITER {$this show_game_options}} ;if we're skipping
         }
         {$this show_state dxState_SaveWarn} ;if we're not skipping (default)
      }
   )
)
(dxState_VenueSelector
   (view
      {do
         ($options
            {array 0}
         )
         {push_back $options none}
         {push_back $options random}
         {push_back $options small_venues}
         {push_back $options big_venues}
         {push_back $options arena_venues}
         {push_back $options festival_venues}
         {push_back $options venues_video}
         ;these need to be listed individually for position tracker
         {push_back $options small_club_01}
         {push_back $options small_club_02}
         {push_back $options small_club_03}
         {push_back $options small_club_04}
         {push_back $options small_club_05}
         {push_back $options small_club_06}
         {push_back $options small_club_10}
         {push_back $options small_club_11}
         {push_back $options small_club_13}
         {push_back $options small_club_14}
         {push_back $options small_club_15}
         {push_back $options big_club_01}
         {push_back $options big_club_02}
         {push_back $options big_club_04}
         {push_back $options big_club_05}
         {push_back $options big_club_06}
         {push_back $options big_club_07}
         {push_back $options big_club_08}
         {push_back $options big_club_09}
         {push_back $options big_club_10}
         {push_back $options big_club_11}
         {push_back $options big_club_12}
         {push_back $options big_club_13}
         {push_back $options big_club_14}
         {push_back $options big_club_15}
         {push_back $options big_club_17}
         {push_back $options arena_01}
         {push_back $options arena_02}
         {push_back $options arena_03}
         {push_back $options arena_04}
         {push_back $options arena_06}
         {push_back $options arena_07}
         {push_back $options arena_10}
         {push_back $options arena_11}
         {push_back $options arena_12}
         {push_back $options festival_01}
         {push_back $options festival_02}
         {push_back $options video_01}
         {push_back $options video_02}
         {push_back $options video_03}
         {push_back $options video_04}
         {push_back $options video_05}
         {push_back $options video_06}
         {push_back $options video_07}
         ;-----func----------state name---------message
         {dx_state_setup dxState_VenueSelector FALSE}
      }
      {overshell_view_chooser}
   )
   (SELECT_MSG
      {set $force TRUE}
      {set $dx_venue {$component selected_sym}}
      {switch
         {$component selected_sym}
         (random
            {set $force FALSE} {set $dx_venue VENUES})
         (small_venues
            {set $force TRUE} {set $dx_venue small_venues})
         (big_venues
            {set $force TRUE} {set $dx_venue big_venues})
         (arena_venues
            {set $force TRUE} {set $dx_venue arena_venues})
         (festival_venues
            {set $force TRUE} {set $dx_venue festival_venues})
         (venues_video
            {set $force TRUE} {set $dx_venue venues_video})
         (none
            {set $force TRUE} {set $dx_venue BLACK_VENUE})
      }
   )
   (exit 
      {dx_state_pos_tracker}
      DX_OS_CLOSE_MSG
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)

#define DX_BOT_SETTINGS_DATA
(
   os_dx_bot_skill
   {switch $dx_bot_overdrive 
      (dx_on os_dx_bot_overdrive_on)
      (dx_off os_dx_bot_overdrive_off)
      (dx_drain os_dx_bot_overdrive_drain)
   }
   {if_else $dx_auto_endgame os_dx_auto_endgame_on os_dx_auto_endgame_off}
   {if_else $dx_auto_endurance os_auto_endurance_on os_auto_endurance_off}
   {if_else $dx_bot_1 os_dx_bot_1_on os_dx_bot_1_off}
   {if_else $dx_bot_2 os_dx_bot_2_on os_dx_bot_2_off}
   {if_else $dx_bot_3 os_dx_bot_3_on os_dx_bot_3_off}
   {if_else $dx_bot_4 os_dx_bot_4_on os_dx_bot_4_off}
   {if_else $dx_bot_5 os_dx_bot_5_on os_dx_bot_5_off}
)

; XXX: refactoring this to the new system would break the slider
(dxState_BotSettings
   (view options_audio)
   (enter
      {set $dx_slider TRUE}
      {set $dx_slider_id dx_bot_skill}
      {instruments.sld set_num_steps 12}
      {instruments.sld set_current $dx_bot_skill}
      {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
      {options_audio.lst set scroll_time 0}
      {options_audio.lst set circular 0}
      {options_audio set_selected 0}
   )
   (update_view
      {handle ($this update_slider instruments.sld "")}
      {handle ($this update_slider bg_music.sld "")}
      {handle ($this update_slider crowd.sld "")}
      {handle ($this update_slider sfx.sld "")}
      {handle ($this update_slider voice_chat.sld "")}
   )
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_dx_bot_skill
            {instruments.sld store}
            {instruments.sld set_showing TRUE}
            {$this set_focus instruments.sld}
         )
         ((os_dx_bot_overdrive_on os_dx_bot_overdrive_off os_dx_bot_overdrive_drain)
            {set $dx_bot_overdrive {switch $dx_bot_overdrive
               (dx_on dx_drain)
               (dx_drain dx_off)
               (dx_off dx_on)
            }}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_dx_auto_endgame_on os_dx_auto_endgame_off)
            {set $dx_auto_endgame {! $dx_auto_endgame}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         )
         ((os_auto_endurance_on os_auto_endurance_off)
            {set $dx_auto_endurance {! $dx_auto_endurance}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_1_on os_dx_bot_1_off)
            {set $dx_bot_1 {! $dx_bot_1}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_2_on os_dx_bot_2_off)
            {set $dx_bot_2 {! $dx_bot_2}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_3_on os_dx_bot_3_off)
            {set $dx_bot_3 {! $dx_bot_3}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_4_on os_dx_bot_4_off)
            {set $dx_bot_4 {! $dx_bot_4}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         ((os_dx_bot_5_on os_dx_bot_5_off)
            {set $dx_bot_5 {! $dx_bot_5}}
            {options_audio.lst set_data (DX_BOT_SETTINGS_DATA)}
         ) 
         kDataUnhandled
      }
   )
   (BUTTON_DOWN_MSG
      {if_else {find_elem ("instruments.sld") {$this focus_name}}
         {switch $action
            ((kAction_Confirm kAction_Cancel)
               {{$this find {$this focus_name}} confirm}
               {{$this find {$this focus_name}} set_showing FALSE}
               {if_else $dx_slider
                  {do
                     {$this set_focus options_audio.lst}
                  }
                  {$this set_focus options_audio.lst}
               }
            )
            kDataUnhandled
         }
         kDataUnhandled
      }
   )
   (SCROLL_SELECT_MSG {$this on_slider_change $component $user})
   (SCROLL_MSG {$this on_slider_change $component $user})
   (exit 
      {set $dx_slider FALSE}
      {options_audio.lst set scroll_time 0.25}
   )
	(on_cancel {$this show_options})
)

#define DX_DEBUG_DATA
(
   {do
      ($options
         {array 0})
      {push_back $options os_debug_mode}
      {if $dx_write_swap_genders
         {set $dx_write_swap_genders FALSE}
         {write_file DX_SWAP_GENDERS_PATH
            {array
               (
                  (dx_male female)
                  (dx_female male)
               )
            }
         }
      }
      {if_else {file_exists DX_SWAP_GENDERS_PATH}
         {if_else {> {size {read_file DX_SWAP_GENDERS_PATH}} 0}
            {if_else {== {elem {find {read_file DX_SWAP_GENDERS_PATH} dx_male} 1} female}
               {push_back $options os_dx_swap_gender_on}
               {push_back $options os_dx_swap_gender_off}
            }
            {push_back $options os_dx_swap_gender_off}
         }
         {push_back $options os_dx_swap_gender_off}
      }
      {push_back $options os_logging}
      #ifdef HX_PS3
      {if $dx_write_hi_mem
         {set $dx_write_hi_mem FALSE}
         {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
            {array
               (
                  (dx_high_memory 190000000)
                  (dx_song_count 16000)
               )
            }
         }
      }
      {if_else {file_exists "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}
         {if_else {> {size {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"}} 0}
            {if_else {== {elem {find {read_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"} dx_high_memory} 1} 190000000}
               {push_back $options os_dx_himem_on}
               {push_back $options os_dx_himem_off}
            }
            {push_back $options os_dx_himem_off}
         }
         {push_back $options os_dx_himem_off}
      }
      #endif
      {push_back $options do_script}
      {push_back $options os_uptime}
      {push_back $options generate_updates_dta}
      {push_back $options os_dumproot}
      {push_back $options os_dumproot2}
      
      {push_back $options print_hmx}
      {push_back $options print_objects}
      {push_back $options print_platform}
      {push_back $options {if_else $dx_time_remain_dbg os_time_remain_dbg_on os_time_remain_dbg_off}}
      
      {dx_state_setup dxState_DebugSettings FALSE}
   }
)

(dxState_DebugSettings
   (view
      DX_DEBUG_DATA
      {overshell_view_chooser}
   )
   ;(virtual_keyboard_result_msg
   ;   ($ok $text)
   ;   {if $ok
   ;      {set $evaltextarray ()}
   ;      {resize $evaltextarray 0}
   ;      {set $dx_text {symbol $text}}
   ;      {push_back $evaltextarray $dx_text}
   ;      {foreach $entry $evaltextarray
   ;         {search_replace $entry "'" "" $entry}
   ;      }
   ;      {dx_log_writer info {array $evaltextarray}}
   ;      {write_file "GAME:/file.dta" {array $evaltextarray}}
   ;      {run "GAME:/file.dta"}
   ;   }
   ;)
   (SELECT_MSG
      {switch {$component selected_sym}
         (os_debug_mode
            {set $dx_debug FALSE}
            {$this show_state dxState_DeluxeSettings}
         )
         (os_uptime
            {dx_uptime}
         )
         (print_hmx
            {print_hmx_panel}
         )
         (os_dumproot
            #ifdef HX_PS3
               {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/rootarray.dta" $syscfg}
            #endif
            #ifdef HX_XBOX
               {write_file "GAME:/rootarray.dta" $syscfg}
            #endif
            {dx_passive_messenger rootarray_dumped}
         )
         (os_dumproot2
            {foreach $array $syscfg
               #ifdef HX_PS3
                  {write_file {sprint "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
               #ifdef HX_XBOX
                  {write_file {sprint "GAME:/dx_debug/" {elem $array 0} ".dta"} $array}
               #endif
            }
            {dx_passive_messenger rootarray_dumped2}
         )
         ((os_time_remain_dbg_on os_time_remain_dbg_off)
            {set $dx_time_remain_dbg {! $dx_time_remain_dbg}}
            {if_else $dx_time_remain_dbg
               {set $dx_tracked_changed os_time_remain_dbg_on}
               {set $dx_tracked_changed os_time_remain_dbg_off}
            }
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_DebugSettings}
         )
         (generate_updates_dta
            {set $tempwrite {find_exists $syscfg missing_song_data}}
            {foreach $entry {read_file "dx/song_updates/songs_yarg.dta"}
               {push_back $tempwrite $entry}
            }
            {write_file DX_SONGS_UPDATES_FILE_PATH $tempwrite}
            {set $tempwrite FALSE}
            {dx_passive_messenger songs_updates_generated}
         )
         (print_platform
            {dx_passive_messenger_symbol {sprintf "%s" {localize $dx_detected_platform}}}
         )
         (do_script
            ;{virtual_keyboard
            ;   show_keyboard
            ;   $user
            ;   10000
            ;   {localize load_track_theme}
            ;   {localize load_track_theme_desc}
            ;   $dx_track_theme_name
            ;   $this
            ;}
            {run DX_ACE_PATH}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_DebugSettings}
         )
         (print_objects
            {dx_print_objects}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_DebugSettings}
         )
         (os_logging
            {$this show_state dxState_LogSettings}
         )
         (os_dx_swap_gender_off
            {$this show_state dxState_SwapGenderWarn}
         )
         (os_dx_swap_gender_on
            {write_file DX_SWAP_GENDERS_PATH
               {array
                  (
                     (dx_male male)
                     (dx_female female)
                  )
               }
            }
            {dx_passive_messenger reboot_to_apply}
            {set $dx_tracked_changed os_dx_swap_gender_off}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_DebugSettings}
         )
         (os_dx_himem_off
            {$this show_state dxState_HimemWarn}
         )
         (os_dx_himem_on
            {write_file "GD:/dev_hdd0/game/BLUS30463/USRDIR/dx_high_memory.dta"
               {array
                  (
                     (dx_high_memory 131000000)
                     (dx_song_count 8000)
                  )
               }
            }
            {set $dx_tracked_changed os_dx_himem_off}
            {dx_state_pos_tracker}
            DX_DEBUG_DATA
            {set $previous_state dxState_DebugSettings}
         )
      }
      {set $in_state FALSE}
      DX_DEBUG_DATA
      {set $previous_state dxState_DebugSettings}
   )
   (exit 
      {dx_state_pos_tracker}
   )
   (on_cancel
      {$this show_state dxState_DeluxeSettings}
   )
)