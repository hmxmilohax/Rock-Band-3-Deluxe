{new
   PatchPanel
   patch_panel
   (file
      "patchcreator.milo")
   (bg_color
      {pack_color 1 1 1})
   (exit_screen patch_select_screen)
   (mode modify_menu)
   (mode_cache modify_menu)
   (layer_first FALSE)
   (edit_layer_idx_cache 0)
   (size_x 1)
   (size_y 1)
   (help_shown 0)
   (editing_patch '')
   (last_selected_category '')
   (set_size
      ($x $y)
      {set
         [size_x]
         $x}
      {set
         [size_y]
         $y}
      {$this set_base_size $x $y})
   (block_event
      ($event)
      {'||'
         {== $event lost_connection}
         {== $event disband}})
   (modify_modes
      (move scale rotate flip color warp))
   (visible_groups
      {switch
         [mode]
         (modify_menu
            (layer_header.grp modify_menu.grp))
         (quit
            (quit.grp))
         (move
            (preview.grp layer_header.grp help.grp edit_help.grp))
         (flip
            (preview.grp layer_header.grp help.grp edit_help.grp))
         (rotate
            (preview.grp layer_header.grp help.grp edit_help.grp))
         (scale
            (preview.grp layer_header.grp help.grp edit_help.grp))
         (warp
            (preview.grp layer_header.grp help.grp edit_help.grp))
         (color
            (preview.grp layer_header.grp color.grp help.grp edit_help.grp))
         (category
            (layer_header.grp category.grp help.grp))
         (sticker
            (layer_header.grp stickers.grp help.grp))
         (layer
            (layers.grp help.grp))
         (layer_menu
            (layer_header.grp help.grp layers_menu.grp))
         (layer_move
            (layers.grp))})
   (on_set_mode
      {foreach
         $group
         {toggle_groups.grp get_draws}
         {if
            $group
            {$group set_showing FALSE}}}
      {foreach
         $group
         {$this visible_groups}
         {$group set_showing TRUE}}
      {switch
         [mode]
         (modify_menu
            {$this set_focus move.btn}
            {layer_header.lst
               set_selected
               {layer.lst selected_data}}
            {color.btn
               set_state
               {if_else
                  {{$this edit_layer}
                     allow_color}
                  kComponentNormal
                  kComponentDisabled}})
         (quit
            {$this set_focus cnf_save.btn}
            {quit_old_art.mat
               set
               diffuse_tex
               {[editing_patch]
                  get_tex}}
            {if_else
               {[editing_patch]
                  has_layers}
               {quit_old_art.mat set alpha 1.0}
               {quit_old_art.mat set alpha 0.0}}
            {quit_new_art.mat set diffuse_tex patch_preview.tex})
         (move
            {help.lbl set text_token patch_help_editing_move}
            {edit_mode.lbl set text_token patch_help_editing_move}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_scale)})
         (scale
            {help.lbl set text_token patch_help_editing_scale}
            {edit_mode.lbl set text_token patch_help_editing_scale}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_rotate)})
         (rotate
            {help.lbl set text_token patch_help_editing_rotate}
            {edit_mode.lbl set text_token patch_help_editing_rotate}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_flip)})
         (flip
            {help.lbl set text_token patch_help_editing_flip}
            {edit_mode.lbl set text_token patch_help_editing_flip}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_color)})
         (color
            {$this set_focus color.lst}
            {color.lst
               set_selected
               {{$this edit_layer}
                  get
                  color_idx}}
            {help.lbl set text_token patch_help_editing_color}
            {edit_mode.lbl set text_token patch_help_editing_color}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_warp)})
         (warp
            {help.lbl set text_token patch_help_editing_warp}
            {edit_mode.lbl set text_token patch_help_editing_warp}
            {edit.ihp
               set_action_token
               kAction_ShellOption
               (change_edit_mode patch_help_editing_move)})
         #ifdef HX_WII
         (category
            {$this set_focus category.lst}
            {if
               {!=
                  [mode_cache]
                  sticker}
               {category.lst set_selected 0}}
            {layer_header.lst
               set_selected
               {layer.lst selected_data}}
            {help.lbl set text_token patch_help_selecting})
         #else
         (category
            {$this set_focus category.lst}
            {switch
               [mode_cache]
               (sticker)
               (layer_menu
                  {category.lst
                     set_selected
                     {{$this edit_layer}
                        get
                        sticker_category}})
               {if_else
                  [last_selected_category]
                  {category.lst
                     set_selected
                     [last_selected_category]}
                  {category.lst set_selected 0}}}
            {layer_header.lst
               set_selected
               {layer.lst selected_data}}
            {help.lbl set text_token patch_help_selecting})
         #endif
         (sticker
            {sticker.lst refresh}
            {$this set_focus sticker.lst}
            {$this set_selected_sticker_ix sticker.lst 0}
            {sticker_category.lst
               set_selected
               {category.lst selected_data}}
            {help.lbl set text_token patch_help_sticker}
            {$this refresh_selected_sticker})
         (layer
            {if
               {!=
                  [mode]
                  [mode_cache]}
               {set
                  [edit_layer_idx_cache]
                  {$this
                     convert_to_layer_index
                     {layer.lst selected_pos}}}}
            {layer.lst refresh}
            {$this set_focus layer.lst}
            {if_else
               {==
                  {layer.lst selected_data}
                  0}
               {layers.ihp
                  set_config
                  ((kAction_Confirm select)
                     (kAction_Cancel finish_editing))}
               {layers.ihp
                  set_config
                  ((kAction_Confirm modify_layer)
                     (kAction_Option layer_options)
                     (kAction_Cancel finish_editing))}}
            {help.lbl set text_token patch_help_layer})
         (layer_menu
            {$this enable layer_copy.btn}
            {$this set_focus layer_copy.btn}
            {layer_header.lst
               set_selected
               {layer.lst selected_data}}
            {if
               {==
                  -1
                  {$this empty_layer_ix}}
               {$this disable layer_copy.btn}})
         (layer_move
            {layer.lst refresh}
            {$this set_focus layer.lst})}
      {set
         [mode_cache]
         [mode]})
   (enter
      {$this iterate UIList $l {$l set scroll_time 0}}
      {canvas.mat
         set
         color
         [bg_color]}
      {category.lst
         set_provider
         {$this category_provider}}
      {sticker_category.lst
         set_provider
         {$this category_provider}}
      {do
         ($layer
            {$this edit_layer})
         {color.lst
            set
            color_palette
            {$layer color_palette}}
         {color.lst
            set_selected
            {$layer get color_idx}}}
      {layer.lst
         set_provider
         {$this layer_provider}}
      {layer_header.lst
         set_provider
         {$this layer_provider}}
      {layer.lst set_selected 0}
      {$this
         set
         edit_layer_idx
         {$this
            convert_to_layer_index
            {layer.lst selected_pos}}}
      {$this set_sticker_provider sticker.lst}
      {if_else
         {[patch]
            has_layers}
         {$this set mode layer}
         {do
            {$this set edit_layer_idx 0}
            {$this set mode category}}}
      {if_else
         {practice_space_panel is_up}
         {change_camera_angle.ihp set showing FALSE}
         {change_camera_angle.ihp set showing TRUE}}
      {overshell
         add_sink
         $this
         (overshell_allowing_input_changed_msg)}
      #ifdef HX_PS3
      {move_camera_help.trg trigger}
      #endif)
   (TRANSITION_COMPLETE_MSG
      {if
         {delete_layer_confirm_screen get delete}
         {delete_layer_confirm_screen set delete FALSE}
         {do
            {$this
               clear_layer
               {$this
                  convert_to_layer_index
                  {layer.lst selected_pos}}}
            {layer.lst
               set_selected
               {$this get_edit_layer_list_index}}
            {$this patch_changed}}
         {layer.lst refresh}
         {$this set mode layer}})
   (exit
      {overshell remove_sink $this})
   (SELECT_MSG
      {if_else
         {&&
            {!=
               {type
                  {$component parent_list}}
               kDataUnhandled}
            {==
               {$component parent_list}
               sticker.lst}}
         {do
            {layer.lst refresh}
            {layer.lst
               set_selected
               {$this get_edit_layer_list_index}}
            {$this set mode layer}
            {$this patch_changed}}
         {switch
            $component
            (move.btn
               {$this store_undo}
               {$this set mode move})
            (color.btn
               {$this store_undo}
               {$this set mode color})
            (rotate.btn
               {$this store_undo}
               {$this set mode rotate})
            (warp.btn
               {$this store_undo}
               {$this set mode warp})
            (scale.btn
               {$this store_undo}
               {$this set mode scale})
            (flip.btn
               {$this store_undo}
               {$this set mode flip})
            (done.btn
               {$this set mode layer})
            (color.lst
               {$this set mode modify_menu})
            (layer_sticker.btn
               {$this set mode category})
            (layer_move.btn
               {$this set mode layer_move})
            (layer_clear.btn
               {ui push_screen delete_layer_confirm_screen})
            (layer_copy.btn
               {do
                  ($empty_layer_ix
                     {$this empty_layer_ix})
                  {$this
                     dupe_layer
                     {$this
                        convert_to_layer_index
                        {layer.lst selected_pos}}}
                  {if
                     {!= $empty_layer_ix -1}
                     {$this set edit_layer_idx $empty_layer_ix}}
                  {layer.lst refresh}
                  {layer.lst
                     set_selected
                     {$this get_edit_layer_list_index}}
                  {$this set mode layer}
                  {$this patch_changed}})
            (category.lst
               #ifndef HX_WII
               {set
                  [last_selected_category]
                  {category.lst selected_sym}}
               #endif
               {{$this edit_layer}
                  set
                  sticker_category
                  {category.lst selected_sym}}
               {$this
                  set_sticker_category
                  {category.lst selected_sym}}
               {$this set mode sticker}
               {{$this edit_layer}
                  set_scale
                  [size_x]
                  [size_y]}
               {{$this edit_layer}
                  set_default_color}
               {$this patch_changed})
            (layer.lst
               {if_else
                  {{$this edit_layer}
                     has_sticker}
                  {$this set mode modify_menu}
                  {$this set mode category}})
            (cnf_discard.btn
               {ui
                  goto_screen
                  [exit_screen]})
            (cnf_save.btn
               {$this
                  copy_to_patch
                  [editing_patch]}
               {quit_old_art.mat set alpha 1.0}
               {patch_select_panel set force_selected_patch_reload TRUE}
               {ui
                  goto_screen
                  [exit_screen]})
            (cnf_return.btn
               {preview.grp set_showing TRUE}
               {quit.grp set_showing FALSE}
               {$this set mode layer})}})
   (SCROLL_MSG
      {switch
         [mode]
         (layer
            {if_else
               {==
                  {layer.lst selected_data}
                  0}
               {layers.ihp
                  set_config
                  ((kAction_Confirm select)
                     (kAction_Cancel finish_editing))}
               {layers.ihp
                  set_config
                  ((kAction_Confirm modify_layer)
                     (kAction_Option layer_options)
                     (kAction_Cancel finish_editing))}}
            {$this
               set
               edit_layer_idx
               {$this
                  convert_to_layer_index
                  {layer.lst selected_pos}}}
            {{$this edit_layer}
               select_fx}
            {$this set mode layer})
         (sticker
            {$this refresh_selected_sticker})
         {switch
            $component
            (color.lst
               {if
                  {==
                     {$this get mode}
                     color}
                  {{$this edit_layer}
                     set
                     color_idx
                     {$component selected_pos}}
                  {$this patch_changed}})}})
   (refresh_selected_sticker
      {{$this edit_layer}
         set
         sticker_idx
         {$this selected_sticker_ix_from_list sticker.lst}}
      {{$this edit_layer}
         set_default_color}
      {$this patch_changed})
   (overshell_allowing_input_changed_msg
      ($user)
      {if
         {&&
            {input_mgr has_user}
            {==
               {input_mgr get_user}
               $user}}
         {$this reset_directions}
         {$this reset_velocities}})
   (BUTTON_DOWN_MSG
      {if
         {== $action kAction_ViewModify}
         {if
            {!
               {practice_space_panel is_up}}
            {closet_mgr cycle_camera}}}
      {if_else
         {contains
            [modify_modes]
            [mode]}
         {switch
            $action
            (kAction_ShellOption
               {do
                  ($ix 0)
                  {$this reset_directions}
                  {$this reset_velocities}
                  {find_elem
                     [modify_modes]
                     [mode]
                     $ix}
                  {set
                     $ix
                     {mod
                        {'+' $ix 1}
                        {size
                           [modify_modes]}}}
                  {$this
                     set
                     mode
                     {elem
                        [modify_modes]
                        $ix}}
                  {play_instr_sfx $user button_toggle}})
            (kAction_Cancel
               {$this restore_undo}
               {play_instr_sfx $user button_back}
               {$this set mode modify_menu}
               {$this patch_changed})
            (kAction_Confirm
               {$this reset_velocities}
               {$this reset_directions}
               {play_instr_sfx $user button_select}
               {$this set mode modify_menu})
            {switch
               [mode]
               (flip
                  {switch
                     $raw_button
                     (kPad_DUp
                        {play_instr_sfx $user button_toggle}
                        {{$this edit_layer}
                           flip_y}
                        {$this patch_changed})
                     (kPad_DDown
                        {play_instr_sfx $user button_toggle}
                        {{$this edit_layer}
                           flip_y}
                        {$this patch_changed})
                     (kPad_DLeft
                        {play_instr_sfx $user button_toggle}
                        {{$this edit_layer}
                           flip_x}
                        {$this patch_changed})
                     (kPad_DRight
                        {play_instr_sfx $user button_toggle}
                        {{$this edit_layer}
                           flip_x}
                        {$this patch_changed})
                     kDataUnhandled})
               kDataUnhandled}}
         {switch
            [mode]
            (modify_menu
               {if_else
                  {== $action kAction_Cancel}
                  {$this set mode layer}
                  kDataUnhandled})
            (category
               {switch
                  $action
                  (kAction_Cancel
                     {$this restore_undo}
                     {play_instr_sfx $user button_back}
                     {$this set mode layer}
                     {layer.lst
                        set_selected
                        {$this get_edit_layer_list_index}})
                  kDataUnhandled})
            (layer_menu
               {if_else
                  {'||'
                     {== $action kAction_Cancel}
                     {== $action kAction_Option}}
                  {$this set mode layer}
                  kDataUnhandled})
            (layer
               {switch
                  $action
                  (kAction_Option
                     {if
                        {!=
                           {layer.lst selected_data}
                           0}
                        {$this set mode layer_menu}})
                  (kAction_Cancel
                     {$this set mode quit})
                  kDataUnhandled})
            (layer_move
               {switch
                  $action
                  (kAction_Confirm
                     {play_instr_sfx $user button_select}
                     {$this
                        set
                        edit_layer_idx
                        {$this
                           convert_to_layer_index
                           {layer.lst selected_pos}}}
                     {{$this edit_layer}
                        select_fx}
                     {$this set mode layer_menu})
                  (kAction_Cancel
                     {play_instr_sfx $user button_back}
                     {$this set mode layer_menu})
                  (kAction_Up
                     {if
                        {$this
                           swap_layers
                           {$this
                              convert_to_layer_index
                              {layer.lst selected_pos}}
                           {$this
                              convert_to_layer_index
                              {-
                                 {layer.lst selected_pos}
                                 1}}}
                        {layer.lst refresh}
                        {layer.lst
                           set_selected_simulate_scroll
                           {-
                              {layer.lst selected_pos}
                              1}}
                        {$this patch_changed}})
                  (kAction_Down
                     {if
                        {$this
                           swap_layers
                           {$this
                              convert_to_layer_index
                              {layer.lst selected_pos}}
                           {$this
                              convert_to_layer_index
                              {'+'
                                 {layer.lst selected_pos}
                                 1}}}
                        {layer.lst refresh}
                        {layer.lst
                           set_selected_simulate_scroll
                           {'+'
                              {layer.lst selected_pos}
                              1}}
                        {$this patch_changed}})})
            (sticker
               {switch
                  $action
                  (kAction_Cancel
                     {$this restore_undo}
                     {play_instr_sfx $user button_back}
                     {$this set mode category}
                     {$this patch_changed})
                  kDataUnhandled})
            kDataUnhandled}})
   (update_char_preview
      {if
         {'||'
            {customize_clothing_panel is_up}
            {customize_instrument_panel is_up}
            {customize_tattoo_panel is_up}
            {customize_salon_panel is_up}}
         {customize_panel refresh_patch_edit}})}
{new
   BandScreen
   patch_screen
   (panels
      meta
      (practice_space_panel
         (always_load FALSE))
      (customize_clothing_panel
         (always_load FALSE))
      (customize_instrument_panel
         (always_load FALSE))
      (customize_tattoo_panel
         (always_load FALSE))
      (customize_salon_panel
         (always_load FALSE))
      (customize_panel
         (always_load FALSE)
         (active FALSE))
      patch_panel
      patch_profile_watcher)
   (focus patch_panel)
   (enter
      {if
         {practice_space_panel is_up}
         {{practice_space_panel find art_maker_patch.mat}
            set
            diffuse_tex
            {patch_panel find patch_preview.tex}}
         {{practice_space_panel find art_maker_patch.mat}
            set
            alpha
            1.0}})}
{new
   BandScreen
   delete_layer_confirm_screen
   (panels dialog_panel)
   (focus dialog_panel)
   (enter
      {dialog_panel set_yesno patch_delete_layer_confirm no.btn}
      {set
         [delete]
         FALSE})
   (SELECT_MSG
      {switch
         $component
         (yes.btn
            {set
               [delete]
               TRUE}
            {ui pop_screen})
         (no.btn
            {ui pop_screen})})
   (delete FALSE)}