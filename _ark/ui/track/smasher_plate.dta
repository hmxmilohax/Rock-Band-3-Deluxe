(RndDir
   (types
      (smasher_plate
         (editor
            (reset
               script
               (script
                  {$this reset}))
            (lefty
               bool
               (post_sync
                  {$this
                     set_lefty
                     [lefty]}))
            (is_drum bool)
            (real_guitar bool)
            (test
               script
               (script
                  {$this test 0.2}))
            (fast_test
               script
               (script
                  {$this test 5.0e-2}))
            (stop_test
               script
               (script
                  {$this stop_test}))
            (setup_draworder
               script
               (script
                  {$this setup_draworder TRUE}))
            (smasher_list
               (array
                  object
                  (class RndDir)))
            (keyboard_style
               bool
               (post_sync
                  {$this update_style})))
         (lefty FALSE)
         (is_drum FALSE)
         (real_guitar FALSE)
         (smasher_list
            ())
         (draw_order_set FALSE)
         (keyboard_style FALSE)
         (reset
            {$this update_colors}
            {foreach
               $smasher
               [smasher_list]
               {if
                  {!= $smasher ''}
                  {$smasher reset}}}
            {$this update_style})
         (enter
            {$this reset})
         (set_lefty
            ($in_val)
            {set
               [lefty]
               $in_val}
            {if
               {exists orientation.grp}
               {orientation.grp
                  set_frame
                  {if_else
                     [lefty]
                     1
                     0}}}
            {$this update_colors}
            {foreach
               $smasher
               [smasher_list]
               {if
                  {!= $smasher ''}
                  {$smasher set_lefty $in_val}}})
         (update_colors ; dx - set smashers to custom color selections
            {if_else [is_drum]
               {do
                  {gem_smasher1 set_color
                     {if_else [lefty]
                        {elem (DRUMCOLOR_SET) $smasher4_color}
                        {elem (DRUMCOLOR_SET) $smasher1_color}
                     }
                  }
                  {gem_smasher2 set_color
                     {if_else [lefty]
                        {elem (DRUMCOLOR_SET) $smasher3_color}
                        {elem (DRUMCOLOR_SET) $smasher2_color}
                     }
                  }
                  {gem_smasher3 set_color
                     {if_else [lefty]
                        {elem (DRUMCOLOR_SET) $smasher2_color}
                        {elem (DRUMCOLOR_SET) $smasher3_color}
                     }
                  }
                  {gem_smasher4 set_color
                     {if_else [lefty]
                        {elem (DRUMCOLOR_SET) $smasher1_color}
                        {elem (DRUMCOLOR_SET) $smasher4_color}
                     }
                  }
               }
               {do
                  {gem_smasher0 set_color {elem (GEMCOLOR_SET) $fret1_color}}
                  {gem_smasher1 set_color {elem (GEMCOLOR_SET) $fret2_color}}
                  {gem_smasher2 set_color {elem (GEMCOLOR_SET) $fret3_color}}
                  {gem_smasher3 set_color {elem (GEMCOLOR_SET) $fret4_color}}
                  {gem_smasher4 set_color {elem (GEMCOLOR_SET) $fret5_color}}
               }
            }
         )
         (setup_draworder
            ($force)
            {if
               {&&
                  {'||'
                     $force
                     {$this is_proxy}}
                  {!
                     [draw_order_set]}}
               {$this
                  collect_groups
                  {object before_gems.grp}
                  base_bottom.grp}
               {$this
                  collect_groups
                  {object before_gems.grp}
                  base_top.grp}
               {$this
                  collect_drawables
                  {object after_gems.grp}
                  effects.grp}
               {if
                  {exists gem_smashers.grp}
                  {gem_smashers.grp set_showing FALSE}}
               {set
                  [draw_order_set]
                  TRUE}})
         (collect_groups
            ($dst_group $src_group_name)
            {foreach
               $smasher
               [smasher_list]
               {$dst_group
                  add_object
                  {$smasher find $src_group_name}}})
         (collect_drawables
            ($dst_group $src_group_name)
            {if_else
               {== $dst_group ''}
               {notify
                  {sprint
                     "no such group "
                     $dst_group
                     " in "
                     {$this name}}}
               {do
                  ($done FALSE)
                  ($i 0)
                  ($obj)
                  ($cur_obj)
                  ($to_delete
                     {array 0})
                  ($src_group)
                  {while
                     {! $done}
                     {set $done TRUE}
                     {foreach
                        $smasher
                        [smasher_list]
                        {set
                           $obj
                           {$this get_draw_object $smasher $src_group_name $i}}
                        {if
                           {!= $obj ''}
                           {set $done FALSE}
                           {set
                              $cur_object
                              {$this
                                 find_part_in_group
                                 $dst_group
                                 {$obj name}}}
                           {if_else
                              {== $cur_object ''}
                              {do
                                 {$dst_group add_object $obj}
                                 {if
                                    {$obj is_a ParticleSys}
                                    {$obj set_trans_parent $this}
                                    {push_back
                                       $to_delete
                                       {$obj name}}}}
                              {do
                                 {$smasher
                                    iterate_self
                                    (Object particle_launcher)
                                    $launcher
                                    {if
                                       {==
                                          {$launcher get part}
                                          $obj}
                                       {$launcher set part $cur_object}}}}}}}
                     {'++' $i}}
                  {set
                     $i
                     {if_else
                        [is_drum]
                        2
                        1}}
                  {while
                     {<
                        $i
                        {size
                           [smasher_list]}}
                     {do
                        ($smasher
                           {elem
                              [smasher_list]
                              $i})
                        {set
                           $src_group
                           {$smasher find $src_group_name}}
                        {foreach
                           $delete_name
                           $to_delete
                           {set
                              $obj
                              {$smasher find $delete_name}}
                           {if
                              {!= $obj ''}
                              {$src_group remove_object $obj}
                              {delete $obj}}}}
                     {'++' $i}}}})
         (find_part_in_group
            ($group $name)
            {do
               ($objects
                  {$group get_array objects})
               ($ret_obj '')
               {foreach
                  $elem
                  $objects
                  {if
                     {&&
                        {&&
                           {==
                              $name
                              {$elem name}}
                           {$elem is_a ParticleSys}}
                        {==
                           {$elem get mesh_emitter}
                           ""}}
                     {set $ret_obj $elem}}}
               $ret_obj})
         (get_draw_object
            ($smasher $group_name $index)
            {do
               ($draw_objects
                  {{$smasher find $group_name}
                     get_array
                     objects})
               {if_else
                  {<
                     $index
                     {size $draw_objects}}
                  {elem $draw_objects $index}
                  ''}})
         (test
            ($sleep_time)
            {$this reset}
            {$this stop_test}
            {thread_task
               kTaskSeconds
               (name smasher_plate_test)
               (script
                  {foreach
                     $smasher
                     [smasher_list]
                     {$smasher set_glow FALSE}}
                  {if
                     {>
                        {random_int 0 6}
                        2}
                     {do
                        ($smasher)
                        {set
                           $smasher
                           {elem
                              [smasher_list]
                              {random_int
                                 0
                                 {size
                                    [smasher_list]}}}}
                        {while
                           {!
                              {$smasher showing}}
                           {set
                              $smasher
                              {elem
                                 [smasher_list]
                                 {random_int
                                    0
                                    {size
                                       [smasher_list]}}}}}
                        {$smasher set_glow TRUE}
                        {$smasher hit}
                        {if
                           {>=
                              {random_int 0 3}
                              2}
                           {set
                              $smasher
                              {elem
                                 [smasher_list]
                                 {random_int
                                    0
                                    {size
                                       [smasher_list]}}}}
                           {while
                              {!
                                 {$smasher showing}}
                              {set
                                 $smasher
                                 {elem
                                    [smasher_list]
                                    {random_int
                                       0
                                       {size
                                          [smasher_list]}}}}}
                           {$smasher set_glow TRUE}
                           {$smasher hit}}}}
                  {$task sleep $sleep_time}
                  {$task loop})})
         (stop_test
            {if
               {exists smasher_plate_test}
               {delete smasher_plate_test}}
            {foreach
               $smasher
               [smasher_list]
               {$smasher set_glow FALSE}})
         (update_style
            {foreach
               $smasher
               [smasher_list]
               {if
                  {$smasher exists style.anim}
                  {{$smasher find style.anim}
                     set
                     frame
                     [keyboard_style]}}}))))