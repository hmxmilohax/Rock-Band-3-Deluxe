#include song_select_extras.dta
#define DX_SOURCE_SWITCH
(
   {switch {{music_library get_highlighted_node} get_token}
      ; vol 1 track pack song source additions
      (allthesmallthings {set $sourcevar rbtp_vol_1})
      (buddyholly {set $sourcevar rbtp_vol_1})
      (callingdrlove {set $sourcevar rbtp_vol_1})
      (crushcrushcrush {set $sourcevar rbtp_vol_1})
      (dieallright {set $sourcevar rbtp_vol_1})
      (gimmethreesteps {set $sourcevar rbtp_vol_1})
      (interstatelovesong {set $sourcevar rbtp_vol_1})
      (jokerandthe {set $sourcevar rbtp_vol_1})
      (littlesister {set $sourcevar rbtp_vol_1})
      (liveforever {set $sourcevar rbtp_vol_1})
      (marchofthepigs {set $sourcevar rbtp_vol_1})
      (moonagedaydream {set $sourcevar rbtp_vol_1})
      (morethanafeeling {set $sourcevar rbtp_vol_1})
      (movealong {set $sourcevar rbtp_vol_1})
      (siva {set $sourcevar rbtp_vol_1})
      (synchronicity2 {set $sourcevar rbtp_vol_1})
      (teenagelobotomy {set $sourcevar rbtp_vol_1})
      (thekill {set $sourcevar rbtp_vol_1})
      (truckin {set $sourcevar rbtp_vol_1})
      (wecarealot {set $sourcevar rbtp_vol_1})

      ; vol 2 track pack song source additions
      (afterlife {set $sourcevar rbtp_vol_2})
      (callme {set $sourcevar rbtp_vol_2})
      (elscorcho {set $sourcevar rbtp_vol_2})
      (girlswhoplayguitars {set $sourcevar rbtp_vol_2})
      (girluwant {set $sourcevar rbtp_vol_2})
      (indestructible {set $sourcevar rbtp_vol_2})
      (ithurts {set $sourcevar rbtp_vol_2})
      (justwhatineeded {set $sourcevar rbtp_vol_2})
      (messageinabottle {set $sourcevar rbtp_vol_2})
      (monkeygonetoheaven {set $sourcevar rbtp_vol_2})
      (perfectdrug {set $sourcevar rbtp_vol_2})
      (rio {set $sourcevar rbtp_vol_2})
      (saintsoflosangeles {set $sourcevar rbtp_vol_2})
      (simpleman {set $sourcevar rbtp_vol_2})
      (snowheyoh {set $sourcevar rbtp_vol_2})
      (thisaintascene {set $sourcevar rbtp_vol_2})
      (timeisrunningout {set $sourcevar rbtp_vol_2})
      (whydoyouloveme {set $sourcevar rbtp_vol_2})
      (yougotanotherthingcoming {set $sourcevar rbtp_vol_2})
      (zero {set $sourcevar rbtp_vol_2})

      ; classic rock track pack song source additions
      (allrightnow {set $sourcevar rbtp_classic_rock})
      (babaoriley {set $sourcevar rbtp_classic_rock})
      (badtothebone {set $sourcevar rbtp_classic_rock})
      (behindblueeyes {set $sourcevar rbtp_classic_rock})
      (californiauberalles {set $sourcevar rbtp_classic_rock})
      (cantstandlosingyou {set $sourcevar rbtp_classic_rock})
      (closertotheheart {set $sourcevar rbtp_classic_rock})
      (funk49 {set $sourcevar rbtp_classic_rock})
      (hitmewithyourbestshot {set $sourcevar rbtp_classic_rock})
      (holidayincambodia {set $sourcevar rbtp_classic_rock})
      (hymn43 {set $sourcevar rbtp_classic_rock})
      (kissthemforme {set $sourcevar rbtp_classic_rock})
      (letloverule {set $sourcevar rbtp_classic_rock})
      (lovespreads {set $sourcevar rbtp_classic_rock})
      (peaceofmind {set $sourcevar rbtp_classic_rock})
      (redbarchetta {set $sourcevar rbtp_classic_rock})
      (rockandrollband {set $sourcevar rbtp_classic_rock})
      (takethemoney {set $sourcevar rbtp_classic_rock})
      (thejoker {set $sourcevar rbtp_classic_rock})
      (truthhitseverybody {set $sourcevar rbtp_classic_rock})

      ; metal track pack song source additions
      (3sand7s {set $sourcevar rbtp_metal})
      (areyoudeadyet {set $sourcevar rbtp_metal})
      (blindedbyfear {set $sourcevar rbtp_metal})
      (bullsonparade {set $sourcevar rbtp_metal})
      (closer {set $sourcevar rbtp_metal})
      (doa {set $sourcevar rbtp_metal})
      (forever {set $sourcevar rbtp_metal})
      (hairofthedog {set $sourcevar rbtp_metal})
      (istandalone {set $sourcevar rbtp_metal})
      (killedbydeath {set $sourcevar rbtp_metal})
      (laidtorest {set $sourcevar rbtp_metal})
      (levitate {set $sourcevar rbtp_metal})
      (mastersoftheuniverse {set $sourcevar rbtp_metal})
      (reddevil {set $sourcevar rbtp_metal})
      (screamingfor {set $sourcevar rbtp_metal})
      (shockwave {set $sourcevar rbtp_metal})
      (thrasher {set $sourcevar rbtp_metal})
      (transmaniaconmc {set $sourcevar rbtp_metal})
      (twoweeks {set $sourcevar rbtp_metal})
      (wakingthedemon {set $sourcevar rbtp_metal})

      ; Country Track Pack 1 song source additions
      (3dimesdown {set $sourcevar rbtp_country_1})
      (anymanofmine {set $sourcevar rbtp_country_1})
      (cantletgo_lucinda {set $sourcevar rbtp_country_1})
      (crylonely {set $sourcevar rbtp_country_1})
      (freeandeasy {set $sourcevar rbtp_country_1})
      (gone_mg {set $sourcevar rbtp_country_1})
      (goodtime {set $sourcevar rbtp_country_1})
      (gunpowderandlead {set $sourcevar rbtp_country_1})
      (hillbillydeluxe {set $sourcevar rbtp_country_1})
      (itoldyouso {set $sourcevar rbtp_country_1})
      (meandmygang {set $sourcevar rbtp_country_1})
      (mudonthetires {set $sourcevar rbtp_country_1})
      (ontheroadagain {set $sourcevar rbtp_country_1})
      (satelliteradio {set $sourcevar rbtp_country_1})
      (shescountry {set $sourcevar rbtp_country_1})
      (shethinksmytractorssexy {set $sourcevar rbtp_country_1})
      (sinwagon {set $sourcevar rbtp_country_1})
      (sudsinabucket {set $sourcevar rbtp_country_1})
      (swing {set $sourcevar rbtp_country_1})
      (thegambler {set $sourcevar rbtp_country_1})
      (thisonesforthegirls {set $sourcevar rbtp_country_1})

      ; Country Track Pack 2 song source additions
      (alright {set $sourcevar rbtp_country_2})
      (awfulbeautifullife {set $sourcevar rbtp_country_2})
      (backwoods {set $sourcevar rbtp_country_2})
      (crazytown {set $sourcevar rbtp_country_2})
      (giddyonup {set $sourcevar rbtp_country_2})
      (intentionalheartache {set $sourcevar rbtp_country_2})
      (kissagirl {set $sourcevar rbtp_country_2})
      (mamatried {set $sourcevar rbtp_country_2})
      (manofme {set $sourcevar rbtp_country_2})
      (parrtyfortwo {set $sourcevar rbtp_country_2})
      (perfectday {set $sourcevar rbtp_country_2})
      (rainisagoodthing {set $sourcevar rbtp_country_2})
      (rideadkins {set $sourcevar rbtp_country_2})
      (ringoffire2 {set $sourcevar rbtp_country_2})
      (settlin {set $sourcevar rbtp_country_2})
      (sideways {set $sourcevar rbtp_country_2})
      (singlewhitefemale {set $sourcevar rbtp_country_2})
      (summernights {set $sourcevar rbtp_country_2})
      (thatshowcountryboysroll {set $sourcevar rbtp_country_2})
      (thenightthelightswentout {set $sourcevar rbtp_country_2})
      (twang {set $sourcevar rbtp_country_2})
      (alright2 {set $sourcevar rbtp_country_2})
      (awfulbeautifullife2 {set $sourcevar rbtp_country_2})
      (backwoods2 {set $sourcevar rbtp_country_2})
      (crazytown2 {set $sourcevar rbtp_country_2})
      (giddyonup2 {set $sourcevar rbtp_country_2})
      (intentionalheartache2 {set $sourcevar rbtp_country_2})
      (kissagirl2 {set $sourcevar rbtp_country_2})
      (mamatried2 {set $sourcevar rbtp_country_2})
      (manofme2 {set $sourcevar rbtp_country_2})
      (parrtyfortwo2 {set $sourcevar rbtp_country_2})
      (perfectday2 {set $sourcevar rbtp_country_2})
      (rainisagoodthing2 {set $sourcevar rbtp_country_2})
      (rideadkins2 {set $sourcevar rbtp_country_2})
      (ringoffire3 {set $sourcevar rbtp_country_2})
      (settlin2 {set $sourcevar rbtp_country_2})
      (sideways2 {set $sourcevar rbtp_country_2})
      (singlewhitefemale2 {set $sourcevar rbtp_country_2})
      (summernights2 {set $sourcevar rbtp_country_2})
      (thatshowcountryboysroll2 {set $sourcevar rbtp_country_2})
      (thenightthelightswentout2 {set $sourcevar rbtp_country_2})
      (twang2 {set $sourcevar rbtp_country_2})

      ;guitar hero series collection
      (o34826644_aggro_theenemy {set $sourcevar ghwt})
      (o858195341_antisocial_trus {set $sourcevar ghwt})
      (o327403026_assassin_muse {set $sourcevar ghwt})
      (o417289882_beatit_michaelj {set $sourcevar ghwt})
      (o896062629_demolitionmanli {set $sourcevar ghwt})
      (o453959213_doitagain_steel {set $sourcevar ghwt})
      (o816452287_escueladecalor {set $sourcevar ghwt})
      (o653197431_goodgod_anouk {set $sourcevar ghwt})
      (o244113824_hailtothefreaks {set $sourcevar ghwt})
      (o206173031_hollywoodnights {set $sourcevar ghwt})
      (o443716435_hotelcalifornia {set $sourcevar ghwt})
      (o67162146_kickoutthejams_w {set $sourcevar ghwt})
      (o712494881_loveremovalmach {set $sourcevar ghwt})
      (o577897425_lvialviaquez_th {set $sourcevar ghwt})
      (o551196916_nevertoolate_th {set $sourcevar ghwt})
      (o751061815_nuvoleelenzuola {set $sourcevar ghwt})
      (obstacle1_inter {set $sourcevar ghwt})
      (o683046565_overkill_motrhe {set $sourcevar ghwt})
      (o142765791_parabola_tool {set $sourcevar ghwt})
      (o660521072_prettyvacant_se {set $sourcevar ghwt})
      (o178009092_prisonerofsocie {set $sourcevar ghwt})
      (o903952286_schism_tool {set $sourcevar ghwt})
      (o270050070_shiver_coldplay {set $sourcevar ghwt})
      (o789578687_somemightsay_oa {set $sourcevar ghwt})
      (o913713929_souldoubt_nofx {set $sourcevar ghwt})
      (o884880243_stillborn_black {set $sourcevar ghwt})
      (o405709131_toomuchtooyoung {set $sourcevar ghwt})
      (o15744543_toyboy_stuckinth {set $sourcevar ghwt})
      (o500966869_vicarious_tool {set $sourcevar ghwt})
      (o189950301_vinternoll2_ken {set $sourcevar ghwt})

      (o216949801_amillionways_ok {set $sourcevar bh})
      (o326219644_angelsofthesile {set $sourcevar bh})
      (o208750169_backagain_parac {set $sourcevar bh})
      (o61354198_beautifulsoul_je {set $sourcevar bh})
      (o796249537_believe_thebrav {set $sourcevar bh})
      (o977765809_blackcat_janetj {set $sourcevar bh})
      (o701074934_blackhorseandth {set $sourcevar bh})
      (o445215217_gasolinerhythmv {set $sourcevar bh})
      (o164089081_hangmeuptodry_c {set $sourcevar bh})
      (o816663278_happytogether_t {set $sourcevar bh})
      (o772709454_honkytonkwomen {set $sourcevar bh})
      (o377911766_ihearditthrough {set $sourcevar bh})
      (o996775597_lesartistes_san {set $sourcevar bh})
      (o225418948_likewhoa_alyand {set $sourcevar bh})
      (o876199888_lovestorypopmix {set $sourcevar bh})
      (o410131743_mrroboto_styx {set $sourcevar bh})
      (o886775043_picturesofyou_t {set $sourcevar bh})
      (o645207936_picturetoburn_t {set $sourcevar bh})
      (o15233719_putyourrecordson {set $sourcevar bh})
      (o168420829_rockstar_nerd {set $sourcevar bh})
      (o888005726_shewillbeloved {set $sourcevar bh})
      (o26305696_soyesterday_hila {set $sourcevar bh})
      (o387117096_stealmykisses_b {set $sourcevar bh})
      (o617915323_takeapicture_fi {set $sourcevar bh})
      (o318158080_takewhatyoutake {set $sourcevar bh})
      (o869341342_turnoffthelight {set $sourcevar bh})
      (o290249296_wannabe_spicegi {set $sourcevar bh})
      (o602144888_warwickavenue_d {set $sourcevar bh})
      (o639445084_ymca_villagepeo {set $sourcevar bh})
      (o427668589_youbelongwithme {set $sourcevar bh})
      (o515880509_youhadme_jossst {set $sourcevar bh})

      (o483731513_blackrain_sound {set $sourcevar ghwor})
      (o282453879_blackwidowoflap {set $sourcevar ghwor})
      (o827000524_bleeditout_link {set $sourcevar ghwor})
      (o299811684_bloodlines_deth {set $sourcevar ghwor})
      (o740293749_burn_deeppurple {set $sourcevar ghwor})
      (o484745267_calling_strungo {set $sourcevar ghwor})
      (o22662055_callmethebreezel {set $sourcevar ghwor})
      (o869482751_chemicalwarfare {set $sourcevar ghwor})
      (o291651889_childrenofthegr {set $sourcevar ghwor})
      (o266362091_citiesonflamewi {set $sourcevar ghwor})
      (o912696175_dancingthroughs {set $sourcevar ghwor})
      (o566185958_deadfall_snot {set $sourcevar ghwor})
      (o808892907_fascinationstre {set $sourcevar ghwor})
      (o600962926_furyofthestorm {set $sourcevar ghwor})
      (o823025198_ghost_slashfeat {set $sourcevar ghwor})
      (o774053184_graduate_thirde {set $sourcevar ghwor})
      (o256868817_ifyouwantpeacep {set $sourcevar ghwor})
      (o513399801_itsonlyanotherp {set $sourcevar ghwor})
      (o977536794_jetcitywoman_qu {set $sourcevar ghwor})
      (o384926279_listentoherhear {set $sourcevar ghwor})
      (o467391603_lovegun_kiss {set $sourcevar ghwor})
      (o546956304_lunaticfringe_r {set $sourcevar ghwor})
      (o434489472_moderndaycowboy {set $sourcevar ghwor})
      (o272888642_moneyfornothing {set $sourcevar ghwor})
      (o777875939_motivation_sum4 {set $sourcevar ghwor})
      (o865117185_moveitonoverliv {set $sourcevar ghwor})
      (o117490523_nowayback_foofi {set $sourcevar ghwor})
      (o968033633_paranoidlive_me {set $sourcevar ghwor})
      (o322825128_ravenous_atreyu {set $sourcevar ghwor})
      (o735044559_reignitionlive {set $sourcevar ghwor})
      (o73272181_rockininthefreew {set $sourcevar ghwor})
      (o188676749_scumbagblues_th {set $sourcevar ghwor})
      (o123190016_settingfiretosl {set $sourcevar ghwor})
      (o192853159_sharpdressedman {set $sourcevar ghwor})
      (o658427535_slowhands_inter {set $sourcevar ghwor})
      (o843426709_speedingvaulted {set $sourcevar ghwor})
      (o76403610_straycatblues_th {set $sourcevar ghwor})
      (o817824303_suddendeath_meg {set $sourcevar ghwor})
      (o864585807_suffocated_oria {set $sourcevar ghwor})
      (o421085721_themefromspider {set $sourcevar ghwor})
      (o533207675_theoutsider_ape {set $sourcevar ghwor})
      (o118046937_theresnosecrets {set $sourcevar ghwor})
      (o197693009_thisdaywefight {set $sourcevar ghwor})
      (o658428837_tiesthatbind_al {set $sourcevar ghwor})
      (o747166940_tonesofhome_bli {set $sourcevar ghwor})
      (o369234428_uprising_muse {set $sourcevar ghwor})
      (o625771668_waidmannsheil_r {set $sourcevar ghwor})
      (o404519017_whatdoiget_buzz {set $sourcevar ghwor})
      (o775016486_wish_nineinchna {set $sourcevar ghwor})

      (o946809420_atomicpunk_vanh {set $sourcevar ghvh})
      (o912158124_beautifulgirls {set $sourcevar ghvh})
      (o720910201_cometolife_alte {set $sourcevar ghvh})
      (o944817773_doublevision_fo {set $sourcevar ghvh})
      (o639114031_eruption_vanhal {set $sourcevar ghvh})
      (o13306153_everybodywantsso {set $sourcevar ghvh})
      (o117401074_feelyourloveton {set $sourcevar ghvh})
      (o407958819_hangemhigh_vanh {set $sourcevar ghvh})
      (o201150946_hearaboutitlate {set $sourcevar ghvh})
      (o707175303_icecreamman_van {set $sourcevar ghvh})
      (o740840524_imtheone_vanhal {set $sourcevar ghvh})
      (o31234521_jamiescryin_vanh {set $sourcevar ghvh})
      (o724932399_jump_vanhalen {set $sourcevar ghvh})
      (o346425995_littleguitars_v {set $sourcevar ghvh})
      (o267821037 {set $sourcevar ghvh})
      (o357536756_meanstreet_vanh {set $sourcevar ghvh})
      (o363618117_rockandrollisde {set $sourcevar ghvh})
      (o746492575_romeodelight_va {set $sourcevar ghvh})
      (o10135353_safeeuropeanhome {set $sourcevar ghvh})
      (o793668347_somebodygetmead {set $sourcevar ghvh})
      (o946084278_sothisislove_va {set $sourcevar ghvh})
      (o426756263_thetakedown_yel {set $sourcevar ghvh})
      (o924376928_youreallygotme {set $sourcevar ghvh})

      (o937927691_anarchyintheuk {set $sourcevar gh3})
      (o44985847_avalancha_heroes {set $sourcevar gh3})
      (o76959068_cliffsofdover_er {set $sourcevar gh3})
      (o254811576_helicopter_bloc {set $sourcevar gh3})
      (o961614924_lagrange_zztop {set $sourcevar gh3})
      (o323974482_laydown_prieste {set $sourcevar gh3})
      (o602436487_mauvaisgarcon_n {set $sourcevar gh3})
      (o483074672_minuscelsius_ba {set $sourcevar gh3})
      (o328063260_monsters_matchb {set $sourcevar gh3})
      (o903505348_paintitblack_th {set $sourcevar gh3})
      (o620252380_radiosong_super {set $sourcevar gh3})
      (o32527854_sunshineofyourlo {set $sourcevar gh3})
      (o16467230_takethislife_inf {set $sourcevar gh3})
      (o440504006_thedevilwentdow {set $sourcevar gh3})
      (o712287898_welcometothejun {set $sourcevar gh3})

      (o117695971_21stcenturyschi {set $sourcevar gh5})
      (o14969115_alltheprettyface {set $sourcevar gh5})
      (o130022187_backround_wolfm {set $sourcevar gh5})
      (o53623336_blueday_darkermy {set $sourcevar gh5})
      (o228973740_blueorchid_thew {set $sourcevar gh5})
      (o388903448_brianstorm_arct {set $sourcevar gh5})
      (o328935211_bulletwithbutte {set $sourcevar gh5})
      (o527229075_deadbolt_thrice {set $sourcevar gh5})
      (o753651986_demons_darkesth {set $sourcevar gh5})
      (o609974155_disconnected_fa {set $sourcevar gh5})
      (o82029789_donewitheverythi {set $sourcevar gh5})
      (o761340494_gammaray_beck {set $sourcevar gh5})
      (o877229297_gratitude_beast {set $sourcevar gh5})
      (o167474051_hurtssogood_joh {set $sourcevar gh5})
      (o512627885_incinerate_soni {set $sourcevar gh5})
      (o503834754_inmyplace_coldp {set $sourcevar gh5})
      (o249084605_judith_aperfect {set $sourcevar gh5})
      (o710534083_la_elliottsmith {set $sourcevar gh5})
      (o37985505_looksthatkill_mo {set $sourcevar gh5})
      (o481072514_maidenmothercro {set $sourcevar gh5})
      (o886145647_makeitwitchu_qu {set $sourcevar gh5})
      (o393907011_mirrorpeople_lo {set $sourcevar gh5})
      (o944962877_nevermissabeat {set $sourcevar gh5})
      (o34582716_noonetodependonl {set $sourcevar gh5})
      (o455877361_cigarettesweddi {set $sourcevar gh5})
      (o243090923_onlyhappywhenit {set $sourcevar gh5})
      (o18981052_pluginbaby_muse {set $sourcevar gh5})
      (o729172370_scatterbrainliv {set $sourcevar gh5})
      (o321631077_sendalittlelove {set $sourcevar gh5})
      (o655786658_shoutitoutloud {set $sourcevar gh5})
      (o699884207_sixdaysaweek_th {set $sourcevar gh5})
      (o405912481_sneakout_rosehi {set $sourcevar gh5})
      (o349695607_sowingseasonyea {set $sourcevar gh5})
      (o416971535_streamlinewoman {set $sourcevar gh5})
      (o128506096_sultansofswing {set $sourcevar gh5})
      (o522146875_sweatingbullets {set $sourcevar gh5})
      (o149784024_sympathyforthed {set $sourcevar gh5})
      (o995197843_whybother_weeze {set $sourcevar gh5})
      (o222573758_womanfromtokyo {set $sourcevar gh5})
      (o22058840_youandme_attacka {set $sourcevar gh5})

      (o711933889_albatross_corro {set $sourcevar ghm})
      (o269802888_allnightmarelon {set $sourcevar ghm})
      (o472882283_amievil_diamond {set $sourcevar ghm})
      (o898576276_armedandready_m {set $sourcevar ghm})
      (o423788674_beautifulmourni {set $sourcevar ghm})
      (o812386635_creepingdeath_m {set $sourcevar ghm})
      (o833637605_demoncleaner_ky {set $sourcevar ghm})
      (o516666305_disposableheroe {set $sourcevar ghm})
      (o113651386_dyerseve_metall {set $sourcevar ghm})
      (o208721033_evil_mercyfulfa {set $sourcevar ghm})
      (o411801337_fadetoblack_met {set $sourcevar ghm})
      (o506535552_fightfirewithfi {set $sourcevar ghm})
      (o253881241_forwhomthebellt {set $sourcevar ghm})
      (o400323518_frantic_metalli {set $sourcevar ghm})
      (o782341988_fuel_metallica {set $sourcevar ghm})
      (o687763028_hellbentforleat {set $sourcevar ghm})
      (o11310423_hitthelights_met {set $sourcevar ghm})
      (o446502184_kingnothing_met {set $sourcevar ghm})
      (o115285029_masterofpuppets {set $sourcevar ghm})
      (o15991833_mommyslittlemons {set $sourcevar ghm})
      (o162981326_motherofmercy_s {set $sourcevar ghm})
      (o578597206_noleafclover_me {set $sourcevar ghm})
      (o106023828_nothingelsematt {set $sourcevar ghm})
      (o639457393_one_metallica {set $sourcevar ghm})
      (o498220892_orion_metallica {set $sourcevar ghm})
      (o662302947_sadbuttrue_meta {set $sourcevar ghm})
      (o737908748_seekdestroy_met {set $sourcevar ghm})
      (o47530871_theblackriver_th {set $sourcevar ghm})
      (o961434526_theshorteststra {set $sourcevar ghm})
      (o485425378_theunforgiven_m {set $sourcevar ghm})
      (o16051956_trappedunderice {set $sourcevar ghm})
      (o714862729_turnthepagelive {set $sourcevar ghm})
      (o305470742_warensemble_sla {set $sourcevar ghm})
      (o786068800_warinsidemyhead {set $sourcevar ghm})
      (o693635466_welcomehomesani {set $sourcevar ghm})
      (o220491534_whereverimayroa {set $sourcevar ghm})
      (o690108890_whiplash_metall {set $sourcevar ghm})

      (o417634710_freya_thesword {set $sourcevar ghsh})
      (o969229771_heyyou_theexies {set $sourcevar ghsh})
      (o398354119_mother_danzig {set $sourcevar ghsh})
      (o334365230_playwithme_extr {set $sourcevar ghsh})
      (o761461265_psychobillyfrea {set $sourcevar ghsh})
      (o160735034_shoutatthedevil {set $sourcevar ghsh})
      (o961090983_takeitoff_thedo {set $sourcevar ghsh})
      (o835206330_unsung_helmet {set $sourcevar ghsh})
      kDataUnhandled
   }
)
{new
   SongSelectPanel
   song_select_panel
   (file
      "song_select.milo")
   (focus song.lst)
   (get_page_up_button
      {if_else
         {==
            {$user get_controller_type}
            kControllerVocals}
         kAction_ShellOption
         kAction_PageUp})
   (get_page_down_button
      {if_else
         {==
            {$user get_controller_type}
            kControllerVocals}
         kAction_ShellOption
         kAction_PageDown})
   (held_buttons
      (kAction_PageUp 0.25)
      (kAction_PageDown 0.25)
      #ifdef HX_WII (kAction_ShellOption 0.25) #endif
      (kAction_Confirm 1.5)
      (kAction_Cancel 1.5))
   (joypad
      (hold_ms 100)
      (repeat_ms 80))
   (song_preview_delay 0.25)
   (mini_leaderboard_rotation_off 8.0)
   (mini_leaderboard_rotation_on 3.0)
   (details_mode FALSE)
   (lb_list
      "")
   (resume_setlist_edit FALSE)
   (should_go_to_art_maker FALSE)
   (reviews_dirty FALSE)
   (trainer_from_main_menu kControllerNone)
   (song_data_mounted
      {$this refresh_top})
   (get_option_button kAction_Option)
   (get_button_for_review
      {if_else
         {==
            {$user get_controller_type}
            kControllerVocals}
         kAction_Right
         kAction_Option})
   (poll
      {if {song.lst is_scrolling}
         {if {exists author_finder}
            {delete author_finder}
         }
      }
      {if {&& {! {song.lst is_scrolling}} {== {{music_library get_highlighted_node} get_node_type} kNodeSong} $probeforfinder}
         {if {song_mgr is_song_mounted {{music_library get_highlighted_node} get_token}}
            {set $probeforfinder FALSE}
            {$this dx_authorfinder}
         }
      }
   )
   (dx_authorpoll
      ($shortname)
      {dx_author_finder_var_reset}
      {meta_performer set_song {symbol $shortname}}
      {set $dx_song_data_processed FALSE}
      {preload_panel dx_load_tip_and_author_finder}
   )
   (dx_authorfinder
      {if_else {&& {! $dx_path_failed} $dx_author_finder_is_enabled {! {gamemode in_mode trainer}}}
         {do
            {if {exists author_finder}
               {delete author_finder}
            }
            {script_task kTaskUISeconds
               (delay 0.75)
               (name author_finder)
               (script
                  {dx_author_finder_var_reset}
                  {meta_performer set_song {{music_library get_highlighted_node} get_token}}
                  {set $dx_song_data_processed FALSE}
                  {preload_panel dx_load_tip_and_author_finder}
                  {if $sourcevar
                     DX_SOURCE_SWITCH
                  }
                  {if_else $sourcevar
                     {dx_song_name_year_title.lbl set_token_fmt $sourcevar}
                     {dx_song_name_year_title.lbl set_token_fmt os_blnk}
                  }
                  {if_else $albumvar
                     {dx_song_name_album.lbl set_token_fmt {sprint $albumvar}}
                     {dx_song_name_album.lbl set_album_name {music_library get_highlighted_node}}
                  }
                  {if_else $authorvar
                     {dx_song_name_album_title.lbl set_token_fmt {sprint $authorvar}}
                     {dx_song_name_album_title.lbl set_token_fmt os_blnk}
                  }
                  {{song_select_panel find song_demo.grp} set_local_scale 0.16 1 0.2}
                  {{song_select_panel find song_demo.grp} set_local_pos 70 0 -120}
                  {if_else $sourcevar
                     {if_else
                        {file_exists
                           #ifdef HX_PS3
                           {sprint "dx/opensource/gen/" $sourcevar ".png_ps3"}
                           #endif
                           #ifdef HX_WII
                           {sprint "dx/opensource/gen/" $sourcevar ".png_wii"}
                           #endif
                           #ifdef HX_XBOX
                           {sprint "dx/opensource/gen/" $sourcevar ".png_xbox"}
                           #endif
                        }
                        {do
                           {{song_select_panel find song_demo.grp} set_showing TRUE}
                           {{song_select_panel find demo.tex} set_bitmap {sprint "dx/opensource/" $sourcevar ".png"}}
                        }
                        {do
                           {{song_select_panel find song_demo.grp} set_showing TRUE}
                           {{song_select_panel find demo.tex} set_bitmap "dx/opensource/custom.png"}
                        }
                     }
                     {{song_select_panel find song_demo.grp} set_showing FALSE}
                  }
               )
            }
         }
         {do
            {dx_song_name_year_title.lbl set_token_fmt os_blnk}
            {dx_song_name_album_title.lbl set_token_fmt os_blnk}
            {dx_song_name_album.lbl set_album_name {music_library get_highlighted_node}}
         }
      }
   )
   (lbl_maker
      ($label $x $y $align)
      {new BandLabel $label}
      {$label set resource_name pentatonic_outline}
      {$label set alt_style_enabled TRUE}
      {$label set alt_font_resource_name instrument_icons_small}
      {if {! {exists song_diff_color.color}}
         {new UIColor song_diff_color.color}
         {song_diff_color.color set color {pack_color 1 1 1}}
      }
      {if {! {exists song_grey_color.color}}
         {new UIColor song_grey_color.color}
         {song_grey_color.color set color {pack_color 0.2 0.2 0.2}}
      }
      {$label set markup TRUE}
      {$label set_showing TRUE}
      {$label set_local_scale 1 1 1}
      {$label set_local_pos $x 0 $y}
      {$label set set_token_fmt $content}
      {$label set text_size 30}
      {$label set alt_text_size 30}
      {$label set alt_z_offset 0}
      {$label set fit_type 2}
      {$label set alignment $align}
      {$label set width 300}
      {$label set height 40}
      {$label set alpha 1}
      ;{$label set alt_text_color song_diff_color.color}
      {live_diffs.grp add_object $label}
   )
   (diff_lbl_maker
      ($label $x $y $align)
      {new BandLabel $label}
      {$label set resource_name pentatonic_outline}
      {$label set alt_style_enabled TRUE}
      {$label set alt_font_resource_name instruments_icons_rings}
      {if {! {exists song_diff_color.color}}
         {new UIColor song_diff_color.color}
         {song_diff_color.color set color {pack_color 1 1 1}}
      }
      {$label set markup TRUE}
      {$label set_showing TRUE}
      {$label set_local_scale 1 1 1}
      {$label set_local_pos $x 0 $y}
      {$label set set_token_fmt $content}
      {$label set text_size 32}
      {$label set alt_text_size 40}
      {$label set alt_z_offset 4}
      {$label set fit_type 2}
      {$label set alignment $align}
      {$label set width 300}
      {$label set height 40}
      {$label set alpha 1}
      ;{$label set alt_text_color song_diff_color.color}
      {live_diffs.grp add_object $label}
   )
   (dx_diff_maker
      ;{live_diffs.grp set_showing TRUE}
      {if {! {exists dx_guitar.lbl}}
         {$this lbl_maker dx_guitar.lbl 196.4 -94.8 kMiddleCenter}
      }
      {if {! {exists dx_guitar_diff.lbl}}
         {$this diff_lbl_maker dx_guitar_diff.lbl 196.4 -95 kMiddleCenter}
      }
      {dx_guitar.lbl set_token_fmt {sprint "<alt>G</alt>"}}

      {if {! {exists dx_bass.lbl}}
         {$this lbl_maker dx_bass.lbl 236 -94.8 kMiddleCenter}
      }
      {if {! {exists dx_bass_diff.lbl}}
         {$this diff_lbl_maker dx_bass_diff.lbl 236 -95 kMiddleCenter}
      }
      {dx_bass.lbl set_token_fmt {sprint "<alt>B</alt>"}}

      {if {! {exists dx_keys.lbl}}
         {$this lbl_maker dx_keys.lbl 316.1 -94.7 kMiddleCenter}
      }
      {if {! {exists dx_keys_diff.lbl}}
         {$this diff_lbl_maker dx_keys_diff.lbl 316 -95 kMiddleCenter}
      }
      {dx_keys.lbl set_token_fmt {sprint "<alt>K</alt>"}}

      {if {! {exists dx_drum.lbl}}
         {$this lbl_maker dx_drum.lbl 276.5 -95 kMiddleCenter}
      }
      {if {! {exists dx_drum_diff.lbl}}
         {$this diff_lbl_maker dx_drum_diff.lbl 276 -95 kMiddleCenter}
      }
      {dx_drum.lbl set_token_fmt {sprint "<alt>D</alt>"}}

      {if {! {exists dx_vocals.lbl}}
         {$this lbl_maker dx_vocals.lbl 356.6 -95 kMiddleCenter}
      }
      {if {! {exists dx_vocals_diff.lbl}}
         {$this diff_lbl_maker dx_vocals_diff.lbl 356.4 -95 kMiddleCenter}
      }
      {dx_vocals.lbl set_token_fmt {sprint "<alt>V</alt>"}}
      

      {if {! {exists dx_real_guitar.lbl}}
         {$this lbl_maker dx_real_guitar.lbl 196.6 -134.8 kMiddleCenter}
      }
      {if {! {exists dx_real_guitar_diff.lbl}}
         {$this diff_lbl_maker dx_real_guitar_diff.lbl 196 -135 kMiddleCenter}
      }
      {dx_real_guitar.lbl set_token_fmt {sprint "<alt>g</alt>"}}

      {if {! {exists dx_real_bass.lbl}}
         {$this lbl_maker dx_real_bass.lbl 236.6 -134.8 kMiddleCenter}
      }
      {if {! {exists dx_real_bass_diff.lbl}}
         {$this diff_lbl_maker dx_real_bass_diff.lbl 236 -135 kMiddleCenter}
      }
      {dx_real_bass.lbl set_token_fmt {sprint "<alt>b</alt>"}}

      {if {! {exists dx_real_keys.lbl}}
         {$this lbl_maker dx_real_keys.lbl 316.5 -134.6 kMiddleCenter}
      }
      {if {! {exists dx_real_keys_diff.lbl}}
         {$this diff_lbl_maker dx_real_keys_diff.lbl 316 -135 kMiddleCenter}
      }
      {dx_real_keys.lbl set_token_fmt {sprint "<alt>k</alt>"}}

      {if {! {exists dx_real_drum.lbl}}
         {$this lbl_maker dx_real_drum.lbl 276.6 -135 kMiddleCenter}
      }
      {if {! {exists dx_real_drum_diff.lbl}}
         {$this diff_lbl_maker dx_real_drum_diff.lbl 276 -135 kMiddleCenter}
      }
      {dx_real_drum.lbl set_token_fmt {sprint "<alt>d</alt>"}}

      {if {! {exists dx_real_vocals.lbl}}
         {$this lbl_maker dx_real_vocals.lbl 356.1 -135.1 kMiddleCenter}
         {dx_real_vocals.lbl set alt_font_resource_name instruments_icons_rings}
      }
      {if {! {exists dx_real_vocals_diff.lbl}}
         {$this diff_lbl_maker dx_real_vocals_diff.lbl 356 -135 kMiddleCenter}
      }
      {dx_real_vocals.lbl set_token_fmt {sprint "<alt>2</alt>"}}

      {if {! {exists dx_song_name_length.lbl}}
         {$this lbl_maker dx_song_name_length.lbl 374 -63 kMiddleRight}
      }
      {if {! {exists dx_song_name_length_title.lbl}}
         {$this lbl_maker dx_song_name_length_title.lbl 294 -63 kMiddleLeft}
      }
      {dx_song_name_length.lbl set alt_font_resource_name pentatonic_outline}
      {dx_song_name_length_title.lbl set alt_text_size 13}
      {dx_song_name_length_title.lbl set text_size 13}
      {dx_song_name_length_title.lbl set_token_fmt {sprint " "}}
      {dx_song_name_length.lbl set text_size 13}
      {dx_song_name_length.lbl set alt_text_size 13}


      {if {! {exists dx_song_name_album.lbl}}
         {$this lbl_maker dx_song_name_album.lbl 275 -22 kMiddleCenter}
      }
      {if {! {exists dx_song_name_album_title.lbl}}
         {$this lbl_maker dx_song_name_album_title.lbl 275 -32 kMiddleCenter}
      }
      {dx_song_name_album.lbl set alt_font_resource_name pentatonic_outline}
      {dx_song_name_album.lbl set text_size 13}
      {dx_song_name_album.lbl set alt_text_size 13}
      {dx_song_name_album_title.lbl set_token_fmt $sourcevar}
      {dx_song_name_album_title.lbl set text_size 13}
      {dx_song_name_album_title.lbl set alt_text_size 13}
      {dx_song_name_album.lbl set width 200}
      {dx_song_name_album_title.lbl set width 200}
      {dx_song_name_album.lbl set height 10}
      {dx_song_name_album_title.lbl set height 10}

      {if {! {exists dx_song_name_genre.lbl}}
         {$this lbl_maker dx_song_name_genre.lbl 374 -45 kMiddleRight}
      }
      {if {! {exists dx_song_name_genre_title.lbl}}
         {$this lbl_maker dx_song_name_genre_title.lbl 177 -45 kMiddleLeft}
      }
      {dx_song_name_genre.lbl set alt_font_resource_name pentatonic_outline}
      {dx_song_name_genre.lbl set text_size 13}
      {dx_song_name_genre.lbl set alt_text_size 13}
      {dx_song_name_genre_title.lbl set_token_fmt {sprint "Genre:"}}
      {dx_song_name_genre_title.lbl set text_size 13}
      {dx_song_name_genre_title.lbl set alt_text_size 13}

      {if {! {exists dx_song_name_year.lbl}}
         {$this lbl_maker dx_song_name_year.lbl 247 -63 kMiddleRight}
      }
      {if {! {exists dx_song_name_year_title.lbl}}
         {$this lbl_maker dx_song_name_year_title.lbl 177 -63 kMiddleLeft}
      }
      {dx_song_name_year.lbl set alt_font_resource_name pentatonic_outline}
      {dx_song_name_year.lbl set text_size 13}
      {dx_song_name_year.lbl set alt_text_size 13}
      {dx_song_name_year_title.lbl set_token_fmt {sprint "Year:"}}
      {dx_song_name_year_title.lbl set text_size 13}
      {dx_song_name_year_title.lbl set alt_text_size 13}

   )
   (dx_diff_setter
      {set $probeforfinder TRUE}
      {{song_select_panel find song_demo.lbl} set_showing FALSE}
      {if_else $dx_author_finder_is_enabled
         {do
            {dx_song_name_album_title.lbl set_token_fmt lb_waiting}
            {dx_song_name_album.lbl set_token_fmt lb_waiting}
            {dx_song_name_year_title.lbl set_token_fmt lb_waiting}
         }
         {do
            {dx_song_name_year_title.lbl set_token_fmt os_blnk}
            {dx_song_name_album_title.lbl set_token_fmt os_blnk}
            {dx_song_name_album.lbl set_album_name {music_library get_highlighted_node}}
         }
      }
      {dx_song_name_genre_title.lbl
         set_token_fmt
         {{music_library get_highlighted_node} genre}
      }
      {dx_song_name_genre.lbl set_song_year {{music_library get_highlighted_node} year_released} {{music_library get_highlighted_node} year_released}}
      ;song_length
      {dx_song_name_length.lbl
         set_token_fmt
         title_length_fmt
         ((title
               "")
            (minutes
               {int
                  {/ {{music_library get_highlighted_node} get_total_ms} 60000}})
            (seconds
               {int
                  {/
                     {mod {{music_library get_highlighted_node} get_total_ms} 60000}
                     1000}})
            (ms
               {mod {{music_library get_highlighted_node} get_total_ms} 1000}))}

      {dx_guitar_diff.lbl set_token_fmt
         {if_else {guitar.idd get has_part}
            {switch {guitar.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_guitar.lbl set_token_fmt
         {if_else {guitar.idd get has_part}
            "<alt>C</alt>"
            "<alt>C</alt>"
         }
      }
      {if_else {guitar.idd get has_part}
         {dx_guitar.lbl set alt_text_color song_diff_color.color}
         {dx_guitar.lbl set alt_text_color song_grey_color.color}
      }
      {dx_bass_diff.lbl set_token_fmt
         {if_else {bass.idd get has_part}
            {switch {bass.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_bass.lbl set_token_fmt
         {if_else {bass.idd get has_part}
            "<alt>T</alt>"
            "<alt>T</alt>"
         }
      }
      {if_else {bass.idd get has_part}
         {dx_bass.lbl set alt_text_color song_diff_color.color}
         {dx_bass.lbl set alt_text_color song_grey_color.color}
      }
      {dx_keys_diff.lbl set_token_fmt
         {if_else {keys.idd get has_part}
            {switch {keys.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_keys.lbl set_token_fmt
         {if_else {keys.idd get has_part}
            "<alt>t</alt>"
            "<alt>t</alt>"
         }
      }
      {if_else {keys.idd get has_part}
         {dx_keys.lbl set alt_text_color song_diff_color.color}
         {dx_keys.lbl set alt_text_color song_grey_color.color}
      }
      {dx_drum_diff.lbl set_token_fmt
         {if_else {drum.idd get has_part}
            {switch {drum.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_drum.lbl set_token_fmt
         {if_else {drum.idd get has_part}
            "<alt>E</alt>"
            "<alt>E</alt>"
         }
      }
      {if_else {drum.idd get has_part}
         {dx_drum.lbl set alt_text_color song_diff_color.color}
         {dx_drum.lbl set alt_text_color song_grey_color.color}
      }
      {dx_vocals_diff.lbl set_token_fmt
         {switch {harmony.idd get num_vocal_parts}
            ((1 2 3)
               {switch {harmony.idd get difficulty}
                  DX_INS_DIFF_MAP
               }
            )
            (0 " ")
         }
      }
      {switch {harmony.idd get num_vocal_parts}
         (0 {dx_vocals.lbl set alt_text_color song_grey_color.color})
         {dx_vocals.lbl set alt_text_color song_diff_color.color}
      }
      {dx_vocals.lbl set_token_fmt
         {switch {harmony.idd get num_vocal_parts}
            (0 {sprint "<alt>I</alt>"})
            (1 {sprint "<alt>I</alt>"})
            (2 {sprint "<alt>c</alt>"})
            (3 {sprint "<alt>e</alt>"})
         }
      }


      {dx_real_guitar_diff.lbl set_token_fmt
         {if_else {guitar_pro.idd get has_part}
            {switch {guitar_pro.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_real_guitar.lbl set_token_fmt
         {if_else {guitar_pro.idd get has_part}
            "<alt>U</alt>"
            "<alt>U</alt>"
         }
      }
      {if_else {guitar_pro.idd get has_part}
         {dx_real_guitar.lbl set alt_text_color song_diff_color.color}
         {dx_real_guitar.lbl set alt_text_color song_grey_color.color}
      }
      {dx_real_bass_diff.lbl set_token_fmt
         {if_else {bass_pro.idd get has_part}
            {switch {bass_pro.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_real_bass.lbl set_token_fmt
         {if_else {bass_pro.idd get has_part}
            "<alt>A</alt>"
            "<alt>A</alt>"
         }
      }
      {if_else {bass_pro.idd get has_part}
         {dx_real_bass.lbl set alt_text_color song_diff_color.color}
         {dx_real_bass.lbl set alt_text_color song_grey_color.color}
      }
      {dx_real_keys_diff.lbl set_token_fmt
         {if_else {keys_pro.idd get has_part}
            {switch {keys_pro.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_real_keys.lbl set_token_fmt
         {if_else {keys_pro.idd get has_part}
            "<alt>i</alt>"
            "<alt>i</alt>"
         }
      }
      {if_else {keys_pro.idd get has_part}
         {dx_real_keys.lbl set alt_text_color song_diff_color.color}
         {dx_real_keys.lbl set alt_text_color song_grey_color.color}
      }
      {dx_real_drum_diff.lbl set_token_fmt
         {if_else {drum.idd get has_part}
            {switch {drum.idd get difficulty}
               DX_INS_DIFF_MAP
            }
            " "
         }
      }
      {dx_real_drum.lbl set_token_fmt
         {if_else {drum.idd get has_part}
            "<alt>R</alt>"
            "<alt>R</alt>"
         }
      }
      {if_else {drum.idd get has_part}
         {dx_real_drum.lbl set alt_text_color song_diff_color.color}
         {dx_real_drum.lbl set alt_text_color song_grey_color.color}
      }
      {dx_real_vocals_diff.lbl set_token_fmt
         {switch {drum_pro.idd get difficulty}
            DX_INS_DIFF_MAP
         }
      }
      ;{switch {harmony.idd get num_vocal_parts}
      ;   ((0 1) {dx_real_vocals.lbl set alt_text_color song_grey_color.color})
      ;   {dx_real_vocals.lbl set alt_text_color song_diff_color.color}
      ;}
      {dx_real_vocals.lbl set_token_fmt {sprint "<alt>U</alt>"}}
      ;harms below, replacing with band
      ;{dx_real_vocals_diff.lbl set_token_fmt
      ;   {switch {harmony.idd get num_vocal_parts}
      ;      ((2 3)
      ;         {switch {harmony.idd get difficulty}
      ;            DX_INS_DIFF_MAP
      ;         }
      ;      )
      ;      ((0 1) " ")
      ;   }
      ;}
      ;{switch {harmony.idd get num_vocal_parts}
      ;   ((0 1) {dx_real_vocals.lbl set alt_text_color song_grey_color.color})
      ;   {dx_real_vocals.lbl set alt_text_color song_diff_color.color}
      ;}
      ;{dx_real_vocals.lbl set_token_fmt
      ;   {switch {harmony.idd get num_vocal_parts}
      ;      (0 {sprint "<alt>I</alt>"})
      ;      (1 {sprint "<alt>I</alt>"})
      ;      (2 {sprint "<alt>c</alt>"})
      ;      (3 {sprint "<alt>e</alt>"})
      ;   }
      ;}
   )
   (handle_to_task
      {script_task kTaskSeconds
         (name event_inactivity_backout)
         (delay 60)
         (script
            ;{dx_passive_messenger_symbol "PICK A GODDAMN SONG"}
            {ui abstract_wipe}
            {ui goto_screen meta_loading_main_screen}
         )
      }
   )
   (enter
      {if_else {&& $dx_event_mode {! $dx_in_show_flow} {! $dx_prep_show_flow} {! $dx_playing_a_show}}
         {if_else {exists event_inactivity_backout}
            {do
               {delete event_inactivity_backout}
               {$this handle_to_task}
            }
            {$this handle_to_task}
         }
         kDataUnhandled
      }
      {set $highscore_tracker ()}
      {resize $highscore_tracker 0}
      {push_back $highscore_tracker (fake_name_goes_here_lol faker)}
      {$this iterate UIList $l {$l set scroll_time 0}}
      {net_sync set_ui_state kNetUI_MusicLibrary}
      {set
         [should_go_to_art_maker]
         FALSE}
      {overshell add_sink $this}
      {input_mgr
         add_sink
         $this
         (input_user_left)}
      {rock_central
         add_sink
         $this
         (server_status_changed)}
      {platform_mgr
         add_sink
         $this
         (signin_changed profile_swapped storage_changed)}
      {music_library on_enter}
      {song.lst set_provider music_library}
      {music_library push_highlight_to_screen}
      {with
         song_select_details
         {leaderboard_types.lst
            set_data
            (lb_global lb_friends)
            0
            TRUE}
         {leaderboard_instruments.lst
            set_data
            (ORDERED_SCORE_TYPE_SYMBOLS)
            0
            TRUE}}
      {song.lst reveal}
      {if_else
         {&&
            [details_mode]
            {input_mgr has_user}}
         {$this
            show_details
            {input_mgr get_user}}
         {$this hide_details}}
      {setlist.lst
         set_provider
         {music_library get setlist_provider}}
      {$this refresh_setlist}
      {$this
         refresh_sort
         [waiting_for_sort]}
      {dx_song_select_enter}
      #ifdef HX_WII
      {rnd set_in_game TRUE}
      #endif
      {if $dx_prep_show_flow
         {music_library.lbl set text_token dx_play_a_show}
      }
      {$this refresh_selected_song}
   )
   #define DX_PLAY_SET_SONG
   (
      {do
         {set $poopie ()}
         {resize $poopie 0}
         {push_back $poopie {{music_library get_highlighted_node} get_token}}
         {set $poopie {array $poopie}}
         {set $picked_song {elem $poopie 0}}
         {song.lst refresh}
         {set $num {random_int 0 {song.lst num_data}}}
         {song.lst set_selected_simulate_scroll $num}
         {set $dx_song_picked TRUE}
      }
   )
   #define DX_PLAY_ROLL_SONG
   (
      {do
         {song.lst refresh}
         {set $num {random_int 0 {song.lst num_data}}}
         {song.lst set_selected_simulate_scroll $num}
      }
   )
   (pick_a_song
      {do
         {set $num_tries 8}
         {set $dx_song_picked FALSE}
         {foreach_int $i 0 $num_tries
            {if_else {&& {! $dx_song_picked} {== {{music_library get_highlighted_node} get_node_type} kNodeSong}}
               DX_PLAY_SET_SONG
               DX_PLAY_ROLL_SONG
            }
            {if {&& {== $num_tries $i} {! $dx_song_picked}}
               {set $picked_song {random_elem $rb3_songlist}}
            }
         }
         $picked_song
      }
   )
   (TRANSITION_COMPLETE_MSG
      {dx_restore_online_transitions}
      {dx_song_select_endurance}
      {if
         [resume_setlist_edit]
         {ui push_screen edit_setlist_screen}
         {set
            [resume_setlist_edit]
            FALSE}}
      {if
         [should_go_to_art_maker]
         {ui abstract_wipe}
         {ui goto_screen patch_select_practice_space_screen}
         {set
            [should_go_to_art_maker]
            FALSE}})
   (exit
      ;{if $dx_event_mode
      ;   {if {exists event_inactivity_backout}
      ;      {delete event_inactivity_backout}
      ;   }
      ;}
      {set
         [details_mode]
         FALSE}
      {music_library on_exit}
      {input_mgr remove_sink $this input_user_left}
      {overshell remove_sink $this}
      {session remove_sink $this}
      {rock_central remove_sink $this server_status_changed}
      {platform_mgr remove_sink $this signin_changed}
      {platform_mgr remove_sink $this profile_swapped}
      {platform_mgr remove_sink $this storage_changed}
      #ifdef HX_WII
      {rnd set_in_game FALSE}
      #endif)
   (BUTTON_DOWN_MSG
      {if_else {&& $dx_event_mode {! $dx_in_show_flow} {! $dx_prep_show_flow} {! $dx_playing_a_show}}
         {if_else {exists event_inactivity_backout}
            {do
               {delete event_inactivity_backout}
               {$this handle_to_task}
            }
            {$this handle_to_task}
         }
         kDataUnhandled
      }
      {if_else
         {ui in_transition}
         TRUE
         {if_else
            [details_mode]
            {handle_ret
               ($this details_mode_button_down $user $raw_button $action $pad_num)}
            {handle_ret
               ($this main_mode_button_down $user $raw_button $action $pad_num)}}})
   (on_button_held
      ($user $raw_button $action $pad_num)
      {if_else
         {ui in_transition}
         TRUE
         {if_else
            [details_mode]
            {handle_ret
               ($this details_mode_button_down $user $raw_button $action $pad_num)}
            {handle_ret
               ($this main_mode_button_held $user $raw_button $action $pad_num)}}})
   (details_buttons
      (details_1.btn details_2.btn details_3.btn details_4.btn details_5.btn))
   (highlight_button
      ($token)
      {foreach
         $button
         [details_buttons]
         {set
            $button
            {song_select_details find $button}}
         {if
            {==
               {$button get text_token}
               $token}
            {$this set_focus $button}}})
   (find_button
      ($token)
      {do
         ($ret
            "")
         {set
            $ret
            ""}
         {foreach
            $button
            [details_buttons]
            {set
               $button
               {song_select_details find $button}}
            {if
               {==
                  {$button get text_token}
                  $token}
               {set $ret $button}}}
         $ret})
   (SELECT_MSG
      {unless {|| $dx_customizer $dx_auto_endurance}
         {with
            song_select_details
            {cond
               ({== $component details_1.btn}
                  {music_library select_highlighted_node $user}
                  {song_select_panel hide_details})
               ({==
                     $component
                     {song_select_panel get lb_list}}
                  {with
                     song_select_panel
                     {$this
                        select_lb_row
                        {[lb_list]
                           selected_pos}
                        $user}})
               ({==
                     {$component get text_token}
                     review_song}
                  {buttons.grp set_showing FALSE}
                  {details_bottom.grp set_showing FALSE}
                  {review.grp set_showing TRUE}
                  {song_select_panel
                     set_focus
                     {$this
                        find
                        {sprintf
                           "review_%i.rvw"
                           {review.rvw get score}}}})
               ({==
                     {$component get text_token}
                     delete_song}
                  {if_else
                     {session_mgr is_local}
                     {do
                        {delete_content_confirm_screen
                           set
                           content
                           #ifdef HX_WII
                           {{music_library get_highlighted_node}
                              id}
                           #else
                           {song_mgr
                              content_name
                              {{music_library get_highlighted_node}
                                 id}}
                           #endif
                         }
                        {ui push_screen delete_content_confirm_screen}}
                     {do
                        {push_basic_confirm_dialog_small delete_song_no_online}}})
               ({==
                     {$component get text_token}
                     leaderboard}
                  {buttons.grp set_showing FALSE}
                  {details_bottom.grp set_showing FALSE}
                  {performance.grp set_showing TRUE}
                  {if_else
                     {==
                        {{music_library get_highlighted_node}
                           get_node_type}
                        kNodeSetlist}
                     {do
                        {song_select_panel
                           set
                           lb_list
                           {object performance.lst}}
                        {leaderboard_instruments.lst set_showing FALSE}
                        {leaderboard_help.ihp set_showing FALSE}}
                     {do
                        {song_select_panel
                           set
                           lb_list
                           {object performance.lst}}
                        {leaderboard_instruments.lst set_showing TRUE}
                        {leaderboard_help.ihp set_showing TRUE}
                        {set
                           $score_sym
                           {elem
                              (SCORE_TYPE_SYMBOLS)
                              {music_library active_score_type}}}
                        {set $score_index 0}
                        {find_elem
                           (ORDERED_SCORE_TYPE_SYMBOLS)
                           $score_sym
                           $score_index}
                        {leaderboard_instruments.lst set_selected $score_index}}}
                  {with
                     song_select_panel
                     {$this refresh_leaderboard $user}
                     {$this
                        set_focus
                        [lb_list]}})
               ({==
                     {$component get text_token}
                     practice_or_train_song}
                  {cond
                     ({!
                           {gamemode get library_trainers_allowed}}
                        {push_basic_confirm_dialog no_trainers_in_some_modes})
                     ({!
                           {session_mgr is_local}}
                        {push_basic_confirm_dialog no_trainers_when_online})
                     {submenu_buttons.grp set_showing TRUE}
                     {buttons.grp set_showing FALSE}
                     {submenu01.btn set text_token practice_song}
                     {submenu02.btn set text_token train_song}
                     {song_select_panel set_focus submenu01.btn}})
               ({==
                     {$component get text_token}
                     practice_song}
                  {cond
                     ({!
                           {gamemode get library_trainers_allowed}}
                        {push_basic_confirm_dialog no_trainers_in_some_modes})
                     ({!
                           {session_mgr is_local}}
                        {push_basic_confirm_dialog no_trainers_when_online})
                     {gamemode set_mode qp_practice}
                     {training_mgr set_user $user}
                     {critical_user_listener set_critical_user $user}
                     {training_mgr set_return_info song_select_screen pause_quit}
                     {practice_sel_section_panel clear_state}
                     {music_library clear_setlist}
                     {music_library set_making_setlist FALSE}
                     {music_library select_highlighted_node $user}
                     {unless
                        {music_library setlist_size}
                        {gamemode set_mode qp_coop}}})
               ({==
                     {$component get text_token}
                     train_song}
                  {cond
                     ({!
                           {gamemode get library_trainers_allowed}}
                        {push_basic_confirm_dialog no_trainers_in_some_modes})
                     ({!
                           {session_mgr is_local}}
                        {push_basic_confirm_dialog no_trainers_when_online})
                     ({!
                           {profile_mgr get_profile $user}}
                        {push_basic_confirm_dialog trainer_must_signin})
                     {cond
                        ({==
                              {$user get_controller_type}
                              kControllerKeys}
                           {gamemode set_mode pro_song_lessons_keyboard})
                        ({==
                              {$user get_controller_type}
                              kControllerRealGuitar}
                           {gamemode set_mode pro_song_lessons_real_guitar})}
                     {training_mgr set_user $user}
                     {training_mgr set_minimum_difficulty kDifficultyEasy}
                     {training_mgr set_return_info song_select_screen pause_quit}
                     {critical_user_listener set_critical_user $user}
                     {song_select_panel set trainer_from_main_menu kControllerNone}
                     {music_library clear_setlist}
                     {music_library set_making_setlist FALSE}
                     {music_library select_highlighted_node $user}})
               ({==
                     {$component get text_token}
                     overshell_gamercard}
                  {{music_library get_highlighted_node}
                     view_gamercard
                     $user})
               ({==
                     {$component get text_token}
                     edit_setlist}
                  {if
                     {edit_setlist_panel
                        edit_setlist
                        $user
                        {{music_library get_highlighted_node}
                           get_setlist}}
                     {song_select_panel hide_details}
                     {ui push_screen edit_setlist_screen}})
               ({==
                     {$component get text_token}
                     delete_setlist}
                  {ui push_screen delete_setlist_confirm_screen})
               ({==
                     {$component get text_token}
                     share_setlist}
                  {do
                     ($item
                        {music_library get_highlighted_node})
                     ($setlist
                        {$item get_setlist})
                     {$setlist set_shared TRUE}
                     {{$setlist get_owner_profile}
                        setlist_changed
                        $setlist}
                     DX_AUTOSAVE
                     {$component set text_token unshare_setlist}})
               ({==
                     {$component get text_token}
                     unshare_setlist}
                  {do
                     ($item
                        {music_library get_highlighted_node})
                     ($setlist
                        {$item get_setlist})
                     {$setlist set_shared FALSE}
                     {{$setlist get_owner_profile}
                        setlist_changed
                        $setlist}
                     DX_AUTOSAVE
                     {$component set text_token share_setlist}})
               kDataUnhandled}}})
   (refresh_leaderboard
      ($user)
      {do
         ($item
            {music_library get_highlighted_node})
         ($id
            {$item id})
         ($type
            {{song_select_details find leaderboard_types.lst}
               selected_data})
         {$this lb_in_progress}
         {set $score_index 0}
         {find_elem
            (SCORE_TYPE_SYMBOLS)
            {{song_select_details find leaderboard_instruments.lst}
               selected_sym}
            $score_index}
         {[lb_list]
            set_provider
            {$this get_leaderboard $user $score_index $id $type}}})
   (details_mode_button_down
      ($user $raw_button $action $pad_num)
      {cond
         ({== $action kAction_ViewModify}
            {with
               song_select_details
               {if
                  {performance.grp showing}
                  {leaderboard_types.lst scroll 1 $user}}})
         ({== $action kAction_ShellOption}
            {with
               song_select_details
               {cond
                  ({&&
                        {performance.grp showing}
                        {leaderboard_instruments.lst showing}}
                     {leaderboard_instruments.lst scroll 1 $user})
                  ({details_bottom.grp showing}
                     {instruments.lst scroll 1 $user})}})
         (#ifdef HX_WII
            {==
               $action
               {$this get_option_button}}
            #else
            {== $action kAction_Option}
            #endif
            {$this hide_details})
         #ifdef HX_WII
         ({'||'
               {== $action kAction_Left}
               {== $action kAction_Right}}
            {do
               ($node
                  {music_library get_highlighted_node})
               ($type
                  {$node get_node_type})
               ($new_score
                  {if_else
                     {== $action kAction_Left}
                     {mod
                        {-
                           {header_review.rvw get score}
                           1}
                        6}
                     {mod
                        {'+'
                           {header_review.rvw get score}
                           1}
                        6}})
               {if
                  {&&
                     {!
                        [waiting_for_sort]}
                     {song_review.grp showing}}
                  {{profile_mgr get_primary_profile}
                     set_song_review
                     {$node id}
                     $new_score}
                  {$node update_review}
                  {header_review.rvw set_values $new_score TRUE}
                  {set
                     [reviews_dirty]
                     TRUE}}})
         #endif
         ({== $action kAction_Cancel}
            {with
               song_select_details
               {cond
                  ({submenu_buttons.grp showing}
                     {submenu_buttons.grp set_showing FALSE}
                     {buttons.grp set_showing TRUE}
                     {if_else
                        {==
                           {submenu01.btn get text_token}
                           delete_song_confirm}
                        {song_select_panel highlight_button delete_song}
                        {song_select_panel highlight_button practice_or_train_song}})
                  ({review.grp showing}
                     {buttons.grp set_showing TRUE}
                     {details_bottom.grp set_showing TRUE}
                     {review.grp set_showing FALSE}
                     {song_select_panel highlight_button review_song})
                  ({==
                        {song_select_panel focus_name}
                        "performance.lst"}
                     {performance.grp set_showing FALSE}
                     {buttons.grp set_showing TRUE}
                     {details_bottom.grp
                        set_showing
                        {!
                           {music_library viewing_setlists}}}
                     {song_select_panel highlight_button leaderboard})
                  {song_select_panel hide_details}}})
         ({&&
               {== $action kAction_Confirm}
               {startswith
                  {$this focus_name}
                  "review_"}}
            {with
               song_select_details
               {do
                  ($score
                     {{$this
                           find
                           {song_select_panel focus_name}}
                        get
                        score})
                  {if
                     {!=
                        $score
                        {{music_library get_highlighted_node}
                           get_review}}
                     {{profile_mgr get_primary_profile}
                        set_song_review
                        {{music_library get_highlighted_node}
                           id}
                        $score}
                     {if
                        {{music_library get_highlighted_node}
                           update_review}
                        {{song_select_panel find header_review.rvw}
                           set_values
                           $score
                           TRUE}
                        {music_library re_sort by_review}}}
                  {review.rvw set score $score}
                  {buttons.grp set_showing TRUE}
                  {review.grp set_showing FALSE}
                  {song_select_panel highlight_button review_song}}})
         ({==
               {$this focus_name}
               "performance.lst"}
            {with
               song_select_details
               {switch
                  $action
                  (kAction_Up
                     {if_else
                        {&&
                           {performance.lst num_data}
                           {==
                              {performance.lst selected_data}
                              0}
                           {song_select_panel scroll_lb_up}}
                        {song_select_panel lb_in_progress}
                        kDataUnhandled})
                  (kAction_Down
                     {if_else
                        {&&
                           {performance.lst num_data}
                           {==
                              {performance.lst selected_data}
                              {-
                                 {performance.lst num_data}
                                 1}}
                           {song_select_panel scroll_lb_down}}
                        {song_select_panel lb_in_progress}
                        kDataUnhandled})
                  #ifdef HX_PS3
                  (kAction_Confirm TRUE)
                  #endif
                  #ifdef HX_WII
                  (kAction_Confirm TRUE)
                  #endif
                  kDataUnhandled}})
         ({== $action kAction_Up}
            {do
               ($ret FALSE)
               ($focused
                  {song_select_details
                     find
                     {$this focus_name}})
               {if
                  {==
                     {$focused name}
                     "submenu02.btn"}
                  {set
                     $ret
                     {song_select_details
                        find
                        "submenu01.btn"}}}
               {if
                  {! $ret}
                  {foreach
                     $button
                     [details_buttons]
                     {set
                        $button
                        {song_select_details find $button}}
                     {if
                        {==
                           {$button get nav_down}
                           $focused}
                        {set $ret $button}}}}
               {if
                  {! $ret}
                  {foreach_int
                     $i
                     0
                     6
                     {do
                        ($rvw
                           {song_select_details
                              find
                              {sprintf
                                 "review_%i.rvw"
                                 $i}
                              TRUE})
                        {if
                           {==
                              {$rvw get nav_down}
                              $focused}
                           {set $ret $rvw}
                           {set $i 5}}}}}
               {if_else
                  $ret
                  {do
                     {play_instr_sfx $user button_toggle}
                     {$this set_focus $ret}}
                  kDataUnhandled}})
         (TRUE kDataUnhandled)})
   (main_mode_button_down
      ($user $raw_button $action $pad_num)
      {cond
         ({&&
               {== $action kAction_ViewModify}
               {!
                  {song.lst is_scrolling}}}
            {unless
               {music_library viewing_setlists}
               {{music_library get view_settings_provider}
                  refresh_all_settings}
               {song_select_filter_panel filter_enter}})
         ({== $action kAction_Cancel}
            {if_else $dx_prep_show_flow
               {do
                  {set $dx_in_show_flow FALSE}
                  {set $dx_prep_show_flow FALSE}
                  {set $dx_playing_a_show FALSE}
                  {overshell end_override_flow kOverrideFlow_SongSettings TRUE}
                  {ui sync_screen meta_loading_main_screen 0}
               }
            {cond
               ({&&
                     {music_library get_making_setlist}
                     {>
                        {music_library setlist_size}
                        0}}
                  {music_library remove_last_song_from_setlist})
               ({&&
                     {music_library get_making_setlist}
                     {!
                        {music_library get_forced_setlist}}}
                  {music_library set_making_setlist FALSE})
               ({session_mgr is_local}
                  {ui
                     go_back_screen
                     {music_library get_back_screen}
                     $user})
               ({is_leader_local}
                  {if_else
                     {machine_mgr all_machines_have_same_net_ui_state}
                     {ui
                        sync_screen
                        {music_library get_back_screen}
                        0}
                     {ui_event_mgr trigger_event remote_not_ready}})
               (TRUE
                  {ui_event_mgr trigger_event remote_exit})}})
         ({&&
               {== $action kAction_Confirm}
               {!
                  {song.lst is_scrolling}}}
            {unless
               {'||'
                  {ui in_transition}
                  [waiting_for_sort]}
               {do
                  ($type
                     {{music_library get_highlighted_node}
                        get_node_type})
                  {if
                     {'||'
                        {== $type kNodeFunction}
                        {== $type kNodeSetlist}
                        {!
                           {music_library viewing_setlists}}}
                     {play_instr_sfx $user button_select}
                     {if {== {{music_library get_highlighted_node} get_node_type} kNodeSong}
                        {if {> {{music_library get_highlighted_node} get_score} 0}
                           {foreach $entry $highscore_tracker
                              {if {!= {elem $entry 0} {{music_library get_highlighted_node} get_token}} ;check if the state isnt in the list
                                 {set $pushtime_highscore TRUE} ;get ready to push it
                              }
                           }
                           {foreach $entry $highscore_tracker
                              {if {== {elem $entry 0} {{music_library get_highlighted_node} get_token}} ;check the list again, and if it is in the list
                                 {set $pushtime_highscore FALSE} ;dont push it
                              }
                           }
                           {if $pushtime_highscore ;if we need to push
                              {push_back $highscore_tracker ({{music_library get_highlighted_node} get_token} {{music_library get_highlighted_node} get_score})} ;push_back a new state into the array
                           }                  
                           {set $highscore_tracker {array $highscore_tracker}}
                           ;{dx_passive_messenger_symbol {sprint $highscore_tracker}}
                        }
                     }
                     {music_library select_highlighted_node $user}}}})
         ({&&
               #ifdef HX_WII
               {==
                  $action
                  {$this get_option_button}}
               #else
               {== $action kAction_Option}
               #endif
               {!
                  {song.lst is_scrolling}}}
            {do
               ($type
                  {{music_library get_highlighted_node}
                     get_node_type})
               {if
                  {&&
                     {!
                        [waiting_for_sort]}
                     {'||'
                        {== $type kNodeSong}
                        {== $type kNodeSetlist}}}
                  {if_else $dx_event_mode
                     kDataUnhandled
                     {$this show_details $user}
                  }
               }
            }
         )
         ({&&
               #ifdef HX_WII
               {'||'
                  {'||'
                     {==
                        $action
                        {$this get_option_button}}
                     {== $action kAction_Right}}
                  {== $action kAction_Left}}
               #else
               {== $action kAction_ShellOption}
               #endif
               {!
                  {song.lst is_scrolling}}}
            {do
               ($node
                  {music_library get_highlighted_node})
               ($type
                  {$node get_node_type})
               #ifdef HX_WII
               ($new_score
                  {if_else
                     {== $action kAction_Left}
                     {mod
                        {-
                           {header_review.rvw get score}
                           1}
                        6}
                     {mod
                        {'+'
                           {header_review.rvw get score}
                           1}
                        6}})
               #else
               ($new_score
                  {mod
                     {'+'
                        {header_review.rvw get score}
                        1}
                     6})
               #endif
               {if
                  {&&
                     {!
                        [waiting_for_sort]}
                     {song_review.grp showing}}
                  {{profile_mgr get_primary_profile}
                     set_song_review
                     {$node id}
                     $new_score}
                  {$node update_review}
                  {header_review.rvw set_values $new_score TRUE}
                  {set
                     [reviews_dirty]
                     TRUE}}})
         ({&&
               #ifdef HX_WII
               {==
                  $action
                  {$this get_page_down_button}}
               #else
               {== $action kAction_PageDown}
               #endif
               {!
                  {song.lst is_scrolling}}}
            {unless
               [waiting_for_sort]
               {song.lst set_scroll_user $user}
               {if_else {&& {music_library can_headers_be_selected} $sort_check_2}
                  {do
                     {song.lst set_selected_simulate_scroll {+ {song.lst selected_pos} 1}}
                     {set $pause_scroll_sound TRUE}
                     {foreach_int $i 0 50
                        {if_else
                           {&&
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeShortcut}
                              ;{!= {{music_library get_highlighted_node} get_node_type} kNodeSubheader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeHeader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeFunction}
                           }
                           {song.lst set_selected_simulate_scroll {+ {song.lst selected_pos} 1}}
                           kDataUnhandled
                        }
                        {if
                           {&&
                              {== $i 49}
                              ;{!= {{music_library get_highlighted_node} get_node_type} kNodeSubheader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeShortcut}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeHeader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeFunction}
                           }
                           {music_library skip_to_next_shortcut}
                        }
                     }
                     {set $pause_scroll_sound FALSE}
                  }
                  {music_library skip_to_next_shortcut}
               }
            }
         )
         #ifndef HX_WII
         DX_SONG_LIST_LEFT_ACTION
         DX_SONG_LIST_RIGHT_ACTION
         #endif
         ({&&
               #ifdef HX_WII
               {==
                  $action
                  {$this get_page_up_button}}
               #else
               {== $action kAction_PageUp}
               #endif
               {!
                  {song.lst is_scrolling}}}
            {unless
               [waiting_for_sort]
               {song.lst set_scroll_user $user}
               {if_else {&& {music_library can_headers_be_selected} $sort_check_2}
                  {do
                     {song.lst set_selected_simulate_scroll {- {song.lst selected_pos} 1}}
                     {set $pause_scroll_sound TRUE}
                     {foreach_int $i 0 50
                        {if_else
                           {&&
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeSubheader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeShortcut}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeHeader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeFunction}
                           }
                           {song.lst set_selected_simulate_scroll {- {song.lst selected_pos} 1}}
                           kDataUnhandled
                        }
                        {if
                           {&&
                              {== $i 49}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeSubheader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeShortcut}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeHeader}
                              {!= {{music_library get_highlighted_node} get_node_type} kNodeFunction}
                           }
                           {music_library skip_to_prev_shortcut}
                        }
                     }
                     {set $pause_scroll_sound FALSE}
                  }
                  {music_library skip_to_prev_shortcut}
               }
            }
         )
         ({'||'
               {== $action kAction_Up}
               {== $action kAction_Down}}
            {unless
               [waiting_for_sort]
               {handle
                  (song.lst button_down $user $raw_button $action $pad_num)}})
         (TRUE kDataUnhandled)})
   (main_mode_button_held
      ($user $raw_button $action $pad_num)
      {cond
         ({== $action kAction_Confirm}
            {unless
               {'||'
                  {ui in_transition}
                  [waiting_for_sort]}
               {do
                  ($already_making_setlist
                     {music_library get_making_setlist})
                  ($node
                     {music_library get_highlighted_node})
                  ($on_function
                     {==
                        {$node get_node_type}
                        kNodeFunction})
                  ($on_random
                     {==
                        {$node get_token}
                        random_song})
                  ($starting_size
                     {music_library setlist_size})
                  {cond
                     ({&&
                           {music_library can_headers_be_selected}
                           {! $already_making_setlist}
                           {'||'
                              {! $on_function}
                              $on_random}}
                        {music_library clear_setlist}
                        {music_library set_making_setlist TRUE}
                        {if {== {{music_library get_highlighted_node} get_node_type} kNodeSong}
                           {if {> {{music_library get_highlighted_node} get_score} 0}
                              {foreach $entry $highscore_tracker
                                 {if {!= {elem $entry 0} {{music_library get_highlighted_node} get_token}} ;check if the state isnt in the list
                                    {set $pushtime_highscore TRUE} ;get ready to push it
                                 }
                              }
                              {foreach $entry $highscore_tracker
                                 {if {== {elem $entry 0} {{music_library get_highlighted_node} get_token}} ;check the list again, and if it is in the list
                                    {set $pushtime_highscore FALSE} ;dont push it
                                 }
                              }
                              {if $pushtime_highscore ;if we need to push
                                 {push_back $highscore_tracker ({{music_library get_highlighted_node} get_token} {{music_library get_highlighted_node} get_score})} ;push_back a new state into the array
                              }                  
                              {set $highscore_tracker {array $highscore_tracker}}
                              ;{dx_passive_messenger_symbol {sprint $highscore_tracker}}
                           }
                        }
                        {music_library select_highlighted_node $user})
                     ({&&
                           $already_making_setlist
                           {'||'
                              {! $on_function}
                              $on_random}}
                        {if
                           {'||'
                              {==
                                 {music_library get_max_setlist_size}
                                 0}
                              {==
                                 {music_library get_max_setlist_size}
                                 {music_library setlist_size}}}
                           {music_library play_setlist}})
                     (TRUE
                        {music_library select_highlighted_node $user})}
                  {play_instr_sfx $user button_select}}})
         ({== $action kAction_Cancel}
            {if_else $dx_prep_show_flow
               {do
                  {set $dx_in_show_flow FALSE}
                  {set $dx_prep_show_flow FALSE}
                  {set $dx_playing_a_show FALSE}
                  {overshell end_override_flow kOverrideFlow_SongSettings TRUE}
                  {ui sync_screen meta_loading_main_screen 0}
               }
            {if_else
               {&&
                  {music_library get_making_setlist}
                  {!
                     {music_library get_forced_setlist}}}
               {do
                  {music_library clear_setlist}
                  {music_library set_making_setlist FALSE}}
               {if_else
                  {!
                     {session is_local}}
                  {if_else
                     {is_leader_local}
                     {if_else
                        {machine_mgr all_machines_have_same_net_ui_state}
                        {ui
                           sync_screen
                           {music_library get_back_screen}
                           0}
                        {ui_event_mgr trigger_event remote_not_ready}}
                     {ui_event_mgr trigger_event remote_exit}}
                  {ui
                     go_back_screen
                     {music_library get_back_screen}
                     $user}}}})
         ({'||'
               #ifdef HX_WII
               {==
                  $action
                  {$this get_page_up_button}}
               {==
                  $action
                  {$this get_page_down_button}}
               #else
               {== $action kAction_PageUp}
               {== $action kAction_PageDown}}
               #endif
            {unless
               {'||'
                  {ui in_transition}
                  [waiting_for_sort]}
               {song_select_shortcut_panel
                  shortcut_enter
                  groups
                  $user
                  {music_library get_current_shortcut_ix}}})})
   (SCROLL_MSG
      {if {exists author_finder}
         {delete author_finder}
      }
      {cond
         ({&&
               {== $component song.lst}
               {!
                  {ui in_transition}}}
            {music_library
               set_highlight_ix
               {song.lst selected_pos}
               FALSE}
            {if
               [reviews_dirty]
               {set
                  [reviews_dirty]
                  FALSE}
               DX_AUTOSAVE})
         ({==
               $component
               {song_select_details find instruments.lst}}
            {if_else
               {==
                  {{music_library get_highlighted_node}
                     get_node_type}
                  kNodeSong}
                  {$this
                     refresh_star_grid
                     {profile_mgr get_primary_profile}
                     {{music_library get_highlighted_node}
                        id}
                     {{song_select_details find instruments.lst}
                        selected_sym}}
               {$this
                  refresh_setlist_scores
                  {profile_mgr get_primary_profile}
                  {{song_select_details find instruments.lst}
                     selected_sym}}})
         ({==
               $component
               {song_select_details find leaderboard_instruments.lst}}
            {$this refresh_leaderboard $user})
         ({==
               $component
               {song_select_details find leaderboard_types.lst}}
            {$this lb_in_progress}
            {$this
               set_leaderboard_mode
               {{song_select_details find leaderboard_types.lst}
                  selected_data}})})
   (FOCUS_MSG
      {if
         {&&
            $new_focus
            {startswith
               {$new_focus name}
               "review_"}}
         {{song_select_details find review_desc.lbl}
            set
            text_token
            {sprintf
               "review_%i_desc"
               {$new_focus get score}}}})
   (highlight_node_at_ix
      ($ix)
      {song.lst refresh}
      {song.lst set_selected_simulate_scroll $ix}
      
   )
   (set_details_button_config
      ($array)
      {with
         song_select_details
         {foreach_int
            $i
            0
            {size $array}
            {do
               ($button
                  {object
                     {sprintf
                        "details_%i.btn"
                        {'+' $i 1}}})
               {$button
                  set
                  text_token
                  {elem $array $i}}
               {$this enable $button}}}
         {foreach_int
            $i
            {size $array}
            {size
               {song_select_panel details_buttons}}
            {do
               ($button
                  {object
                     {sprintf
                        "details_%i.btn"
                        {'+' $i 1}}})
               {$button
                  set
                  text_token
                  ""}
               {$this disable $button}}}})
   (show_details
      ($user)
      {do
         {drum_pro.idd set instrument_type real_drum}
         {if {== {{music_library get_highlighted_node} get_node_type} kNodeSong}
            {drum_pro.idd set_song {{music_library get_highlighted_node} get_token}}
         }
         {guitar.idd set_showing TRUE}
         {bass.idd set_showing TRUE}
         {drum.idd set_showing TRUE}
         {vocals.idd set_showing TRUE}
         {harmony.idd set_showing TRUE}
         {keys.idd set_showing TRUE}
         {guitar_pro.idd set_showing TRUE}
         {bass_pro.idd set_showing TRUE}
         {drum_pro.idd set_showing TRUE}
         {keys_pro.idd set_showing TRUE}
         {dx_guitar.lbl set_showing FALSE}
         {dx_guitar_diff.lbl set_showing FALSE}
         {dx_bass.lbl set_showing FALSE}
         {dx_bass_diff.lbl set_showing FALSE}
         {dx_keys.lbl set_showing FALSE}
         {dx_keys_diff.lbl set_showing FALSE}
         {dx_drum.lbl set_showing FALSE}
         {dx_drum_diff.lbl set_showing FALSE}
         {dx_vocals.lbl set_showing FALSE}
         {dx_vocals_diff.lbl set_showing FALSE}
         {dx_real_guitar.lbl set_showing FALSE}
         {dx_real_guitar_diff.lbl set_showing FALSE}
         {dx_real_bass.lbl set_showing FALSE}
         {dx_real_bass_diff.lbl set_showing FALSE}
         {dx_real_keys.lbl set_showing FALSE}
         {dx_real_keys_diff.lbl set_showing FALSE}
         {dx_real_drum.lbl set_showing FALSE}
         {dx_real_drum_diff.lbl set_showing FALSE}
         {dx_real_vocals.lbl set_showing FALSE}
         {dx_real_vocals_diff.lbl set_showing FALSE}
         {dx_song_name_length.lbl set_showing FALSE}
         {dx_song_name_length_title.lbl set_showing FALSE}
         {dx_song_name_album.lbl set_showing FALSE}
         {dx_song_name_album_title.lbl set_showing FALSE}
         {dx_song_name_genre.lbl set_showing FALSE}
         {dx_song_name_genre_title.lbl set_showing FALSE}
         {dx_song_name_year.lbl set_showing FALSE}
         {dx_song_name_year_title.lbl set_showing FALSE}
      }
      {set
         [details_mode]
         TRUE}
      {input_mgr set_user $user}
      {if_else
         {ui in_transition}
         {details_show.trg play_end_of_anims}
         {details_show.trg trigger}}
      {if_else
         {ui in_transition}
         {setlist_hide.trg play_end_of_anims}
         {setlist_hide.trg trigger}}
      {with
         song_select_details
         {buttons.grp set_showing TRUE}
         {details_bottom.grp set_showing TRUE}
         {submenu_buttons.grp set_showing FALSE}
         {performance.grp set_showing FALSE}
         {review.grp set_showing FALSE}
         {stars.grp set_showing FALSE}
         {profile_msg.grp set_showing FALSE}
         {setlist_scores.grp set_showing FALSE}}
      {do
         ($item
            {music_library get_highlighted_node})
         ($type
            {$item get_node_type})
         ($length_ms
            {$item get_total_ms})
         {switch
            $type
            (kNodeSong
               {do
                  ($config
                     {array 0})
                  {cond
                     ({gamemode in_mode practice}
                        {push_back $config practice_song})
                     ({gamemode in_mode trainer}
                        {push_back $config train_song})
                     {if_else
                        {music_library get_making_setlist}
                        {push_back $config enqueue_song}
                        {push_back $config play_song}}}
                  {unless
                     {'||'
                        {gamemode in_mode practice}
                        {gamemode in_mode trainer}}
                     {if_else
                        {&&
                           #ifdef HX_WII
                           TRUE
                           #else
                           {!
                              {$item is_ugc}}
                           #endif
                           {'||'
                              {&&
                                 {==
                                    {$user connected_controller_type}
                                    kControllerKeys}
                                 {$item has_part real_keys}}
                              {&&
                                 {==
                                    {$user connected_controller_type}
                                    kControllerRealGuitar}
                                 {'||'
                                    {$item has_part real_guitar}
                                    {$item has_part real_bass}}}}}
                        {push_back $config practice_or_train_song}
                        {push_back $config practice_song}}}
                  {if
                     {profile_mgr has_primary_profile}
                     {push_back $config review_song}}
                  {push_back $config leaderboard}
                  {if
                     {$item is_download}
                     {push_back $config delete_song}}
                  {$this set_details_button_config $config}})
            (kNodeSetlist
               {do
                  ($config
                     {array 0})
                  {push_back $config play_set}
                  #ifdef HX_XBOX
                  {if
                     {$item has_viewable_gamercard}
                     {push_back $config overshell_gamercard}}
                  #endif
                  {if
                     {$item is_battle}
                     {push_back $config leaderboard}}
                  {if
                     {&&
                        {$item is_local_setlist}
                        {$item
                           is_profile_owner
                           {profile_mgr get_profile $user}}}
                     {push_back $config edit_setlist}
                     {push_back $config delete_setlist}
                     {if
                        {&&
                           {platform_mgr
                              is_user_signed_into_live
                              {{profile_mgr get_primary_profile}
                                 get_associated_user}}
                           {rock_central is_online}}
                        {if_else
                           {{$item get_setlist}
                              is_shared}
                           {push_back $config unshare_setlist}
                           {push_back $config share_setlist}}}}
                  {$this set_details_button_config $config}})}
         {switch
            $type
            (kNodeSong
               {do
                  ($instrument
                     {$user connected_controller_sym})
                  {if
                     {== $instrument real_guitar}
                     {set $instrument guitar}}
                  {$this
                     refresh_star_grid
                     {profile_mgr get_primary_profile}
                     {$item id}
                     $instrument}
                  {with
                     song_select_details
                     {album.lbl set_album_name $item}
                     {genre.lbl
                        set
                        text_token
                        {$item genre}}
                     {description.lbl
                        set
                        text_token
                        ""}
                     {year.lbl
                        set_song_year
                        {$item year_released}
                        {$item year_recorded}}
                     {details_artist_name.lbl set_artist_name $item}
                     {rating.lbl
                        set_rating_icon
                        {$item rating}}
                     {rating_description.lbl
                        set
                        text_token
                        {sprintf
                           "rating_%i"
                           {$item rating}}}
                     {rating.grp set_showing TRUE}
                     {details_song_name_length.lbl
                        set_token_fmt
                        title_length_fmt
                        ((title
                              {$item title})
                           (minutes
                              {int
                                 {/ $length_ms 60000}})
                           (seconds
                              {int
                                 {/
                                    {mod $length_ms 60000}
                                    1000}})
                           (ms
                              {mod $length_ms 1000}))}
                     {instruments.lst
                        set_data
                        (guitar bass drum keys vocals)
                        0
                        TRUE}
                     {instruments.lst set_selected $instrument}
                     {review.rvw
                        set_values
                        {$item get_review}
                        FALSE}}})
            (kNodeSetlist
               {do
                  ($score_type guitar)
                  {switch
                     {$user connected_controller_sym}
                     ((guitar real_guitar)
                        {set $score_type guitar})
                     (vocals
                        {set $score_type st_vocals})
                     (keys
                        {set $score_type keys})
                     (drum
                        {set $score_type drum})}
                  {with
                     song_select_details
                     {album.lbl
                        set
                        text_token
                        {$item get_setlist_type_sym}}
                     {genre.lbl
                        set_battle_instrument_str
                        {$item get_record}}
                     {description.lbl
                        set_setlist_description
                        {$item get_record}}
                     {year.lbl
                        set
                        text_token
                        ""}
                     {details_artist_name.lbl set_artist_name $item}
                     {rating.grp set_showing FALSE}
                     {if
                        {$item is_battle}
                        {details_bottom.grp set_showing FALSE}}
                     {if_else
                        {>= $length_ms 3600000}
                        {details_song_name_length.lbl
                           set_token_fmt
                           title_length_hour_fmt
                           ((title
                                 {$item get_title})
                              (hours
                                 {int
                                    {/ $length_ms 3600000}})
                              (minutes
                                 {int
                                    {/
                                       {mod $length_ms 3600000}
                                       60000}})
                              (seconds
                                 {int
                                    {/
                                       {mod $length_ms 60000}
                                       1000}})
                              (ms
                                 {mod $length_ms 1000}))}
                        {details_song_name_length.lbl
                           set_token_fmt
                           title_length_fmt
                           ((title
                                 {$item get_title})
                              (minutes
                                 {int
                                    {/ $length_ms 60000}})
                              (seconds
                                 {int
                                    {/
                                       {mod $length_ms 60000}
                                       1000}})
                              (ms
                                 {mod $length_ms 1000}))}}
                     {instruments.lst
                        set_data
                        (SCORE_TYPE_SYMBOLS)
                        0
                        TRUE}
                     {instruments.lst set_selected $score_type}}
                  {setlist_main.lst stop_auto_scroll}
                  {$this
                     refresh_setlist_scores
                     {profile_mgr get_primary_profile}
                     $score_type}})}}
      {$this
         set_focus
         {song_select_details find details_1.btn}})
   (refresh_star_grid
      ($profile $song_id $instrument)
      {with
         song_select_details
         {if
            $profile
            {foreach_int
               $i
               kDifficultyEasy
               kNumDifficulties
               {switch
                  $instrument
                  (guitar
                     {{basic_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreGuitar $i}
                        5}
                     {{pro_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreRealGuitar $i}
                        5}
                     {{basic_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreGuitar $i}}
                     {{pro_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreRealGuitar $i}})
                  (bass
                     {{basic_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreBass $i}
                        5}
                     {{pro_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreRealBass $i}
                        5}
                     {{basic_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreBass $i}}
                     {{pro_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreRealBass $i}})
                  (keys
                     {{basic_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreKeys $i}
                        5}
                     {{pro_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreRealKeys $i}
                        5}
                     {{basic_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreKeys $i}}
                     {{pro_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreRealKeys $i}})
                  (drum
                     {{basic_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreDrum $i}
                        5}
                     {{pro_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreRealDrum $i}
                        5}
                     {{basic_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreDrum $i}}
                     {{pro_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreRealDrum $i}})
                  (vocals
                     {{basic_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreVocals $i}
                        5}
                     {{pro_stars.set
                           get
                           (objects $i)}
                        set_values
                        {$profile get_stars $song_id kScoreHarmony $i}
                        5}
                     {{basic_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreVocals $i}}
                     {{pro_pcts.set
                           get
                           (objects $i)}
                        set_token_fmt
                        eg_percent_format
                        {$profile get_accuracy $song_id kScoreHarmony $i}})}}
            {stars.grp set_showing TRUE}}
         {profile_msg.grp
            set_showing
            {!
               {stars.grp showing}}}
         {instrument_icon.lbl
            set
            icon
            {cnv_instrumenttoicon $instrument 0}}})
   (refresh_setlist_scores
      ($profile $score_type)
      {with
         song_select_details
         {if
            $profile
            {setlist_scores.lst set_provider setlist_scores.lst}
            {do
               ($provider
                  {music_library get setlist_scores_provider})
               {$provider set_profile $profile}
               {$provider set_score_type $score_type}
               {$provider refresh_scores}
               {setlist_scores.lst set_provider $provider}}
            {setlist_scores.grp set_showing TRUE}
            {setlist_scores.lst auto_scroll}
            {instrument_icon.lbl
               set
               icon
               {get_font_char_from_score_type
                  {instruments.lst selected_pos}
                  0}}}
         {profile_msg.grp
            set_showing
            {!
               {setlist_scores.grp showing}}}})
   (hide_details
      {$this refresh_selected_song}
      {set
         [details_mode]
         FALSE}
      {if
         {!
            {gamemode in_mode practice}}
         {input_mgr clear_user}}
      {if_else
         {ui in_transition}
         {details_hide.trg play_end_of_anims}
         {details_hide.trg trigger}}
      {if
         {music_library get_making_setlist}
         {if_else
            {ui in_transition}
            {setlist_show.trg play_end_of_anims}
            {setlist_show.trg trigger}}}
      {do
         ($item
            {music_library get_highlighted_node})
         ($type
            {$item get_node_type})
         {switch
            $type
            (kNodeSetlist
               {setlist_main.lst auto_scroll})}}
      {$this set_focus song.lst})
   (input_user_left
      {if
         [details_mode]
         {$this hide_details}})
   (server_status_changed
      ($connected)
      {if
         [details_mode]
         {foreach
            $btn
            (share_setlist unshare_setlist)
            {set
               $btn
               {$this find_button $btn}}
            {if_else
               $connected
               {if
                  $btn
                  {song_select_details enable $btn}}
               {if
                  $btn
                  {if
                     {==
                        {$btn get_state}
                        kComponentFocused}
                     {$this highlight_button delete_setlist}}
                  {song_select_details disable $btn}}}}})
   (signin_changed
      {if
         [details_mode]
         {$this hide_details}})
   (profile_swapped
      {if
         [details_mode]
         {$this hide_details}})
   (refresh_screen_header
      {cond
         ({gamemode in_mode campaign}
            {header_left.grp set_showing FALSE}
            {header_tour.grp set_showing FALSE}
            {header_goals.grp set_showing TRUE}
            {goal_title.lbl
               set
               text_token
               {campaign get_current_goal}}
            {goal_desc.lbl
               set
               text_token
               {campaign get_current_goal_description}}
            {career.pic
               set
               tex_file
               {campaign get_current_goal_icon}})
         ({gamemode in_mode tour}
            {header_tour.grp set_showing TRUE}
            {header_left.grp set_showing FALSE}
            {header_goals.grp set_showing FALSE}
            {tour_title.lbl
               set
               text_token
               {{tour progress}
                  get_tour_name}}
            {do
               ($filter
                  {tour get_current_filter_name})
               ($song_count
                  {{tour performer}
                     get_gig_songcount})
               {if_else
                  {== $song_count 1}
                  {tour_desc.lbl set_token_fmt set_list_tour_title_singular $filter}
                  {tour_desc.lbl set_token_fmt set_list_tour_title $filter $song_count}}})
         (TRUE
            {header_left.grp set_showing TRUE}
            {header_goals.grp set_showing FALSE}
            {header_tour.grp set_showing FALSE}
            {if_else {modifier_mgr is_modifier_active mod_brutalmode}
               {music_library.lbl set text_token mod_brutalmode}
               {if_else
                  {music_library viewing_setlists}
                  {music_library.lbl set text_token setlist_browser}
                  {if_else
                     {music_library get_making_setlist}
                     {music_library.lbl
                        set
                        text_token
                        {music_library get_making_setlist_token}}
                     {music_library.lbl
                        set
                        text_token
                        {music_library get_title_token}}}}})})
   (on_change_setlist_mode
      {if_else
         {music_library get_making_setlist}
         {do
            {setlist_show.trg trigger}
            {header_setlist.trg trigger}}
         {do
            {setlist_hide.trg trigger}
            {if_else {modifier_mgr is_modifier_active mod_brutalmode}
               {do
                  {music_library.lbl set text_token mod_brutalmode}
                  {header_setlist.trg trigger}
               }
               {header_normal.trg trigger}
            }
         }
      }
      {$this refresh_screen_header})
   (refresh_top
      {do
         ($item
            {music_library get_highlighted_node})
         ($token
            {$item get_token})
         {album_overlay.mesh set_showing FALSE}
         {cond
            ({&&
                  {==
                     kNodeSong
                     {$item get_node_type}}
                  {!
                     {song_mgr is_song_mounted $token}}}
               {album_art.pic
                  set
                  tex_file
                  "ui/image/blank_album_art_keep.png"}
               {album_art.pic
                  set
                  mesh
                  {album_art.pic get mesh}})
            ({==
                  kNodeStoreSong
                  {$item get_node_type}}
               {album_art.pic
                  set
                  tex_file
                  "ui/image/blank_album_art_keep.png"}
               {album_art.pic
                  set
                  mesh
                  {album_art.pic get mesh}}
               {music_library
                  load_store_art
                  {$item get_offer}
                  $this})
            ({==
                  kNodeSetlist
                  {$item get_node_type}}
               {cond
                  ({$item is_net_setlist}
                     {if_else
                        {music_library net_setlist_art_ready $token}
                        {do
                           {album_overlay.mesh set_showing TRUE}
                           {album_overlay.mat
                              set
                              diffuse_tex
                              {music_library get_net_setlist_art $token}}
                           {album_art.pic
                              set
                              tex_file
                              "ui/image/canvas_keep.png"}
                           {album_art.pic
                              set
                              mesh
                              {album_art.pic get mesh}}}
                        {do
                           {album_art.pic
                              set
                              tex_file
                              {$item album_art_path}}
                           {album_art.pic
                              set
                              mesh
                              {album_art.pic get mesh}}
                           {music_library refresh_net_setlist_art}}})
                  ({$item is_local_setlist}
                     {if_else
                        {$item get_art_tex}
                        {do
                           {album_overlay.mesh set_showing TRUE}
                           {album_overlay.mat
                              set
                              diffuse_tex
                              {$item get_art_tex}}
                           {album_art.pic
                              set
                              tex_file
                              "ui/image/canvas_keep.png"}
                           {album_art.pic
                              set
                              mesh
                              {album_art.pic get mesh}}}
                        {do
                           {album_art.pic
                              set
                              tex_file
                              {$item album_art_path}}
                           {album_art.pic
                              set
                              mesh
                              {album_art.pic get mesh}}}})
                  {album_art.pic
                     set
                     tex_file
                     {$item album_art_path}}
                  {album_art.pic
                     set
                     mesh
                     {album_art.pic get mesh}}})
            {if_else
               #ifdef HX_PS3
               {file_exists {sprint "songs/updates/" $token "/gen/" $token "_keep.png_ps3"}}
               #endif
               #ifdef HX_XBOX
               {file_exists {sprint "songs/updates/" $token "/gen/" $token "_keep.png_xbox"}}
               #endif
               #ifdef HX_WII
               {file_exists {sprint "songs/updates/" $token "/gen/" $token "_keep.png_wii"}}
               #endif
               {album_art.pic
                  set
                  tex_file
                  {sprint "songs/updates/" $token "/" $token "_keep.png"}}
               {album_art.pic
                  set
                  tex_file
                  {$item album_art_path}}
            }
            {album_art.pic
               set
               mesh
               {album_art.pic get mesh}}}})
   (art_loaded
      {if
         {&&
            {$this is_up}
            {==
               {{music_library get_highlighted_node}
                  get_node_type}
               kNodeStoreSong}}
         {album.mat
            set
            diffuse_tex
            {music_library get_store_art}}})
   (refresh_songlist
      {song.lst refresh}
      {if
         {!=
            {song_select_shortcut_panel get shortcut_mode}
            none}
         {{song_select_shortcut_panel find shortcut.lst}
            refresh}})
   (update_helpbar
      {do
         ($item
            {music_library get_highlighted_node})
         ($type
            {$item get_node_type})
         ($making_setlist
            {music_library get_making_setlist})
         ($setlist_can_finish
            {&&
               {>
                  {music_library setlist_size}
                  0}
               {is_leader_local}})
         ($primary
            "")
         ($secondary
            "")
         ($option
            "")
         {set
            $primary
            {switch
               $type
               (kNodeFunction select)
               ((kNodeHeader kNodeSubheader)
                  {if_else
                     {music_library viewing_setlists}
                     ""
                     {if_else $making_setlist enqueue_all play_all}})
               (kNodeSong
                  {if_else $making_setlist enqueue_song play_song})
               (kNodeSetlist play_set)
               (kNodeStoreSong
                  {if_else
                     {music_library is_downloading $item}
                     ""
                     purchase_song})}}
         {set
            $secondary
            {switch
               $type
               (kNodeFunction
                  {cond
                     ({&&
                           {==
                              {$item get_token}
                              random_song}
                           $making_setlist
                           $setlist_can_finish}
                        hold_finish_setlist)
                     ({&&
                           {==
                              {$item get_token}
                              random_song}
                           {! $making_setlist}
                           {music_library can_headers_be_selected}}
                        hold_make_setlist)
                     (TRUE
                        "")})
               ((kNodeHeader kNodeSubheader kNodeStoreSong kNodeSong)
                  {cond
                     ({&& $making_setlist $setlist_can_finish}
                        hold_finish_setlist)
                     ({&&
                           {! $making_setlist}
                           {music_library can_headers_be_selected}}
                        hold_make_setlist)
                     (TRUE
                        "")})
               (kNodeSetlist
                  "")}}
         {unless $dx_event_mode
            {set
               $option
               {switch
                  $type
                  ((kNodeFunction kNodeHeader kNodeSubheader kNodeStoreSong)
                     "")
                  ((kNodeSong kNodeSetlist)
                     details)}}
         }
         {cond
            ({&& $primary $secondary}
               {help.ihp
                  set_config
                  ((kAction_Confirm $primary $secondary))})
            ({'||' $primary $secondary}
               {help.ihp
                  set_config
                  ((kAction_Confirm
                        {if_else $primary $primary $secondary}))})
            (TRUE
               {help.ihp
                  set_config
                  ()})}
         {if
            $option
            {help.ihp set_action_token kAction_Option $option}}})
   (set_mini_leaderboard_showing
      ($showing)
      {if_else
         $showing
         {do
            {leaderboard_show.trg trigger}
            {difficulty_hide.trg trigger}}
         {do
            {leaderboard_hide.trg trigger}
            {difficulty_show.trg trigger}}})
   (refresh_selected_song
      {$this refresh_top}
      {do
         ($item
            {music_library get_highlighted_node})
         ($type
            {$item get_node_type})
         {if_else
            {&&
               {== $type kNodeSong}
               {profile_mgr has_primary_profile}}
            {do
               {header_review.rvw
                  set_values
                  {$item get_review}
                  TRUE}
               {song_review.grp set_showing TRUE}
               {$this
                  dx_get_highscore
                  {profile_mgr get_primary_profile}
               }
            }
            {song_review.grp set_showing FALSE}}
         {if_else
            {'||'
               {== $type kNodeSong}
               {== $type kNodeStoreSong}}
            {do
               {leaderboard.mld
                  update_leaderboard
                  {$item id}
                  {music_library active_score_type}}
               {$this restart_leaderboard_timer}}
            {$this cancel_leaderboard_timer}}
         {if_else
            {== $type kNodeSetlist}
            {do
               {setlist_main.lst
                  set_provider
                  {music_library get setlist_scores_provider}}
               {setlist_main.lst set_selected 0}
               {setlist_main.lst auto_scroll}
               {setlist_creator.lbl
                  set_setlist_owner
                  {$item get_record}}
               {if_else
                  {$item is_battle}
                  {setlist_info.lbl
                     set_battle_time_left
                     {$item get_battle_time_left}}
                  {setlist_info.lbl
                     set_song_count
                     {$item get_song_count}}}
               {right_side_setlist.grp set_showing TRUE}}
            {right_side_setlist.grp set_showing FALSE}}
         #ifdef HX_PS3
         {ps3_storelogo.grp
            set_showing
            {== $type kNodeStoreSong}}
         #endif
         {switch
            $type
            (kNodeSong
               {do
                  ($token
                     {$item get_token})
                  {if_else $dx_song_select_rings
                     {drum_pro.idd set instrument_type band}
                     {drum_pro.idd set instrument_type real_drum}
                  }
                  {guitar.idd set_song $token}
                  {bass.idd set_song $token}
                  {drum.idd set_song $token}
                  {vocals.idd set_song $token}
                  {harmony.idd set_song $token}
                  {keys.idd set_song $token}
                  {guitar_pro.idd set_song $token}
                  {bass_pro.idd set_song $token}
                  {drum_pro.idd set_song $token}
                  {keys_pro.idd set_song $token}
                  {band.idd set_song $token}
                  {if_else $dx_song_select_rings
                     {do
                        {guitar.idd set_showing FALSE}
                        {bass.idd set_showing FALSE}
                        {drum.idd set_showing FALSE}
                        {vocals.idd set_showing FALSE}
                        {harmony.idd set_showing FALSE}
                        {keys.idd set_showing FALSE}
                        {guitar_pro.idd set_showing FALSE}
                        {bass_pro.idd set_showing FALSE}
                        {drum_pro.idd set_showing FALSE}
                        {keys_pro.idd set_showing FALSE}
                        {dx_guitar.lbl set_showing TRUE}
                        {dx_guitar_diff.lbl set_showing TRUE}
                        {dx_bass.lbl set_showing TRUE}
                        {dx_bass_diff.lbl set_showing TRUE}
                        {dx_keys.lbl set_showing TRUE}
                        {dx_keys_diff.lbl set_showing TRUE}
                        {dx_drum.lbl set_showing TRUE}
                        {dx_drum_diff.lbl set_showing TRUE}
                        {dx_vocals.lbl set_showing TRUE}
                        {dx_vocals_diff.lbl set_showing TRUE}
                        {dx_real_guitar.lbl set_showing TRUE}
                        {dx_real_guitar_diff.lbl set_showing TRUE}
                        {dx_real_bass.lbl set_showing TRUE}
                        {dx_real_bass_diff.lbl set_showing TRUE}
                        {dx_real_keys.lbl set_showing TRUE}
                        {dx_real_keys_diff.lbl set_showing TRUE}
                        {dx_real_drum.lbl set_showing TRUE}
                        {dx_real_drum_diff.lbl set_showing TRUE}
                        {dx_real_vocals.lbl set_showing TRUE}
                        {dx_real_vocals_diff.lbl set_showing TRUE}
                        {dx_song_name_length.lbl set_showing TRUE}
                        {dx_song_name_length_title.lbl set_showing TRUE}
                        {dx_song_name_album.lbl set_showing TRUE}
                        {dx_song_name_album_title.lbl set_showing TRUE}
                        {dx_song_name_genre.lbl set_showing TRUE}
                        {dx_song_name_genre_title.lbl set_showing TRUE}
                        {dx_song_name_year.lbl set_showing TRUE}
                        {dx_song_name_year_title.lbl set_showing TRUE}
                        {$this dx_diff_setter}
                     }
                     {do
                        {guitar.idd set_showing TRUE}
                        {bass.idd set_showing TRUE}
                        {drum.idd set_showing TRUE}
                        {vocals.idd set_showing TRUE}
                        {harmony.idd set_showing TRUE}
                        {keys.idd set_showing TRUE}
                        {guitar_pro.idd set_showing TRUE}
                        {bass_pro.idd set_showing TRUE}
                        {drum_pro.idd set_showing TRUE}
                        {keys_pro.idd set_showing TRUE}
                        {dx_guitar.lbl set_showing FALSE}
                        {dx_guitar_diff.lbl set_showing FALSE}
                        {dx_bass.lbl set_showing FALSE}
                        {dx_bass_diff.lbl set_showing FALSE}
                        {dx_keys.lbl set_showing FALSE}
                        {dx_keys_diff.lbl set_showing FALSE}
                        {dx_drum.lbl set_showing FALSE}
                        {dx_drum_diff.lbl set_showing FALSE}
                        {dx_vocals.lbl set_showing FALSE}
                        {dx_vocals_diff.lbl set_showing FALSE}
                        {dx_real_guitar.lbl set_showing FALSE}
                        {dx_real_guitar_diff.lbl set_showing FALSE}
                        {dx_real_bass.lbl set_showing FALSE}
                        {dx_real_bass_diff.lbl set_showing FALSE}
                        {dx_real_keys.lbl set_showing FALSE}
                        {dx_real_keys_diff.lbl set_showing FALSE}
                        {dx_real_drum.lbl set_showing FALSE}
                        {dx_real_drum_diff.lbl set_showing FALSE}
                        {dx_real_vocals.lbl set_showing FALSE}
                        {dx_real_vocals_diff.lbl set_showing FALSE}
                        {dx_song_name_length.lbl set_showing FALSE}
                        {dx_song_name_length_title.lbl set_showing FALSE}
                        {dx_song_name_album.lbl set_showing FALSE}
                        {dx_song_name_album_title.lbl set_showing FALSE}
                        {dx_song_name_genre.lbl set_showing FALSE}
                        {dx_song_name_genre_title.lbl set_showing FALSE}
                        {dx_song_name_year.lbl set_showing FALSE}
                        {dx_song_name_year_title.lbl set_showing FALSE}
                     }
                  }
                  {live_diffs.grp set_showing TRUE}})
            (kNodeStoreSong
               {guitar.idd
                  set_rank
                  {$item
                     get_data
                     (rank guitar)}}
               {bass.idd
                  set_rank
                  {$item
                     get_data
                     (rank bass)}}
               {drum.idd
                  set_rank
                  {$item
                     get_data
                     (rank drum)}}
               {vocals.idd
                  set_rank
                  {$item
                     get_data
                     (rank vocals)}}
               {harmony.idd
                  set_rank
                  {$item
                     get_data
                     (rank vocals)}}
               {keys.idd
                  set_rank
                  {$item
                     get_data
                     (rank keys)}}
               {guitar_pro.idd
                  set_rank
                  {$item
                     get_data
                     (rank real_guitar)}}
               {bass_pro.idd
                  set_rank
                  {$item
                     get_data
                     (rank real_bass)}}
               {drum_pro.idd
                  set_rank
                  {$item
                     get_data
                     (rank drum)}}
               {keys_pro.idd
                  set_rank
                  {$item
                     get_data
                     (rank real_keys)}}
               {harmony.idd
                  set
                  num_vocal_parts
                  {if_else
                     {$item has_data vocal_parts}
                     #ifdef HX_WII
                     {$item vocal_parts}
                     #else
                     {$item
                        get_data
                        (vocal_parts)}
                     #endif
                     0}}
               {live_diffs.grp set_showing TRUE})
            {live_diffs.grp set_showing FALSE}}
         {song_demo.grp
            set_showing
            {&&
               {== $type kNodeSong}
               {song_mgr
                  is_demo
                  {$item id}}}}
         {$this update_helpbar}})
   (refresh_filter
      {status.lbl set_music_library_status})
   (refresh_sort
      ($waiting)
      {if_else
         {music_library viewing_setlists}
         {do
            {header_setlist.trg trigger}
            {switch_to_setlist_mode.trg trigger}
            {setlist_hide.trg trigger}
            {$this refresh_screen_header}}
         {do
            {switch_to_song_mode.trg trigger}
            {if_else
               {music_library get_making_setlist}
               {setlist_show.trg trigger}
               {if_else {modifier_mgr is_modifier_active mod_brutalmode}
                  {do
                     {music_library.lbl set text_token mod_brutalmode}
                     {header_setlist.trg trigger}
                  }
                  {header_normal.trg trigger}
               }
            }
            {$this refresh_screen_header}}}
      {sort_wait.grp set_showing $waiting}
      {set
         [waiting_for_sort]
         $waiting}
      {status.lbl set_music_library_status})
   (refresh_setlist
      {setlist.lst refresh}
      {setlist.lst
         set_selected
         {min
            {music_library setlist_size}
            99}}
      {$this update_helpbar})
   (refresh_summary
      {if_else
         {music_library has_header_data}
         {do
            ($profile
               {profile_mgr get_primary_profile})
            ($tex
               {$profile get_picture_tex})
            {careerscore.scr
               set_values
               {music_library header_career_instrument_mask}
               {music_library header_career_score}}
            {careerstars.sd
               set_values
               {music_library header_career_stars}
               {music_library header_possible_stars}}
            {gamertag.lbl
               set_icon_and_profile_name
               {music_library active_score_type}
               $profile}
            {if_else
               $tex
               {profile_picture.mat set diffuse_tex $tex}
               {profile_picture.mat set diffuse_tex default_profile_picture.tex}}
            {stats.grp set_showing TRUE}}
         {stats.grp set_showing FALSE}})
   (move_on_quickplay
      {ui
         sync_screen
         {music_library get_next_screen}
         0}
      {dx_send_leader_song_speed}
   )
   (storage_changed
      {if
         [details_mode]
         {$this hide_details}}
      #ifdef HX_WII
      {if
         {&&
            {!=
               {ui transition_screen}
               deleting_content_screen}
            {!=
               {ui current_screen}
               deleting_content_screen}}
         {content_mgr start_refresh}}
      #else
      {if
         {content_mgr refresh_done}
         {content_mgr start_refresh}}
      #endif)
   (show_setlist_save_dialog
      {ui push_screen setlist_save_screen})
   (show_missing_setlist_songs_dialog
      ($num_songs)
      {missing_setlist_songs_screen set num_songs $num_songs}
      {ui push_screen missing_setlist_songs_screen})
   (lb_in_progress
      {if
         {$this is_up}
         {with
            song_select_details
            {view_gamer_card.ihp set_showing FALSE}
            {lb_status.lbl set text_token lb_waiting}
            {performance.lst set showing FALSE}}})
   (lb_success
      ($noresults $unranked $unplayed)
      {if
         {$this is_up}
         {with
            song_select_details
            {view_gamer_card.ihp set_showing FALSE}
            {{song_select_panel get lb_list}
               refresh}
            {song_select_panel
               set_to_starting_lb_ix
               {song_select_panel get lb_list}}
            {if_else
               $noresults
               {do
                  {lb_status.lbl set text_token lb_noresults}
                  {performance.lst set showing FALSE}}
               {do
                  {performance.lst set showing TRUE}
                  {lb_status.lbl
                     set
                     text_token
                     ""}
                  #ifdef HX_XBOX
                  {view_gamer_card.ihp set_showing TRUE}
                  #endif}}}})
   (lb_failure
      {if
         {$this is_up}
         {with
            song_select_details
            {view_gamer_card.ihp set_showing FALSE}
            {performance.lst set showing FALSE}
            #ifdef HX_WII
            {lb_status.lbl set text_token lb_error_live}
            #else
            {if_else
               {platform_mgr is_connected}
               {lb_status.lbl set text_token lb_error}
               {lb_status.lbl set text_token lb_error_live}}
            #endif}})}
{new
   BandScreen
   song_select_screen
   (panels meta postsong_sfx_panel #ifdef HX_WII sv4_panel #else DX_SV4_PANEL #endif song_select_panel song_select_shortcut_panel song_select_filter_panel)
   (focus song_select_panel)
   (enter
      {song_select_panel set_showing TRUE}
      {sv4_panel set_showing TRUE})
   (net_sync_scroll FALSE)}