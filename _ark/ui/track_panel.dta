#define TRACK_END_FRAME
(1920)
(new Object fc_guitar_callback ;remove FC groove on guitar miss/pass
   (hit
      {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
     {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $guitar_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $guitar_caughtmissed}
            {set $guitar_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
      {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $guitar_caughtmissed}
         {set $guitar_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $guitar_caughtmissed}
            {set $guitar_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_real_guitar_callback ;remove FC groove on real_guitar miss/pass
   (hit
      {if {! $real_guitar_firstnote} {set $real_guitar_firstnote TRUE}}
     {if {! $real_guitar_milosong} {set $real_guitar_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $real_guitar_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $real_guitar_caughtmissed}
            {set $real_guitar_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $real_guitar_firstnote} {set $real_guitar_firstnote TRUE}}
      {if {! $real_guitar_milosong} {set $real_guitar_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $real_guitar_caughtmissed}
         {set $real_guitar_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $real_guitar_caughtmissed}
            {set $real_guitar_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_real_drum_callback ;remove FC groove on real_drum miss/pass
   (hit
      {if {! $real_drum_firstnote} {set $real_drum_firstnote TRUE}}
     {if {! $real_drum_milosong} {set $real_drum_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $real_drum_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $real_drum_caughtmissed}
            {set $real_drum_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $real_drum_firstnote} {set $real_drum_firstnote TRUE}}
      {if {! $real_drum_milosong} {set $real_drum_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $real_drum_caughtmissed}
         {set $real_drum_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $real_drum_caughtmissed}
            {set $real_drum_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_bass_callback ;remove FC groove on bass miss/pass
   (hit
      {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
     {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $bass_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $bass_caughtmissed}
            {set $bass_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
      {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $bass_caughtmissed}
         {set $bass_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $bass_caughtmissed}
            {set $bass_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_real_bass_callback ;remove FC groove on real_bass miss/pass
   (hit
      {if {! $real_bass_firstnote} {set $real_bass_firstnote TRUE}}
     {if {! $real_bass_milosong} {set $real_bass_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $real_bass_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $real_bass_caughtmissed}
            {set $real_bass_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $real_bass_firstnote} {set $real_bass_firstnote TRUE}}
      {if {! $real_bass_milosong} {set $real_bass_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $real_bass_caughtmissed}
         {set $real_bass_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $real_bass_caughtmissed}
            {set $real_bass_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_keys_callback ;remove FC groove on keys miss/pass
   (hit
      {if {! $keys_firstnote} {set $keys_firstnote TRUE}}
     {if {! $keys_milosong} {set $keys_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $keys_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $keys_caughtmissed}
            {set $keys_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $keys_firstnote} {set $keys_firstnote TRUE}}
      {if {! $keys_milosong} {set $keys_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $keys_caughtmissed}
         {set $keys_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $keys_caughtmissed}
            {set $keys_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_real_keys_callback ;remove FC groove on real_keys miss/pass
   (hit
      {if {! $real_keys_firstnote} {set $real_keys_firstnote TRUE}}
     {if {! $real_keys_milosong} {set $real_keys_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $real_keys_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $real_keys_caughtmissed}
            {set $real_keys_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $real_keys_firstnote} {set $real_keys_firstnote TRUE}}
      {if {! $real_keys_milosong} {set $real_keys_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $real_keys_caughtmissed}
         {set $real_keys_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $real_keys_caughtmissed}
            {set $real_keys_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
(new Object fc_drum_callback ;remove FC groove on drum miss/pass
   (hit
      {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
     {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
     )
   (miss
      {unless {! $drum_firstnote}
         {set [num_gems_miss] {'+' [num_gems_miss] 1}}
         {set [num_gems_combo] 0}
         {$this check_missed}
         {if {! $drum_caughtmissed}
            {set $drum_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (pass
      {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
      {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
      {set [num_gems_pass] {'+' [num_gems_pass] 1}}
      {set [num_gems_combo] 0}
      {$this check_missed}
      {if {! $drum_caughtmissed}
         {set $drum_caughtmissed TRUE}
         {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
      }
   )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
         {set $fc TRUE}
      }
   )
   (check_missed
      {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
         {if {! $drum_caughtmissed}
            {set $drum_caughtmissed TRUE}
            {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex {coop_track_panel find multframe.tex}}}
         }
      }
   )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)
#define TRACK_PANEL_HANDLERS
((enter
         {if_else $fcringonce
            {do
               
               {{coop_track_panel find streak_meter_plate.tex} iterate_refs $ref {$ref set diffuse_tex fcframe.tex}}
               {{coop_track_panel find fcframe.tex} iterate_refs $ref {$ref set diffuse_tex fcframe.tex}}
               {{coop_track_panel find multframe.tex} iterate_refs $ref {$ref set diffuse_tex fcframe.tex}}
            }
            {do
               {set $fcringonce TRUE}
               {new Tex fcframe.tex}
               {{coop_track_panel find fcframe.tex} set_bitmap {sprint "ui/track/custom_track_textures/streak_meter_plate_fc_" $smasher ".png"}}
               {{coop_track_panel find streak_meter_plate.tex} iterate_refs $ref {$ref set diffuse_tex fcframe.tex}}
               {new Tex multframe.tex}
               {{coop_track_panel find multframe.tex} set_bitmap {sprint "ui/track/custom_track_textures/streak_meter_plate_" $smasher ".png"}}
            }
         }
      {game add_sink $this}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {switch {$player instrument}
            (bass {$player add_sink fc_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_guitar {$player add_sink fc_real_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_bass {$player add_sink fc_real_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (keys {$player add_sink fc_keys_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_keys {$player add_sink fc_real_keys_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (guitar {$player add_sink fc_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (drum {$player add_sink fc_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
            (real_drum {$player add_sink fc_real_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
         }
      }
      {$this
         set_showing
         {!
            {gamemode in_mode practice}}})
   (exit
      {game remove_sink $this})
   (unison_hit)
   (set_track_out)
   (set_track_in)
   (animate_track
      ($start $end $period $units))
   (animate_track_out)
   (animate_track_out_fast)
   (animate_track_in_fast)
   (finish_load
      {$this set_showing FALSE}
      {$this set_track_out})
   (intro_start
      {$this track_reset}
      {$this set_showing TRUE}
      {$this set_track_in})
   (intro_skip
      {$this track_reset}
      {$this set_showing TRUE}
      {$this set_track_out}
{if {&& {modifier_mgr is_modifier_active mod_nobre} $imabigboy}
         {if {! $already_restarted} ;cheap attempt to fix the "notes too quick bug" by restarting once automatically on initial song start, this will at least work in black bg
            {do
               {set $imabigboy FALSE}
               {set $already_restarted TRUE}
               {{{beatmatch active_player 0} get_user} set_difficulty kDifficultyExpert}
               {game_restart}
            }
         }
      }
   )
   (on_reset
      {beatmatch
         foreach_active_player
         $m
         {$m on_new_track}})
   (on_extend
   
{if {&& {modifier_mgr is_modifier_active mod_nobre} $imabigboy}
         {if {! $already_restarted} ;cheap attempt to fix the "notes too quick bug" by restarting once automatically on initial song start, this will at least work in black bg
            {do
               {set $imabigboy FALSE}
               {set $already_restarted TRUE}
               {{{beatmatch active_player 0} get_user} set_difficulty kDifficultyExpert}
               {game_restart}
            }
         }
      }


;populate texture array if an animated smasher texture modifier is on
{if $animatedsmasherscustomtexture
{if $animatedsmashers
{if {== {$user get_track_type} kTrackDrum} 
{set $drumframearray (drumframe0.tex drumframe1.tex drumframe2.tex drumframe3.tex drumframe4.tex drumframe5.tex drumframe6.tex
drumframe7.tex drumframe8.tex drumframe9.tex drumframe10.tex drumframe11.tex drumframe12.tex drumframe13.tex drumframe14.tex
drumframe15.tex drumframe16.tex drumframe17.tex drumframe18.tex drumframe19.tex drumframe20.tex drumframe21.tex drumframe22.tex
drumframe23.tex drumframe24.tex drumframe25.tex drumframe26.tex drumframe27.tex drumframe28.tex drumframe29.tex drumframe30.tex
drumframe31.tex drumframe32.tex drumframe33.tex drumframe34.tex drumframe35.tex drumframe36.tex drumframe37.tex drumframe38.tex
drumframe39.tex drumframe40.tex drumframe41.tex drumframe42.tex drumframe43.tex drumframe44.tex drumframe45.tex drumframe46.tex
drumframe47.tex drumframe48.tex drumframe49.tex drumframe50.tex drumframe51.tex drumframe52.tex drumframe53.tex drumframe54.tex
drumframe55.tex drumframe56.tex drumframe57.tex drumframe58.tex drumframe59.tex drumframe60.tex)}}

;populate texture array if an animated smasher texture modifier is on
{|| {$user get_track_type} kTrackGuitar kTrackBass kTrackKeys}
{set $guitarframearray (guitarframe0.tex guitarframe1.tex guitarframe2.tex guitarframe3.tex guitarframe4.tex guitarframe5.tex guitarframe6.tex
guitarframe7.tex guitarframe8.tex guitarframe9.tex guitarframe10.tex guitarframe11.tex guitarframe12.tex guitarframe13.tex guitarframe14.tex
guitarframe15.tex guitarframe16.tex guitarframe17.tex guitarframe18.tex guitarframe19.tex guitarframe20.tex guitarframe21.tex guitarframe22.tex
guitarframe23.tex guitarframe24.tex guitarframe25.tex guitarframe26.tex guitarframe27.tex guitarframe28.tex guitarframe29.tex guitarframe30.tex
guitarframe31.tex guitarframe32.tex guitarframe33.tex guitarframe34.tex guitarframe35.tex guitarframe36.tex guitarframe37.tex guitarframe38.tex
guitarframe39.tex guitarframe40.tex guitarframe41.tex guitarframe42.tex guitarframe43.tex guitarframe44.tex guitarframe45.tex guitarframe46.tex
guitarframe47.tex guitarframe48.tex guitarframe49.tex guitarframe50.tex guitarframe51.tex guitarframe52.tex guitarframe53.tex guitarframe54.tex
guitarframe55.tex guitarframe56.tex guitarframe57.tex guitarframe58.tex guitarframe59.tex guitarframe60.tex)}}}

;populate texture array if an animated gem texture is selected
{if $animatedgemscustomtexture
{if $animatedgems
{|| {$user get_track_type} kTrackGuitar kTrackBass kTrackKeys kTrackRealKeys}
{set $gemframearray (gemframe0.tex gemframe1.tex gemframe2.tex gemframe3.tex gemframe4.tex gemframe5.tex gemframe6.tex
gemframe7.tex gemframe8.tex gemframe9.tex gemframe10.tex gemframe11.tex gemframe12.tex gemframe13.tex gemframe14.tex
gemframe15.tex gemframe16.tex gemframe17.tex gemframe18.tex gemframe19.tex gemframe20.tex gemframe21.tex gemframe22.tex
gemframe23.tex gemframe24.tex gemframe25.tex gemframe26.tex gemframe27.tex gemframe28.tex gemframe29.tex gemframe30.tex
gemframe31.tex gemframe32.tex gemframe33.tex gemframe34.tex gemframe35.tex gemframe36.tex gemframe37.tex gemframe38.tex
gemframe39.tex gemframe40.tex gemframe41.tex gemframe42.tex gemframe43.tex gemframe44.tex gemframe45.tex gemframe46.tex
gemframe47.tex gemframe48.tex gemframe49.tex gemframe50.tex gemframe51.tex gemframe52.tex gemframe53.tex gemframe54.tex
gemframe55.tex gemframe56.tex gemframe57.tex gemframe58.tex gemframe59.tex gemframe60.tex)}

;populate drum texture array if an animated texture modifier is on
{if {== {$user get_track_type} kTrackDrum}
{set $gemdrumframearray (gemdrumframe0.tex gemdrumframe1.tex gemdrumframe2.tex gemdrumframe3.tex gemdrumframe4.tex gemdrumframe5.tex gemdrumframe6.tex
gemdrumframe7.tex gemdrumframe8.tex gemdrumframe9.tex gemdrumframe10.tex gemdrumframe11.tex gemdrumframe12.tex gemdrumframe13.tex gemdrumframe14.tex
gemdrumframe15.tex gemdrumframe16.tex gemdrumframe17.tex gemdrumframe18.tex gemdrumframe19.tex gemdrumframe20.tex gemdrumframe21.tex gemdrumframe22.tex
gemdrumframe23.tex gemdrumframe24.tex gemdrumframe25.tex gemdrumframe26.tex gemdrumframe27.tex gemdrumframe28.tex gemdrumframe29.tex gemdrumframe30.tex
gemdrumframe31.tex gemdrumframe32.tex gemdrumframe33.tex gemdrumframe34.tex gemdrumframe35.tex gemdrumframe36.tex gemdrumframe37.tex gemdrumframe38.tex
gemdrumframe39.tex gemdrumframe40.tex gemdrumframe41.tex gemdrumframe42.tex gemdrumframe43.tex gemdrumframe44.tex gemdrumframe45.tex gemdrumframe46.tex
gemdrumframe47.tex gemdrumframe48.tex gemdrumframe49.tex gemdrumframe50.tex gemdrumframe51.tex gemdrumframe52.tex gemdrumframe53.tex gemdrumframe54.tex
gemdrumframe55.tex gemdrumframe56.tex gemdrumframe57.tex gemdrumframe58.tex gemdrumframe59.tex gemdrumframe60.tex)}}

;populate keys texture array if an animated texture modifier is on
{if {== {$user get_track_type} kTrackRealKeys}
{set $gemkeysframearray (gemkeysframe0.tex gemkeysframe1.tex gemkeysframe2.tex gemkeysframe3.tex gemkeysframe4.tex gemkeysframe5.tex gemkeysframe6.tex
gemkeysframe7.tex gemkeysframe8.tex gemkeysframe9.tex gemkeysframe10.tex gemkeysframe11.tex gemkeysframe12.tex gemkeysframe13.tex gemkeysframe14.tex
gemkeysframe15.tex gemkeysframe16.tex gemkeysframe17.tex gemkeysframe18.tex gemkeysframe19.tex gemkeysframe20.tex gemkeysframe21.tex gemkeysframe22.tex
gemkeysframe23.tex gemkeysframe24.tex gemkeysframe25.tex gemkeysframe26.tex gemkeysframe27.tex gemkeysframe28.tex gemkeysframe29.tex gemkeysframe30.tex
gemkeysframe31.tex gemkeysframe32.tex gemkeysframe33.tex gemkeysframe34.tex gemkeysframe35.tex gemkeysframe36.tex gemkeysframe37.tex gemkeysframe38.tex
gemkeysframe39.tex gemkeysframe40.tex gemkeysframe41.tex gemkeysframe42.tex gemkeysframe43.tex gemkeysframe44.tex gemkeysframe45.tex gemkeysframe46.tex
gemkeysframe47.tex gemkeysframe48.tex gemkeysframe49.tex gemkeysframe50.tex gemkeysframe51.tex gemkeysframe52.tex gemkeysframe53.tex gemkeysframe54.tex
gemkeysframe55.tex gemkeysframe56.tex gemkeysframe57.tex gemkeysframe58.tex gemkeysframe59.tex gemkeysframe60.tex)}}}}

;populate texture array if an animated highway texture modifier is on
{if $animatedhighwaycustomtexture
{if $animatedhighway
{set $highframearray (highframe0.tex highframe1.tex highframe2.tex highframe3.tex highframe4.tex highframe5.tex highframe6.tex
highframe7.tex highframe8.tex highframe9.tex highframe10.tex highframe11.tex highframe12.tex highframe13.tex highframe14.tex
highframe15.tex highframe16.tex highframe17.tex highframe18.tex highframe19.tex highframe20.tex highframe21.tex highframe22.tex
highframe23.tex highframe24.tex highframe25.tex highframe26.tex highframe27.tex highframe28.tex highframe29.tex highframe30.tex
highframe31.tex highframe32.tex highframe33.tex highframe34.tex highframe35.tex highframe36.tex highframe37.tex highframe38.tex
highframe39.tex highframe40.tex highframe41.tex highframe42.tex highframe43.tex highframe44.tex highframe45.tex highframe46.tex
highframe47.tex highframe48.tex highframe49.tex highframe50.tex highframe51.tex highframe52.tex highframe53.tex highframe54.tex
highframe55.tex highframe56.tex highframe57.tex highframe58.tex highframe59.tex highframe60.tex)}}}

;populate animated smasher bitmaps
{if $animatedsmasherscustomtexture
{if $animatedsmashers
{set $framecountbit 0}
{thread_task kTaskSeconds (script
{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackKeys} {new Tex {sprint "guitarframe" $framecountbit ".tex"}}}
{if {== {$user get_track_type} kTrackDrum} {new Tex {sprint "drumframe" $framecountbit ".tex"}}}
{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackKeys} {{sprint "guitarframe" $framecountbit ".tex"} set_bitmap {sprint "ui/track/animated_smashers/gem_smasher_guitar_" $animatedsmashername "/gem_smasher_guitar_" $animatedsmashername "_" $framecountbit ".png"}}}
{if {== {$user get_track_type} kTrackDrum} {{sprint "drumframe" $framecountbit ".tex"} set_bitmap {sprint "ui/track/animated_smashers/gem_smasher_drum_" $animatedsmashername "/gem_smasher_drum_" $animatedsmashername "_" $framecountbit ".png"}}}
{set $framecountbit {+ $framecountbit 1}}
{unless {>= $framecountbit 60} {$task loop}})}}}

;apply animated smasher in game task
{if $animatedsmashers
{set $framecountdif 0}
{thread_task kTaskSeconds (delay 0.4) (script
{if {== {$user get_track_type} kTrackDrum} {gem_smasher_drum.mat set diffuse_tex {elem $drumframearray $framecountdif}}}
{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackKeys} {gem_smasher_guitar.mat set diffuse_tex {elem $guitarframearray $framecountdif}}}
{set $framecountdif {+ $framecountdif 1}}
{$task sleep 0.016}
{if {>= $framecountdif 60} {set $framecountdif 0}}
{$task loop})}}

;populate memory with animated gems textures for replacement
{if $animatedgemscustomtexture
{if $animatedgems
{set $gemframecounttex 0}
{thread_task kTaskSeconds (script
{if {|| {$user get_track_type} kTrackDrum kTrackGuitar kTrackBass kTrackKeys kTrackRealKeys} {new Tex {sprint "gemframe" $gemframecounttex ".tex"}}}
{if {== {$user get_track_type} kTrackDrum} {new Tex {sprint "gemdrumframe" $gemframecounttex ".tex"}}}
{if {== {$user get_track_type} kTrackRealKeys} {new Tex {sprint "gemkeysframe" $gemframecounttex ".tex"}}}
{if {|| {$user get_track_type} kTrackDrum kTrackGuitar kTrackBass kTrackKeys kTrackRealKeys} {{sprint "gemframe" $gemframecounttex ".tex"} set_bitmap {sprint "ui/track/animated_gems/prism_gems_" $animatedgemname "/prism_gems_" $animatedgemname "_" $gemframecounttex ".png"}}}
{if {== {$user get_track_type} kTrackDrum} {{sprint "gemdrumframe" $gemframecounttex ".tex"} set_bitmap {sprint "ui/track/animated_gems/gem_cymbal_diffuse_" $animatedgemname "/gem_cymbal_diffuse_" $animatedgemname "_" $gemframecounttex ".png"}}}
{if {== {$user get_track_type} kTrackRealKeys} {{sprint "gemkeysframe" $gemframecounttex ".tex"} set_bitmap {sprint "ui/track/animated_gems/prism_gem_keyboard_style_" $animatedgemname "/prism_gem_keyboard_style_" $animatedgemname "_" $gemframecounttex ".png"}}}
{set $gemframecounttex {+ $gemframecounttex 1}}
{unless {>= $gemframecounttex 60} {$task loop}})}}}

;apply animated gems in game task
{if $animatedgems
{set $gemframecountdif 0}
{thread_task kTaskSeconds (delay 0.1) (script
{if {== {$user get_track_type} kTrackDrum} {gem_cymbal_diffuse.tex iterate_refs $ref {$ref set diffuse_tex {elem $gemdrumframearray $gemframecountdif}}}}
{if {== {$user get_track_type} kTrackDrum} {gem_cymbal_ems.tex iterate_refs $ref {$ref set diffuse_tex {elem $gemdrumframearray $gemframecountdif}}}}
{if {|| {$user get_track_type} kTrackDrum kTrackGuitar kTrackBass kTrackKeys kTrackRealKeys} {prism_gems.tex iterate_refs $ref {$ref set diffuse_tex {elem $gemframearray $gemframecountdif}}}}
{if {|| {$user get_track_type} kTrackDrum kTrackGuitar kTrackBass kTrackKeys kTrackRealKeys} {prism_gem_emissive.tex iterate_refs $ref {$ref set diffuse_tex {elem $gemframearray $gemframecountdif}}}}
{if {== {$user get_track_type} kTrackRealKeys} {prism_gem_keyboard_style.tex iterate_refs $ref {$ref set diffuse_tex {elem $gemkeysframearray $gemframecountdif}}}}
{set $gemframecountdif {+ $gemframecountdif 1}}
{$task sleep 0.016}
{if {>= $gemframecountdif 60} {set $gemframecountdif 0}}
{$task loop})}}

;populate animated highway bitmaps
{if $animatedhighwaycustomtexture
{if $animatedhighway
{set $highframecountbit 0}
{thread_task kTaskSeconds (script
{new Tex {sprint "highframe" $highframecountbit ".tex"}}
{{sprint "highframe" $highframecountbit ".tex"} set_bitmap {sprint "ui/track/animated_surfaces/" $animatedhighwayname "/" $animatedhighwayname "_" $highframecountbit ".png"}}
{set $highframecountbit {+ $highframecountbit 1}}
{unless {>= $highframecountbit 60} {$task loop}})}}}

;apply animated highway in game task
{if $animatedhighway
{set $highframecount 0}
{thread_task kTaskSeconds (delay 0.1) (script
{if {! $highwaykill}
{set $highwaykill TRUE}
{if {|| {$user get_track_type} kTrackBass kTrackGuitar kTrackRealBass kTrackRealGuitar} {watermark_bass.tex set_bitmap {sprint "ui/track/highways/_no_highway.png"}}}
{if {|| {$user get_track_type} kTrackBass kTrackGuitar kTrackRealBass kTrackRealGuitar} {watermark_guitar.tex set_bitmap {sprint "ui/track/highways/_no_highway.png"}}}
{if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex set_bitmap {sprint "ui/track/highways/_no_highway.png"}}}
{if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex set_bitmap {sprint "ui/track/highways/_no_highway.png"}}}

{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackRealBass kTrackRealGuitar} {watermark_bass.tex iterate_refs $ref {$ref set prelit FALSE}}}
{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackRealBass kTrackRealGuitar} {watermark_guitar.tex iterate_refs $ref {$ref set prelit FALSE}}}
{if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex iterate_refs $ref {$ref set prelit FALSE}}}
{if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex iterate_refs $ref {$ref set prelit FALSE}}}}

{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackRealBass kTrackRealGuitar} {watermark_bass.tex iterate_refs $ref {$ref set diffuse_tex {elem $highframearray $highframecount}}}}
{if {|| {$user get_track_type} kTrackGuitar kTrackBass kTrackRealBass kTrackRealGuitar} {watermark_guitar.tex iterate_refs $ref {$ref set diffuse_tex {elem $highframearray $highframecount}}}}
{if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex iterate_refs $ref {$ref set diffuse_tex {elem $highframearray $highframecount}}}}
{if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex iterate_refs $ref {$ref set diffuse_tex {elem $highframearray $highframecount}}}}
{set $highframecount {+ $highframecount 1}}
{$task sleep 0.041}
{if {>= $highframecount 60} {set $highframecount 0}}
{$task loop})}}

{if {modifier_mgr is_modifier_active mod_rb2ui}
   {scoreboard_frame.tex set_bitmap ui/track/custom_track_textures/scoreboard_frame_rb2.png}
   {scoreboard_lens.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {crowd_meter_frame.tex set_bitmap ui/track/custom_track_textures/crowd_meter_frame_rb2.png}
   {crowd_meter_lens.tex set_bitmap "ui/track/highways/_no_highway.png"}
   {overdrive_meter_background_fill.tex set_bitmap ui/track/custom_track_textures/overdrive_meter_background_fill_rb2.png}
   {overdrive_meter_glass_nomip.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {streak_meter_bg.tex set_bitmap "ui/track/custom_track_textures/streak_meter_bg_rb2.png"}
   {streak_meter_lens.tex set_bitmap "ui/track/highways/_no_highway.png"}
   {score_star_frame.tex set_bitmap ui/track/custom_track_textures/score_star_frame_rb2.png}
   {score_star_gold.tex set_bitmap ui/track/custom_track_textures/score_star_gold_rb2.png}}

{if $rb4uicustomtexture
{if {modifier_mgr is_modifier_active mod_rb4ui}
      {score_star_frame.tex set_bitmap ui/track/custom_track_textures/score_star_frame.png}
      {score_star_gold.tex set_bitmap ui/track/custom_track_textures/score_star_gold.png}
      {score_meter_wipe.tex set_bitmap ui/track/custom_track_textures/score_meter_wipe.png}
      {rb3_icons.tex set_bitmap ui/track/custom_track_textures/rb3_icons.png}
      {scoreboard_frame.tex set_bitmap ui/track/custom_track_textures/scoreboard_frame.png}
      {scoreboard_lens.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
      {crowd_meter_frame.tex set_bitmap ui/track/custom_track_textures/crowd_meter_frame.png}
      {crowd_meter_lens.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}}}

{if $rb2trkcustomtexture
{if {modifier_mgr is_modifier_active mod_rb2trk}
      {flare_gtr_style.tex set_bitmap ui/track/custom_track_textures/flare_style.png}
      {flare_gtr_inner.tex set_bitmap ui/track/custom_track_textures/flare_style.png}}}

{if $rb4trkcustomtexture
{if {modifier_mgr is_modifier_active mod_rb4trk}
      {gem_cap.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
      {broken_glass01.tex set_bitmap ui/track/custom_track_textures/broken_glass01.png}
      {broken_glass01_neg.tex set_bitmap ui/track/custom_track_textures/broken_glass01_neg.png}
      {broken_glass02.tex set_bitmap ui/track/custom_track_textures/broken_glass02.png}
      {radial_shockwave.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
      {spark.tex set_bitmap ui/track/custom_track_textures/sparks.png}
      {sparks_radial.tex set_bitmap ui/track/custom_track_textures/sparks_radial.png}
      {sparks_vertical.tex set_bitmap ui/track/custom_track_textures/sparks_vertical.png}}}

{if {modifier_mgr is_modifier_active mod_noflames}
   {radial_shockwave.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {fx_smasher_smoke.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}}

{if {modifier_mgr is_modifier_active mod_noflares}
   {flare_gtr_inner.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {flare_gtr_outer.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {flare_gtr_style.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {flare_inner.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {flare_outer.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {flare_style.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}}

{if {modifier_mgr is_modifier_active mod_nopart}
   {gem_cap.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {broken_glass01.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {broken_glass01_neg.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {broken_glass02.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {spark.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {sparks_radial.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}
   {sparks_vertical.tex set_bitmap ui/track/custom_track_textures/_no_highway.png}}

{if $emissivecustomtexture
{unless {== $emissive none}
      {if {== {$user get_track_type} kTrackDrum} {spotlight_drums_track_emissive.tex set_bitmap {sprint "ui/track/emissives/" $emissive ".png"}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track_emissive.tex set_bitmap {sprint "ui/track/emissives/" $emissive ".png"}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track_emissive.tex set_bitmap {sprint "ui/track/emissives/" $emissive ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track_emissive.tex set_bitmap {sprint "ui/track/emissives/" $emissive ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track_emissive.tex set_bitmap {sprint "ui/track/emissives/" $emissive ".png"}}}
      
      {if {== {$user get_track_type} kTrackDrum} {spotlight_drum_track_emissive.tex iterate_refs $ref {$ref set diffuse_tex spotlight_drum_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track_emissive.tex iterate_refs $ref {$ref set diffuse_tex spotlight_bass_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track_emissive.tex iterate_refs $ref {$ref set diffuse_tex spotlight_guitar_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track_emissive.tex iterate_refs $ref {$ref set diffuse_tex spotlight_keys_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track_emissive.tex iterate_refs $ref {$ref set diffuse_tex spotlight_prokeys_track_emissive.tex}}}
      
      {if {== {$user get_track_type} kTrackDrum} {spotlight_drum_track_emissive.tex iterate_refs $ref {$ref set emissive_map spotlight_drum_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track_emissive.tex iterate_refs $ref {$ref set emissive_map spotlight_bass_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track_emissive.tex iterate_refs $ref {$ref set emissive_map spotlight_guitar_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track_emissive.tex iterate_refs $ref {$ref set emissive_map spotlight_keys_track_emissive.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track_emissive.tex iterate_refs $ref {$ref set emissive_map spotlight_prokeys_track_emissive.tex}}}}}

{if $spotlightcustomtexture
{unless {== $spotlight none}
      {if {== {$user get_track_type} kTrackDrum} {spotlight_drums_track.tex set_bitmap {sprint "ui/track/spotlights/" $spotlight ".png"}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track.tex set_bitmap {sprint "ui/track/spotlights/" $spotlight ".png"}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track.tex set_bitmap {sprint "ui/track/spotlights/" $spotlight ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track.tex set_bitmap {sprint "ui/track/spotlights/" $spotlight ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track.tex set_bitmap {sprint "ui/track/spotlights/" $spotlight ".png"}}}

      {if {== {$user get_track_type} kTrackDrum} {spotlight_drum_track.tex iterate_refs $ref {$ref set diffuse_tex spotlight_drum_track.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track.tex iterate_refs $ref {$ref set diffuse_tex spotlight_bass_track.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track.tex iterate_refs $ref {$ref set diffuse_tex spotlight_guitar_track.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track.tex iterate_refs $ref {$ref set diffuse_tex spotlight_prokeys_track.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track.tex iterate_refs $ref {$ref set diffuse_tex spotlight_keys_track.tex}}}
      
      {if {== {$user get_track_type} kTrackDrum} {spotlight_drum_track.tex iterate_refs $ref {$ref set emissive_map spotlight_drum_track.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {spotlight_bass_track.tex iterate_refs $ref {$ref set emissive_map spotlight_bass_track.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {spotlight_guitar_track.tex iterate_refs $ref {$ref set emissive_map spotlight_guitar_track.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_prokeys_track.tex iterate_refs $ref {$ref set emissive_map spotlight_prokeys_track.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {spotlight_keys_track.tex iterate_refs $ref {$ref set emissive_map spotlight_keys_track.tex}}}}}

{if $highwaycustomtexture
{unless {== $highway none}
      {if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex set_bitmap {sprint "ui/track/highways/" $highway ".png"}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {watermark_bass.tex set_bitmap {sprint "ui/track/highways/" $highway ".png"}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {watermark_guitar.tex set_bitmap {sprint "ui/track/highways/" $highway ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex set_bitmap {sprint "ui/track/highways/" $highway ".png"}}}
      
      {if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex iterate_refs $ref {$ref set diffuse_tex watermark_drum.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {watermark_bass.tex iterate_refs $ref {$ref set diffuse_tex watermark_bass.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {watermark_guitar.tex iterate_refs $ref {$ref set diffuse_tex watermark_guitar.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex iterate_refs $ref {$ref set diffuse_tex watermark_keys.tex}}}
      
      {if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex iterate_refs $ref {$ref set emissive_map watermark_drum.tex}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {watermark_bass.tex iterate_refs $ref {$ref set emissive_map watermark_bass.tex}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {watermark_guitar.tex iterate_refs $ref {$ref set emissive_map watermark_guitar.tex}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex iterate_refs $ref {$ref set emissive_map watermark_keys.tex}}}
      
      {if {== {$user get_track_type} kTrackDrum} {watermark_drum.tex iterate_refs $ref {$ref set emissive_multiplier 0.8}}}
      {if {|| {$user get_track_type} kTrackBass kTrackRealBass} {watermark_bass.tex iterate_refs $ref {$ref set emissive_multiplier 0.8}}}
      {if {|| {$user get_track_type} kTrackGuitar kTrackRealGuitar} {watermark_guitar.tex iterate_refs $ref {$ref set emissive_multiplier 0.8}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {watermark_keys.tex iterate_refs $ref {$ref set emissive_multiplier 0.8}}}}}

{if $smashercustomtexture
{unless {== $smasher none}
      {gem_smashers_guitar_nomip.tex set_bitmap {sprint "ui/track/smashers/gem_smashers_guitar_" $smasher ".png"}}
      {gem_smashers_guitar.tex set_bitmap {sprint "ui/track/smashers/gem_smashers_guitar_" $smasher ".png"}}
      {gem_smashers_drum_nomip.tex set_bitmap {sprint "ui/track/smashers/gem_smashers_drum_" $smasher ".png"}}
      {gem_smashers_drum.tex set_bitmap {sprint "ui/track/smashers/gem_smashers_drum_" $smasher ".png"}}
      {square_smasher_bright_green.tex set_bitmap {sprint "ui/track/smashers/square_smasher_bright_green_" $smasher ".png"}}
      {square_smasher_bright_red.tex set_bitmap {sprint "ui/track/smashers/square_smasher_bright_red_" $smasher ".png"}}
      {square_smasher_bright_yellow.tex set_bitmap {sprint "ui/track/smashers/square_smasher_bright_yellow_" $smasher ".png"}}
      {square_smasher_bright_blue.tex set_bitmap {sprint "ui/track/smashers/square_smasher_bright_blue_" $smasher ".png"}}
      {square_smasher_bright_orange.tex set_bitmap {sprint "ui/track/smashers/square_smasher_bright_orange_" $smasher ".png"}}}}

{if $gemcustomtexture
{unless {== $gem none}
      {gem_cymbal_ems.tex set_bitmap {sprint "ui/track/gems/gem_cymbal_diffuse_" $gem ".png"}}
      {prism_gems.tex set_bitmap {sprint "ui/track/gems/prism_gems_" $gem ".png"}}
      {prism_gem_emissive.tex set_bitmap {sprint "ui/track/gems/prism_gems_" $gem ".png"}}
      {prism_gem_keyboard_style.tex set_bitmap {sprint "ui/track/gems/prism_gem_keyboard_style_" $gem ".png"}}}}

{if $keyboardcustomtexture
{unless {== $keyboard none}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {track_lanes_keyboard.tex set_bitmap {sprint "ui/track/keyboards/track_lanes_keyboard_" $keyboard ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {track_lanes_keyboard_press.tex set_bitmap {sprint "ui/track/keyboards/track_lanes_keyboard_press_" $keyboard ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {gem_smasher_sharp_diffuse_nomip.tex set_bitmap {sprint "ui/track/keyboards/gem_smasher_sharp_diffuse_nomip_" $keyboard ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {gem_mash_prokeys_ems.tex set_bitmap {sprint "ui/track/keyboards/gem_mash_prokeys_ems_" $keyboard ".png"}}}
      {if {|| {$user get_track_type} kTrackKeys kTrackRealKeys} {gem_mash_prokeys.tex set_bitmap {sprint "ui/track/keyboards/gem_mash_prokeys_" $keyboard ".png"}}}}}
{set $rb2uicustomtexture FALSE}
{set $rb4uicustomtexture FALSE}
{set $rb2trkcustomtexture FALSE}
{set $rb4trkcustomtexture FALSE}
{set $animatedhighwaycustomtexture FALSE}
{set $animatedgemscustomtexture FALSE}
{set $animatedsmasherscustomtexture FALSE}
{set $highwaycustomtexture FALSE}
{set $spotlightcustomtexture FALSE}
{set $emissivecustomtexture FALSE}
{set $keyboardcustomtexture FALSE}
{$this play_intro}
      {if
         {&&
            {exists gamemode}
            {gamemode get play_track_intro_sfx}}
         {$this play_seq track_beg.cue}
         #ifdef HX_XBOX
         {unless
         {||
            {gamemode in_mode pro_song_lessons_keyboard} {gamemode in_mode pro_song_lessons_real_guitar}
            {gamemode in_mode pro_song_lessons_real_bass} {gamemode in_mode drum_freestyle}
            {gamemode in_mode trainer} {gamemode in_mode trainer_drums} {gamemode in_mode trainer_pro_drums}
            {gamemode in_mode trainer_real_guitar} {gamemode in_mode trainer_pro_keyboard}
            {gamemode in_mode audition} {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}}
         }
            {beatmatch set_music_speed $speedmod}}
         #else
         {unless
         {||
            {gamemode in_mode pro_song_lessons_keyboard} {gamemode in_mode pro_song_lessons_real_guitar}
            {gamemode in_mode pro_song_lessons_real_bass} {gamemode in_mode drum_freestyle}
            {gamemode in_mode trainer} {gamemode in_mode trainer_drums} {gamemode in_mode trainer_pro_drums}
            {gamemode in_mode trainer_real_guitar} {gamemode in_mode trainer_pro_keyboard}
            {&& {gamemode in_mode practice} {> {gamecfg get practice_speed} 0}}
         }
            {beatmatch set_music_speed $speedmod}}
         #endif
         {if
            {&&
               {gamemode in_mode practice}
               {>
                  {gamecfg get practice_speed}
                  0}}
            {beatmatch set_music_speed $modifier}}}
))
{new
   TrackPanel
   coop_track_panel
   (file
      "track/trackpanel.milo")
   TRACK_PANEL_HANDLERS}
{func
   get_track_panel
   {gamemode get track_panel}}
{set
   $playback_file
   ""}
