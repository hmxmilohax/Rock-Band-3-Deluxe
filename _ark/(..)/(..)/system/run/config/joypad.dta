(disable FALSE)
(deadzone 36)
(threshold 0.75)
(keepalive_ms 2147483647)
(ignore 1 2 3 4 5 6 7)
(hold_ms 500)
(repeat_ms 50)
(use_midi_mode FALSE)
(midi_joypad
   (disable TRUE)
   (mapping
      (36 kPad_L2)
      (38 kPad_L1)
      (46 kPad_R1)
      (48 kPad_R2)
      (45 kPad_X))
   (thresholds
      (36 50))
   (come_first FALSE))
#define IS_GUITAR
((is_guitar TRUE)
   (is_drum FALSE))
#define GUITAR_WITH_CALBERT
(IS_GUITAR)
#define GUITAR_WITHOUT_CALBERT
(IS_GUITAR)
#define IS_DRUM
((is_guitar FALSE)
   (is_drum TRUE))
#define NEITHER_DRUM_NOR_GUITAR
((is_guitar FALSE)
   (is_drum FALSE))
#define HX_XBOX_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_Xbox_RS)
   (cymbal_shift_button kPad_Xbox_RB)
   (secondary_button kPad_Xbox_LS)
   (guitar_shift_button kPad_NumButtons))
#define HX_PS3_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_L3)
   (cymbal_shift_button kPad_R3)
   (secondary_button kPad_R1)
   (guitar_shift_button kPad_NumButtons))
#define HX_WII_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_L3)
   (cymbal_shift_button kPad_R3)
   (secondary_button kPad_R1)
   (guitar_shift_button kPad_NumButtons))
#define NO_DRUM_SHIFT_BUTTONS
((pad_shift_button kPad_NumButtons)
   (cymbal_shift_button kPad_NumButtons)
   (secondary_button kPad_NumButtons)
   #ifdef HX_WII (guitar_shift_button kPad_NumButtons) #endif)
#define NO_GUITAR_SHIFT_BUTTONS
((guitar_shift_button kPad_NumButtons))
#define NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
((xbox_mercury_switch TRUE))
#define NON_HX_PS3_MERCURY_SWITCH_ADJUSTMENT
((ps3_mercury_switch TRUE))
#define LY_WHAMMY_VAL
((ly_whammy TRUE))
#define NEGATIVE_RX_WHAMMY_VAL
((negative_rx_whammy_val TRUE))
#define TRADITIONAL_WHAMMY_VAL
((traditional_whammy_val TRUE))
#define XBOX_DRUM_MASKS
((xbox_drums TRUE)
   (cymbal_mask 8)
   (green_cymbal_mask 72)
   (yellow_cymbal_mask 24)
   (blue_cymbal_mask 136)
   (secondary_pedal_mask 512)
   IS_DRUM)
#define PS3_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 1024)
   (green_cymbal_mask 1088)
   (yellow_cymbal_mask 1040)
   (blue_cymbal_mask 1152)
   (secondary_pedal_mask 8)
   IS_DRUM)
#define WII_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 1024)
   (green_cymbal_mask 1088)
   (yellow_cymbal_mask 1040)
   (blue_cymbal_mask 1152)
   (secondary_pedal_mask 8)
   IS_DRUM)
#define DEFAULT_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 65535)
   (green_cymbal_mask 65535)
   (yellow_cymbal_mask 65535)
   (blue_cymbal_mask 65535)
   (secondary_pedal_mask 0)
   IS_DRUM)
#define DEFAULT_NON_DRUM_MASKS
((xbox_drums FALSE)
   (cymbal_mask 65535)
   (green_cymbal_mask 65535)
   (yellow_cymbal_mask 65535)
   (blue_cymbal_mask 65535)
   (secondary_pedal_mask 0))
#define NULL_CONTROLLER
((none
      (detect)
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS))
#ifdef HX_PS3
(controllers
   (hx_guitar_ps3
      (detect
         (type kJoypadPs3HxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_L2))
   (ps3_rb2_guitar
      (detect
         (type kJoypadPs3HxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_L2))
   (hx_drums_ps3
      (detect
         (type kJoypadPs3HxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (hx_drums_ps3_rb2
      (detect
         (type kJoypadPs3HxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      HX_PS3_DRUM_SHIFT_BUTTONS)
   (ro_guitar_ps3
      (detect
         (type kJoypadPs3RoGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NON_HX_PS3_MERCURY_SWITCH_ADJUSTMENT
      NEGATIVE_RX_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (ro_drums_ps3_ghwt
      (detect
         (type kJoypadPs3RoDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (konami_drums_ps3_rr
      (detect
         (type kJoypadPs3KonamiDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_guitar_ps3
      (detect
         (or
            (type kJoypadPs3ButtonGuitar)
            (type kJoypadPs3RealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_keys_ps3
      (detect
         (or
            (type kJoypadPs3Keytar)
            (type kJoypadPs3MidiBoxKeyboard)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (analog
      (detect
         (type kJoypadAnalog))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (dualshock
      (detect
         (type kJoypadDualShock))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_PC
(controllers
   (strat_xbox
      (detect
         (type kJoypadXboxHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
   (strat_xbox_rb2
      (detect
         (type kJoypadXboxHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
   (hx_guitar_ps3
      (detect
         (type kJoypadPs3HxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_L2))
   (ps3_rb2_guitar
      (detect
         (type kJoypadPs3HxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_L2))
   (wii_guitar
      (detect
         (type kJoypadWiiHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (wii_guitar_rb2
      (detect
         (type kJoypadWiiHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_keys_wii
      (detect
         (type kJoypadWiiKeytar))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_keys_ps3
      (detect
         (or
            (type kJoypadPs3Keytar)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_keys_xbox
      (detect
         (or
            (type kJoypadXboxMidiBoxKeyboard)
            (type kJoypadXboxKeytar)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_guitar_wii
      (detect
         (or
            (type kJoypadWiiButtonGuitar)
            (type kJoypadWiiRealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_guitar_ps3
      (detect
         (or
            (type kJoypadPs3ButtonGuitar)
            (type kJoypadPs3RealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_guitar_xbox
      (detect
         (or
            (type kJoypadXboxButtonGuitar)
            (type kJoypadXboxRealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (ro_guitar_xbox
      (detect
         (type kJoypadXboxRoGuitar))
      (ignore_buttons kPad_L2 kPad_R2)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
   (hx_drums_xbox_rb2
      (detect
         (or
            (type kJoypadXboxDrumsRb2)
            (type kJoypadXboxMidiBoxDrums)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_drums_xbox
      (detect
         (type kJoypadXboxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (ps3_rb2_drums
      (detect
         (type kJoypadPs3HxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      PS3_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (wii_drums
      (detect
         (type kJoypadWiiHxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (wii_drums_rb2
      (detect
         (type kJoypadWiiHxDrumsRb2))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (midi
      (detect
         (type kJoypadMidi))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (ro_guitar
      (detect
         (and
            (stick kLeftAnalog X -1)
            (stick kLeftAnalog Y 0)))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      NEGATIVE_RX_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (ps3_gh4_drums
      (detect
         (type kJoypadPs3RoDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (digital
      (detect
         (and
            (button kPad_RStickRight)
            (button kPad_RStickDown)))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (analog
      (detect)
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (dualshock
      (detect)
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
#ifdef HX_XBOX
(controllers
   (strat_xbox
      (detect
         (type kJoypadXboxHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
   (strat_xbox_rb2
      (detect
         (type kJoypadXboxHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
   (ro_guitar_xbox
      (detect
         (type kJoypadXboxRoGuitar))
      (ignore_buttons kPad_L2 kPad_R2)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      NO_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL
      (guitar_shift_button kPad_Xbox_LS))
   (hx_drums_xbox
      (detect
         (type kJoypadXboxDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (hx_drums_xbox_rb2
      (detect
         (or
            (type kJoypadXboxDrumsRb2)
            (type kJoypadXboxMidiBoxDrums)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      XBOX_DRUM_MASKS
      HX_XBOX_DRUM_SHIFT_BUTTONS)
   (ro_drums_xbox
      (detect
         (type kJoypadXboxRoDrums))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (stagekit_xbox
      (detect
         (type kJoypadXboxStageKit))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_guitar_xbox
      (detect
         (or
            (type kJoypadXboxButtonGuitar)
            (type kJoypadXboxRealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (hx_midi_keys_xbox
      (detect
         (or
            (type kJoypadXboxMidiBoxKeyboard)
            (type kJoypadXboxKeytar)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
#ifdef PAD_IS_ACTUAL_GUITAR ; dx - macro to force connected standard controllers as guitar controllers, useful in specific cases such as Xenia on Xbox Series consoles or parsec or other places this happens.
   (digital
      (detect)
      (ignore_buttons kPad_L2 kPad_R2)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      NO_DRUM_SHIFT_BUTTONS
      TRADITIONAL_WHAMMY_VAL
      (guitar_shift_button kPad_Xbox_LS))
   (analog
      (detect)
      (lefty_flip TRUE)
      (translate_sticks FALSE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      NEEDS_XBOX_MERCURY_SWITCH_ADJUSTMENT
      TRADITIONAL_WHAMMY_VAL
      NO_DRUM_SHIFT_BUTTONS
      (guitar_shift_button kPad_Xbox_LS))
#else
   (digital
      (detect
         (type kJoypadDigital))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (analog
      (detect
         (type kJoypadAnalog))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
#endif
   NULL_CONTROLLER)
#endif
#ifdef HX_WII
(controllers
   (wii_remote
      (detect
         (or
            (type kJoypadWiiCore)
            (type kJoypadWiiFS)
            #ifdef _SHIP
            (type kJoypadWiiClassic)
            #endif))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_WII_DRUM_SHIFT_BUTTONS)
   #ifndef _SHIP
   (wii_classic
      (detect
         (type kJoypadWiiClassic))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      HX_WII_DRUM_SHIFT_BUTTONS)
   #endif
   (gamecube
      (detect
         (type kJoypadWiiGamecube))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (wii_guitar
      (detect
         (type kJoypadWiiHxGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
#ifdef HX_WII
      TRADITIONAL_WHAMMY_VAL
      (guitar_shift_button kPad_L2)
#endif
      NO_DRUM_SHIFT_BUTTONS)
   (wii_guitar_rb2
      (detect
         (type kJoypadWiiHxGuitarRb2))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITH_CALBERT
#ifdef HX_WII
      TRADITIONAL_WHAMMY_VAL
      (guitar_shift_button kPad_L2)
#endif
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_drums
      (detect
         (type kJoypadWiiHxDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_drums_rb2
      (detect
         (or
            (type kJoypadWiiHxDrumsRb2)
            (type kJoypadWiiMidiBoxDrums)))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      WII_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   (hx_midi_guitar_wii
      (detect
         (or
            (type kJoypadWiiButtonGuitar)
            (type kJoypadWiiRealGuitar22Fret)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      HX_WII_DRUM_SHIFT_BUTTONS)
   (hx_midi_keys_wii
      (detect
         (or
            (type kJoypadWiiKeytar)
            (type kJoypadWiiMidiBoxKeyboard)))
      (lefty_flip FALSE)
      (translate_sticks FALSE)
      (has_analog_sticks FALSE)
      DEFAULT_NON_DRUM_MASKS
      NEITHER_DRUM_NOR_GUITAR
      NO_DRUM_SHIFT_BUTTONS
      NO_GUITAR_SHIFT_BUTTONS)
   (wii_roguitar
      (detect
         (type kJoypadWiiGuitar))
      (lefty_flip TRUE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_NON_DRUM_MASKS
      GUITAR_WITHOUT_CALBERT
      TRADITIONAL_WHAMMY_VAL
      HX_WII_DRUM_SHIFT_BUTTONS)
   (wii_rodrums
      (detect
         (type kJoypadWiiDrums))
      (lefty_flip FALSE)
      (translate_sticks TRUE)
      (has_analog_sticks TRUE)
      DEFAULT_DRUM_MASKS
      HX_WII_DRUM_SHIFT_BUTTONS)
   NULL_CONTROLLER)
#endif
(five_way_controllers strat_xbox strat_xbox_rb2 hx_guitar_ps3 ps3_rb2_guitar wii_guitar wii_guitar_rb2)
(adapters
   (map
      ('4 axis 16 button joystick' default)
      ('MP-8866 Dual USB Joypad' ro_dual)
      ('Twin USB Joystick' ro_dual)
      ('6-button joystick' 6-button)
      ('PSX/USB Pad Adaptor (4-axis, 12-button, POV,effects)' kiky_system_x)
      ('TigerGame PS/PS2 Game Controller Adapter' tiger)
      ('XBOX 360 For Windows (Controller)' xbox)
      ('Controller (XBOX 360 For Windows)' xbox)
      ('Controller (Guitar Hero X-plorer  )' xbox)
      ('Harmonix Guitar for PlayStation' ps3_rb2_guitar)
      ('Harmonix RB3 Keyboard for PlayStation' hx_midi_keys_ps3)
      ('Harmonix RB3 MIDI Keyboard Interface for PlayStation' hx_midi_keys_ps3)
      ('Harmonix RB3 Mustang Guitar for PlayStation' hx_midi_guitar_ps3)
      ('Harmonix RB3 MIDI Guitar Interface for PlayStation' hx_midi_guitar_ps3)
      ('Harmonix Drum Kit for PlayStation' ps3_rb2_drums)
      ('Harmonix Drum kit for PlayStation' ps3_rb2_drums)
      ('Harmonix Guitar Controller for Nintendo Wii' wii_guitar_rb2)
      ('Harmonix RB3 Keyboard for Nintendo Wii' hx_midi_keys_wii)
      ('Harmonix RB3 MIDI Keyboard Interface for Nintendo Wii' hx_midi_keys_wii)
      ('Harmonix RB3 Mustang Guitar for Nintendo Wii' hx_midi_guitar_wii)
      ('Harmonix RB3 MIDI Guitar Interface for Nintendo Wii' hx_midi_guitar_wii)
      ('Harmonix Drum Controller for Nintendo Wii' wii_drums_rb2)
      ('GuitarHero for Playstation (R) 3' ps3_gh4_drums)
      ('Mad Catz Precision Bass Replica for Wii' wii_guitar)
      ('PLAYSTATION(R)3 Controller' default)
      ('PSX/USB Pad' default))
   (default
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_R3)
         (11 kPad_L3)
         (12 kPad_DUp)
         (13 kPad_DRight)
         (14 kPad_DDown)
         (15 kPad_DLeft)))
   (ps3_gh4_drums
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (ps3_rb2_guitar
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (ps3_rb2_drums
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (hx_midi_keys_wii
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (hx_midi_keys_ps3
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (hx_midi_guitar_wii
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (hx_midi_guitar_ps3
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_guitar_rb2
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_drums_rb2
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (wii_guitar
      (buttons
         (1 kPad_X)
         (2 kPad_Circle)
         (3 kPad_Tri)
         (0 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3)
         #ifdef HX_PC
         (12 kPad_ConsoleButton)
         #endif)
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks ps3))
   (smart_plus
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (kiky_system_x
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Select)
         (9 kPad_Start)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (ro_dual
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L1)
         (5 kPad_R1)
         (6 kPad_L2)
         (7 kPad_R2)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft)))
   (6-button
      (buttons
         (0 kPad_X)
         (1 kPad_Circle)
         (2 kPad_Square)
         (3 kPad_Tri)
         (4 kPad_L2)
         (5 kPad_R2)))
   (tiger
      (buttons
         (0 kPad_Tri)
         (1 kPad_Circle)
         (2 kPad_X)
         (3 kPad_Square)
         (4 kPad_L2)
         (5 kPad_R2)
         (6 kPad_L1)
         (7 kPad_R1)
         (8 kPad_Start)
         (9 kPad_Select)
         (10 kPad_L3)
         (11 kPad_R3)
         (12 kPad_DUp)
         (13 kPad_DRight)
         (14 kPad_DDown)
         (15 kPad_DLeft)))
   (xbox
      (buttons
         (0 kPad_X)
         (1 kPad_Tri)
         (2 kPad_Square)
         (3 kPad_Circle)
         (4 kPad_L1)
         (5 kPad_L2)
         (6 kPad_Select)
         (7 kPad_Start)
         (23 kPad_R2))
      (pov
         (0 kPad_DUp)
         (1 kPad_DRight)
         (2 kPad_DDown)
         (3 kPad_DLeft))
      (sticks xbox)))
#define GLOBAL_BUTTON_MEANINGS
((kPad_Start kAction_Start)
   (kPad_Select kAction_ViewModify)
   (kPad_DUp kAction_Up)
   (kPad_DRight kAction_Right)
   (kPad_DDown kAction_Down)
   (kPad_DLeft kAction_Left)
   (kPad_LStickUp kAction_Up)
   (kPad_LStickRight kAction_Right)
   (kPad_LStickDown kAction_Down)
   (kPad_LStickLeft kAction_Left))
#ifdef HX_WII
#define DEFAULT_BUTTON_MEANINGS
((kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_Square kAction_Option)
   (kPad_R1 kAction_PageDown)
   (kPad_L1 kAction_PageUp)
   (kPad_Tri kAction_ShellOption)
   GLOBAL_BUTTON_MEANINGS)
#else
#define DEFAULT_BUTTON_MEANINGS
((kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_Tri kAction_Option)
   (kPad_R1 kAction_PageDown)
   (kPad_L1 kAction_PageUp)
   (kPad_Square kAction_ShellOption)
   GLOBAL_BUTTON_MEANINGS)
#endif
#ifdef HX_WII
#define DEFAULT_MIDI_BUTTON_MEANINGS
((kPad_Start kAction_Start)
   (kPad_Select kAction_ViewModify)
   (kPad_DUp kAction_Up)
   (kPad_DRight kAction_Right)
   (kPad_DDown kAction_Down)
   (kPad_DLeft kAction_Left)
   (kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_Tri kAction_ShellOption)
   (kPad_Square kAction_Option))
#endif
#ifndef HX_WII
#define DEFAULT_MIDI_BUTTON_MEANINGS
((kPad_Start kAction_Start)
   (kPad_Select kAction_ViewModify)
   (kPad_DUp kAction_Up)
   (kPad_DRight kAction_Right)
   (kPad_DDown kAction_Down)
   (kPad_DLeft kAction_Left)
   (kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_Tri kAction_Option)
   (kPad_Square kAction_ShellOption))
#endif
#define DEFAULT_GUITAR_BUTTON_MEANINGS
((kPad_Square kAction_ShellOption)
   (kPad_L1 kAction_PageDown))
#define RO_GUITAR_BUTTON_MEANINGS
((kPad_Tri kAction_ShellOption)
   (kPad_L1 kAction_PageDown))
#ifdef HX_WII
#define DEFAULT_WII_DRUM_BUTTON_MEANINGS
((kPad_X kAction_Confirm)
   (kPad_Circle kAction_Cancel)
   (kPad_Tri kAction_ShellOption)
   (kPad_Square kAction_Option)
   (kPad_L1 kAction_PageDown)
   (kPad_R2 kAction_WiiHomeMenu))
#endif
#ifndef HX_WII
#define DEFAULT_DRUM_BUTTON_MEANINGS
((kPad_Xbox_A kAction_Confirm)
   (kPad_Xbox_B kAction_Cancel)
   (kPad_Xbox_Y kAction_Option)
   (kPad_Xbox_X kAction_ShellOption)
   (kPad_L1 kAction_PageDown))
#endif
#define UP_CANCELS
((kPad_Circle kAction_None)
   (kPad_Tri kAction_Cancel))
(button_meanings
   (analog DEFAULT_BUTTON_MEANINGS)
   (digital DEFAULT_BUTTON_MEANINGS)
   (dualshock DEFAULT_BUTTON_MEANINGS)
   (ro_guitar
      (kPad_R2 kAction_Confirm)
      (kPad_Circle kAction_Cancel)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (ro_guitar_xbox
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (ro_guitar_ps3
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (7 kAction_Option)
      RO_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (ps3_rb2_guitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (strat_xbox
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (strat_xbox_rb2
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (hx_guitar_ps3
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (hx_drums_ps3 DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (hx_drums_ps3_rb2 DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (ps3_rb2_drums
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_DRUM_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (ro_drums_ps3_ghwt DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (konami_drums_ps3_rr DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (hx_midi_guitar_ps3 DEFAULT_MIDI_BUTTON_MEANINGS)
   (hx_midi_keys_ps3
      DEFAULT_MIDI_BUTTON_MEANINGS
      (kPad_L1 kAction_PageDown))
   (hx_drums_xbox DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (hx_drums_xbox_rb2 DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (ro_drums_xbox DEFAULT_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (stagekit_xbox DEFAULT_BUTTON_MEANINGS)
   (hx_midi_guitar_xbox DEFAULT_MIDI_BUTTON_MEANINGS)
   (hx_midi_keys_xbox
      DEFAULT_MIDI_BUTTON_MEANINGS
      (kPad_L1 kAction_PageDown))
   (gamecube DEFAULT_BUTTON_MEANINGS)
   (wii_remote
      (kPad_R2 kAction_WiiHomeMenu)
      DEFAULT_BUTTON_MEANINGS)
   (wii_classic
      (kPad_R2 kAction_WiiHomeMenu)
      DEFAULT_BUTTON_MEANINGS)
   (wii_guitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (wii_guitar_rb2
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (wii_roguitar
      (6 kAction_Confirm)
      (5 kAction_Cancel)
      (4 kAction_Option)
      (kPad_R1 kAction_None)
      (kPad_R2 kAction_WiiHomeMenu)
      DEFAULT_GUITAR_BUTTON_MEANINGS
      GLOBAL_BUTTON_MEANINGS)
   (wii_drums DEFAULT_WII_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (wii_drums_rb2 DEFAULT_WII_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS)
   (hx_midi_guitar_wii DEFAULT_MIDI_BUTTON_MEANINGS)
   (hx_midi_keys_wii
      DEFAULT_MIDI_BUTTON_MEANINGS
      (kPad_L1 kAction_PageDown))
   (wii_rodrums DEFAULT_WII_DRUM_BUTTON_MEANINGS GLOBAL_BUTTON_MEANINGS))
#define kBreedVendorHmx
(0)
#define kBreedVendorPDP
(1)
#define kBreedVendorMadCatz
(2)
#define kBreedVendorIon
(3)
#define kBreedVendorUndefined
(127)
#define kBreedProjectRB2
(0)
#define kBreedProjectP9
(1)
#define kBreedProjectRB3
(2)
#define kBreedProjectUndefined
(127)
#define kBreedTypeRB2Strat
(0)
#define kBreedTypeP9Hofner
(1)
#define kBreedTypeP9Gretch
(2)
#define kBreedTypeP9Rickenbacker
(3)
#define kBreedTypeRB2Drum
(4)
#define kBreedTypeRB2Mic
(5)
#define kBreedTypeRB3Bridge
(6)
#define kBreedTypeRB3CoreGuitar
(7)
#define kBreedTypeRB3RealGuitar
(8)
#define kBreedTypeRB3CoreDrum
(9)
#define kBreedTypeRB3ButtonGuitar
(17)
#define kBreedTypeRB3Keyboard
(11)
#define kBreedTypeRB3MidiBox
(12)
#define kBreedTypeRB3RGInterface
(13)
#define kBreedTypeUndefined
(127)
#define kBreedPlatformXbox
(0)
#define kBreedPlatformPS
(1)
#define kBreedPlatformWii
(2)
#define kBreedPlatformBridge
(3)
#define kBreedPlatformAgnostic
(126)
#define kBreedPlatformUndefined
(127)
#define kBreedFactoryContel
(0)
#define kBreedFactoryEL
(1)
#define kBreedFactorySKSL
(2)
#define kBreedFactoryQualiman
(3)
#define kBreedFactoryMoonPo
(4)
#define kBreedFactoryUndefined
(127)
#ifndef _SHIP
(breed_data_string_mappings
   (vendor
      (kBreedVendorHmx
         "Harmonix")
      (kBreedVendorPDP
         "PDP")
      (kBreedVendorMadCatz
         "Mad Catz")
      (kBreedVendorIon
         "Ion")
      (kBreedVendorUndefined
         "undef"))
   (project
      (kBreedProjectRB2
         "RB2")
      (kBreedProjectP9
         "P9")
      (kBreedProjectRB3
         "RB3")
      (kBreedProjectUndefined
         "undef"))
   (peripheral_type
      (kBreedTypeRB2Strat
         "RB2 Fender Strat")
      (kBreedTypeP9Hofner
         "P9 Hofner Bass")
      (kBreedTypeP9Gretch
         "P9 Gretch Duo Jet")
      (kBreedTypeP9Rickenbacker
         "P9 Rickenbacker 325")
      (kBreedTypeRB2Drum
         "RB2 Drum")
      (kBreedTypeRB2Mic
         "RB2 Mic")
      (kBreedTypeRB3Bridge
         "RB3 Midi Bridge Module")
      (kBreedTypeRB3CoreGuitar
         "RB3 Core Guitar")
      (kBreedTypeRB3RealGuitar
         "RB3 Real Guitar")
      (kBreedTypeRB3CoreDrum
         "RB3 Core Drum")
      (kBreedTypeRB3ButtonGuitar
         "RB3 Button Guitar")
      (kBreedTypeRB3Keyboard
         "RB3 Keyboard")
      (kBreedTypeRB3MidiBox
         "RB3 Midi Box")
      (kBreedTypeRB3RGInterface
         "RB3 RG Interface Box")
      (kBreedTypeUndefined
         "undef"))
   (platform
      (kBreedPlatformXbox
         "Xbox 360")
      (kBreedPlatformPS
         "Playstation")
      (kBreedPlatformWii
         "Wii")
      (kBreedPlatformBridge
         "Bridge Module")
      (kBreedPlatformAgnostic
         "Agnostic")
      (kBreedPlatformUndefined
         "undef"))
   (factory
      (kBreedFactoryContel
         "Contel")
      (kBreedFactoryEL
         "Early Light")
      (kBreedFactorySKSL
         "Sung Kang Sung Lih")
      (kBreedFactoryQualiman
         "Qualiman")
      (kBreedFactoryMoonPo
         "Moon Po")
      (kBreedFactoryUndefined
         "undef")))
#endif